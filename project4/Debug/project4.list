
project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e14  08009e14  00020668  2**0
                  CONTENTS
  4 .ARM          00000008  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e1c  08009e1c  00020668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  20000000  08009e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006418  20000668  0800a48c  00020668  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a80  0800a48c  00026a80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020668  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002178d  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000406c  00000000  00000000  00041e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00045e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  00047790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000da5f  00000000  00000000  00048f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1f3  00000000  00000000  0005695f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff02b  00000000  00000000  00071b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  00170bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000668 	.word	0x20000668
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009af0 	.word	0x08009af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000066c 	.word	0x2000066c
 80001cc:	08009af0 	.word	0x08009af0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <printBytes>:
xSemaphoreHandle txMutex;
xSemaphoreHandle recipe_mutex;
xSemaphoreHandle cmd_mutex;
SemaphoreHandle_t servo_mutex;

void printBytes(char *bytes, int num){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    xSemaphoreTake( txMutex, portMAX_DELAY );
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <printBytes+0x30>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 ffb2 	bl	8007454 <xQueueSemaphoreTake>
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)bytes, num);
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <printBytes+0x34>)
 80004fa:	f005 f827 	bl	800554c <HAL_UART_Transmit_IT>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20006880 	.word	0x20006880
 800050c:	200069b8 	.word	0x200069b8

08000510 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    BaseType_t pxHigherPriorityTaskWoken;
    xSemaphoreGiveFromISR( txMutex, &pxHigherPriorityTaskWoken );
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_UART_TxCpltCallback+0x38>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f006 fe29 	bl	800717a <xQueueGiveFromISR>
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d007      	beq.n	800053e <HAL_UART_TxCpltCallback+0x2e>
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_UART_TxCpltCallback+0x3c>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	f3bf 8f6f 	isb	sy
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20006880 	.word	0x20006880
 800054c:	e000ed04 	.word	0xe000ed04

08000550 <TransmitTask>:

void TransmitTask( void *pvParameters) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    char *buffer = (char *)pvParameters;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60fb      	str	r3, [r7, #12]
    printBytes(buffer, strlen(buffer));
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff fe37 	bl	80001d0 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	4619      	mov	r1, r3
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff ffb6 	bl	80004d8 <printBytes>
    for(;;) {
        vTaskDelay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f007 fc88 	bl	8007e84 <vTaskDelay>
 8000574:	e7fa      	b.n	800056c <TransmitTask+0x1c>

08000576 <get_opcode>:
  vsprintf(buffer, message, data_points);
  va_end(data_points);
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer));
}

uint8_t get_opcode(uint8_t byte_register){
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	4603      	mov	r3, r0
 800057e:	71fb      	strb	r3, [r7, #7]
	return byte_register & 224;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f023 031f 	bic.w	r3, r3, #31
 8000586:	b2db      	uxtb	r3, r3
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <get_parameter>:

uint8_t get_parameter(uint8_t byte_register){
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	return byte_register & 31;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 031f 	and.w	r3, r3, #31
 80005a4:	b2db      	uxtb	r3, r3
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <get_current_time>:

uint16_t get_current_time(int servo_num){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <get_current_time+0x16>
		return (uint16_t)TIM3->CNT;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <get_current_time+0x28>)
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	e002      	b.n	80005d0 <get_current_time+0x1c>
	}
	else {
		return (uint16_t)TIM4->CNT;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <get_current_time+0x2c>)
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	b29b      	uxth	r3, r3
	}
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40000400 	.word	0x40000400
 80005e0:	40000800 	.word	0x40000800

080005e4 <calculate_delay>:

uint16_t calculate_delay(position last_position, position new_position, int recipe){
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	603a      	str	r2, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	460b      	mov	r3, r1
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint16_t number_of_steps, delay = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	81fb      	strh	r3, [r7, #14]
	number_of_steps = abs(last_position - new_position);
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bfb8      	it	lt
 8000602:	425b      	neglt	r3, r3
 8000604:	81bb      	strh	r3, [r7, #12]
	if(recipe){
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <calculate_delay+0x3a>
		delay = (uint16_t)1000 * number_of_steps;
 800060c:	89bb      	ldrh	r3, [r7, #12]
 800060e:	461a      	mov	r2, r3
 8000610:	0152      	lsls	r2, r2, #5
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	4413      	add	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	81fb      	strh	r3, [r7, #14]
 800061c:	e00a      	b.n	8000634 <calculate_delay+0x50>
	}
	else {
		delay = (uint16_t)200 * number_of_steps;
 800061e:	89bb      	ldrh	r3, [r7, #12]
 8000620:	461a      	mov	r2, r3
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	4413      	add	r3, r2
 8000626:	461a      	mov	r2, r3
 8000628:	0091      	lsls	r1, r2, #2
 800062a:	461a      	mov	r2, r3
 800062c:	460b      	mov	r3, r1
 800062e:	4413      	add	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	81fb      	strh	r3, [r7, #14]
	}
	return delay;
 8000634:	89fb      	ldrh	r3, [r7, #14]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <move_motor>:

uint16_t move_motor(int motor_num, servo_data *motor, uint16_t next_pos, int recipe){
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	80fb      	strh	r3, [r7, #6]
	position last_position;
	position new_position = (position)next_pos;
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	75fb      	strb	r3, [r7, #23]
	uint16_t current_time = get_current_time(motor_num);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff ffab 	bl	80005b4 <get_current_time>
 800065e:	4603      	mov	r3, r0
 8000660:	82bb      	strh	r3, [r7, #20]
	uint16_t delay = calculate_delay(last_position, new_position, recipe);
 8000662:	7df9      	ldrb	r1, [r7, #23]
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffbb 	bl	80005e4 <calculate_delay>
 800066e:	4603      	mov	r3, r0
 8000670:	823b      	strh	r3, [r7, #16]
	if(motor_num == 0){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d107      	bne.n	8000688 <move_motor+0x44>
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, positions[new_position]);
 8000678:	7dfb      	ldrb	r3, [r7, #23]
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <move_motor+0x84>)
 800067c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <move_motor+0x88>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
 8000686:	e006      	b.n	8000696 <move_motor+0x52>
	}
	else {
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, positions[new_position]);
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <move_motor+0x84>)
 800068c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <move_motor+0x88>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	639a      	str	r2, [r3, #56]	; 0x38
	}
	HAL_Delay(1000);
 8000696:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069a:	f001 fbd7 	bl	8001e4c <HAL_Delay>
	last_position = motor->position;
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	74fb      	strb	r3, [r7, #19]
	motor->position = new_position;
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	7dfa      	ldrb	r2, [r7, #23]
 80006a8:	705a      	strb	r2, [r3, #1]
	motor->next_pos = (position)next_pos;
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	711a      	strb	r2, [r3, #4]
	motor->last_start = current_time;
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	8aba      	ldrh	r2, [r7, #20]
 80006b6:	805a      	strh	r2, [r3, #2]
	motor->delay = delay;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	8a3a      	ldrh	r2, [r7, #16]
 80006bc:	80da      	strh	r2, [r3, #6]
}
 80006be:	bf00      	nop
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20006888 	.word	0x20006888

080006d0 <get_instruction>:


current_instruction get_instruction(uint8_t byte_register){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	current_instruction instruction_struct;
	instruction_struct.opcode = get_opcode(byte_register);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff4a 	bl	8000576 <get_opcode>
 80006e2:	4603      	mov	r3, r0
 80006e4:	723b      	strb	r3, [r7, #8]
	instruction_struct.parameter = get_parameter(byte_register);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff53 	bl	8000594 <get_parameter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	727b      	strb	r3, [r7, #9]
	return instruction_struct;
 80006f2:	893b      	ldrh	r3, [r7, #8]
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	2300      	movs	r3, #0
 80006f8:	7b3a      	ldrb	r2, [r7, #12]
 80006fa:	f362 0307 	bfi	r3, r2, #0, #8
 80006fe:	7b7a      	ldrb	r2, [r7, #13]
 8000700:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000704:	4618      	mov	r0, r3
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <instruction_in_bounds>:

int instruction_in_bounds(current_instruction instruction){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	80b8      	strh	r0, [r7, #4]
	return (instruction.parameter <= one_hundred_and_sixty_degrees);
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	2b05      	cmp	r3, #5
 8000718:	bf94      	ite	ls
 800071a:	2301      	movls	r3, #1
 800071c:	2300      	movhi	r3, #0
 800071e:	b2db      	uxtb	r3, r3
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <parse_cmd>:

int parse_cmd(cmd_status_t cmd_status){
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af02      	add	r7, sp, #8
 8000732:	463b      	mov	r3, r7
 8000734:	e883 0003 	stmia.w	r3, {r0, r1}
	int move_command_entered = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
	int recipe_start = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
	int already_printed_warning = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
	int restart = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
	uint16_t next_pos;
	uint16_t current_delay_time = 0;\
 8000748:	2300      	movs	r3, #0
 800074a:	82fb      	strh	r3, [r7, #22]
	vTaskDelay(2);
 800074c:	2002      	movs	r0, #2
 800074e:	f007 fb99 	bl	8007e84 <vTaskDelay>
	xSemaphoreTake(servo_mutex, 10000);
 8000752:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <parse_cmd+0x19c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f242 7110 	movw	r1, #10000	; 0x2710
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fe7a 	bl	8007454 <xQueueSemaphoreTake>
	int index = cmd_status.motor_idx;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	613b      	str	r3, [r7, #16]
	char cmd = cmd_status.cmd;
 8000764:	793b      	ldrb	r3, [r7, #4]
 8000766:	73fb      	strb	r3, [r7, #15]
	if (cmd == 'b'){
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	2b62      	cmp	r3, #98	; 0x62
 800076c:	d118      	bne.n	80007a0 <parse_cmd+0x74>
			reset_servo(index, &servos[index], 1);
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	015b      	lsls	r3, r3, #5
 8000772:	4a56      	ldr	r2, [pc, #344]	; (80008cc <parse_cmd+0x1a0>)
 8000774:	4413      	add	r3, r2
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	6938      	ldr	r0, [r7, #16]
 800077c:	f000 fc6a 	bl	8001054 <reset_servo>
			current_delay_time = 1000;
 8000780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000784:	82fb      	strh	r3, [r7, #22]
			servos[index].status = active;
 8000786:	4a51      	ldr	r2, [pc, #324]	; (80008cc <parse_cmd+0x1a0>)
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	015b      	lsls	r3, r3, #5
 800078c:	4413      	add	r3, r2
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
			recipe_start = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
			restart = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
			run_recipe();
 800079a:	f000 f8a3 	bl	80008e4 <run_recipe>
 800079e:	e086      	b.n	80008ae <parse_cmd+0x182>
	}
	else if (cmd == 'c'){
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b63      	cmp	r3, #99	; 0x63
 80007a4:	d112      	bne.n	80007cc <parse_cmd+0xa0>
			servos[index].status = active;
 80007a6:	4a49      	ldr	r2, [pc, #292]	; (80008cc <parse_cmd+0x1a0>)
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	015b      	lsls	r3, r3, #5
 80007ac:	4413      	add	r3, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
			servos[index].recipe_status = idle;
 80007b2:	4a46      	ldr	r2, [pc, #280]	; (80008cc <parse_cmd+0x1a0>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	4413      	add	r3, r2
 80007ba:	3308      	adds	r3, #8
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
			run_recipe();
 80007c0:	f000 f890 	bl	80008e4 <run_recipe>
			vTaskDelay(2);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f007 fb5d 	bl	8007e84 <vTaskDelay>
 80007ca:	e070      	b.n	80008ae <parse_cmd+0x182>
	}
	else if (cmd == 'l'){
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b6c      	cmp	r3, #108	; 0x6c
 80007d0:	d129      	bne.n	8000826 <parse_cmd+0xfa>
			next_pos = servos[index].position - 1;
 80007d2:	4a3e      	ldr	r2, [pc, #248]	; (80008cc <parse_cmd+0x1a0>)
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	4413      	add	r3, r2
 80007da:	3301      	adds	r3, #1
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	3b01      	subs	r3, #1
 80007e2:	81bb      	strh	r3, [r7, #12]
			if(servos[index].position != zero_degrees) {
 80007e4:	4a39      	ldr	r2, [pc, #228]	; (80008cc <parse_cmd+0x1a0>)
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	015b      	lsls	r3, r3, #5
 80007ea:	4413      	add	r3, r2
 80007ec:	3301      	adds	r3, #1
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00d      	beq.n	8000810 <parse_cmd+0xe4>
				current_delay_time = move_motor(index, &servos[index], next_pos, 0);
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	015b      	lsls	r3, r3, #5
 80007f8:	4a34      	ldr	r2, [pc, #208]	; (80008cc <parse_cmd+0x1a0>)
 80007fa:	1899      	adds	r1, r3, r2
 80007fc:	89ba      	ldrh	r2, [r7, #12]
 80007fe:	2300      	movs	r3, #0
 8000800:	6938      	ldr	r0, [r7, #16]
 8000802:	f7ff ff1f 	bl	8000644 <move_motor>
 8000806:	4603      	mov	r3, r0
 8000808:	82fb      	strh	r3, [r7, #22]
				move_command_entered = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
 800080e:	e04e      	b.n	80008ae <parse_cmd+0x182>
			}
			else {
				xTaskCreate( TransmitTask, "Transmit", 50, "Cannot move motor further left\r\n", 0, NULL);
 8000810:	2300      	movs	r3, #0
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	2300      	movs	r3, #0
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <parse_cmd+0x1a4>)
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	492d      	ldr	r1, [pc, #180]	; (80008d4 <parse_cmd+0x1a8>)
 800081e:	482e      	ldr	r0, [pc, #184]	; (80008d8 <parse_cmd+0x1ac>)
 8000820:	f007 f9e9 	bl	8007bf6 <xTaskCreate>
 8000824:	e043      	b.n	80008ae <parse_cmd+0x182>
			}
	}
	else if (cmd == 'p'){
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	2b70      	cmp	r3, #112	; 0x70
 800082a:	d106      	bne.n	800083a <parse_cmd+0x10e>
		servos[index].status = inactive;
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <parse_cmd+0x1a0>)
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	015b      	lsls	r3, r3, #5
 8000832:	4413      	add	r3, r2
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e039      	b.n	80008ae <parse_cmd+0x182>
	}
	else if (cmd == 'n'){
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b6e      	cmp	r3, #110	; 0x6e
 800083e:	d036      	beq.n	80008ae <parse_cmd+0x182>
		;
	}
	else if (cmd == 'r'){
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	2b72      	cmp	r3, #114	; 0x72
 8000844:	d129      	bne.n	800089a <parse_cmd+0x16e>
		next_pos = servos[index].position + 1;
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <parse_cmd+0x1a0>)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	015b      	lsls	r3, r3, #5
 800084c:	4413      	add	r3, r2
 800084e:	3301      	adds	r3, #1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	3301      	adds	r3, #1
 8000856:	81bb      	strh	r3, [r7, #12]
		if(servos[index].position != one_hundred_and_sixty_degrees) {
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <parse_cmd+0x1a0>)
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	4413      	add	r3, r2
 8000860:	3301      	adds	r3, #1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d00d      	beq.n	8000884 <parse_cmd+0x158>
			current_delay_time = move_motor(index, &servos[index], next_pos, 0);
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	015b      	lsls	r3, r3, #5
 800086c:	4a17      	ldr	r2, [pc, #92]	; (80008cc <parse_cmd+0x1a0>)
 800086e:	1899      	adds	r1, r3, r2
 8000870:	89ba      	ldrh	r2, [r7, #12]
 8000872:	2300      	movs	r3, #0
 8000874:	6938      	ldr	r0, [r7, #16]
 8000876:	f7ff fee5 	bl	8000644 <move_motor>
 800087a:	4603      	mov	r3, r0
 800087c:	82fb      	strh	r3, [r7, #22]
			move_command_entered = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
 8000882:	e014      	b.n	80008ae <parse_cmd+0x182>
		}
		else {
			xTaskCreate( TransmitTask, "Transmit", 50, "Cannot move motor further right\r\n", 0, NULL);
 8000884:	2300      	movs	r3, #0
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2300      	movs	r3, #0
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <parse_cmd+0x1b0>)
 800088e:	2232      	movs	r2, #50	; 0x32
 8000890:	4910      	ldr	r1, [pc, #64]	; (80008d4 <parse_cmd+0x1a8>)
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <parse_cmd+0x1ac>)
 8000894:	f007 f9af 	bl	8007bf6 <xTaskCreate>
 8000898:	e009      	b.n	80008ae <parse_cmd+0x182>
		}
	}
	else{
		xTaskCreate( TransmitTask, "Transmit", 50, "Invalid command\r\n", 0, NULL);
 800089a:	2300      	movs	r3, #0
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2300      	movs	r3, #0
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <parse_cmd+0x1b4>)
 80008a4:	2232      	movs	r2, #50	; 0x32
 80008a6:	490b      	ldr	r1, [pc, #44]	; (80008d4 <parse_cmd+0x1a8>)
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <parse_cmd+0x1ac>)
 80008aa:	f007 f9a4 	bl	8007bf6 <xTaskCreate>
	}
	xSemaphoreGive(servo_mutex);
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <parse_cmd+0x19c>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	2300      	movs	r3, #0
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	f006 fac6 	bl	8006e48 <xQueueGenericSend>
}
 80008bc:	bf00      	nop
 80008be:	4618      	mov	r0, r3
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20006838 	.word	0x20006838
 80008cc:	20006840 	.word	0x20006840
 80008d0:	08009b08 	.word	0x08009b08
 80008d4:	08009b2c 	.word	0x08009b2c
 80008d8:	08000551 	.word	0x08000551
 80008dc:	08009b38 	.word	0x08009b38
 80008e0:	08009b5c 	.word	0x08009b5c

080008e4 <run_recipe>:

void run_recipe(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af02      	add	r7, sp, #8
	xTaskCreate( TransmitTask, "Transmit", 256, "Running recipes...\r\n", 0, NULL);
 80008ea:	2300      	movs	r3, #0
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2300      	movs	r3, #0
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	4bad      	ldr	r3, [pc, #692]	; (8000ba8 <run_recipe+0x2c4>)
 80008f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f8:	49ac      	ldr	r1, [pc, #688]	; (8000bac <run_recipe+0x2c8>)
 80008fa:	48ad      	ldr	r0, [pc, #692]	; (8000bb0 <run_recipe+0x2cc>)
 80008fc:	f007 f97b 	bl	8007bf6 <xTaskCreate>
	int recipe_ended = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
	int keep_going = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
	int servos_paused = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
	char pause = NULL;
 800090c:	2300      	movs	r3, #0
 800090e:	71fb      	strb	r3, [r7, #7]

	while(1){
		if ((recipe_ended == 2) || (servos_paused == 2) || ((servos_paused == 1) && (recipe_ended == 1)) || ((servos_paused == 1) && (some_servo_inactive(servos))) || (both_servos_inactive_or_paused(servos))){
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	2b02      	cmp	r3, #2
 8000914:	f000 8221 	beq.w	8000d5a <run_recipe+0x476>
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b02      	cmp	r3, #2
 800091c:	f000 821d 	beq.w	8000d5a <run_recipe+0x476>
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d103      	bne.n	800092e <run_recipe+0x4a>
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2b01      	cmp	r3, #1
 800092a:	f000 8216 	beq.w	8000d5a <run_recipe+0x476>
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d106      	bne.n	8000942 <run_recipe+0x5e>
 8000934:	489f      	ldr	r0, [pc, #636]	; (8000bb4 <run_recipe+0x2d0>)
 8000936:	f000 fc21 	bl	800117c <some_servo_inactive>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	f040 820c 	bne.w	8000d5a <run_recipe+0x476>
 8000942:	489c      	ldr	r0, [pc, #624]	; (8000bb4 <run_recipe+0x2d0>)
 8000944:	f000 fc3a 	bl	80011bc <both_servos_inactive_or_paused>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 8205 	bne.w	8000d5a <run_recipe+0x476>
			break;
		}
		for(int servo_index = 0; servo_index < 2; servo_index++){
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	e1fc      	b.n	8000d50 <run_recipe+0x46c>
			if(servos[servo_index].status == active){
 8000956:	4a97      	ldr	r2, [pc, #604]	; (8000bb4 <run_recipe+0x2d0>)
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	f040 81f2 	bne.w	8000d4a <run_recipe+0x466>
				current_instruction instruction = get_instruction(recipes[servos[servo_index].recipe_idx][servos[servo_index].instr_idx]);
 8000966:	4a93      	ldr	r2, [pc, #588]	; (8000bb4 <run_recipe+0x2d0>)
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	4413      	add	r3, r2
 800096e:	330c      	adds	r3, #12
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4990      	ldr	r1, [pc, #576]	; (8000bb4 <run_recipe+0x2d0>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	440b      	add	r3, r1
 800097a:	3310      	adds	r3, #16
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	498e      	ldr	r1, [pc, #568]	; (8000bb8 <run_recipe+0x2d4>)
 8000980:	2064      	movs	r0, #100	; 0x64
 8000982:	fb00 f202 	mul.w	r2, r0, r2
 8000986:	4413      	add	r3, r2
 8000988:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe9e 	bl	80006d0 <get_instruction>
 8000994:	4603      	mov	r3, r0
 8000996:	803b      	strh	r3, [r7, #0]
				switch(instruction.opcode){
 8000998:	783b      	ldrb	r3, [r7, #0]
 800099a:	2ba0      	cmp	r3, #160	; 0xa0
 800099c:	f000 813b 	beq.w	8000c16 <run_recipe+0x332>
 80009a0:	2ba0      	cmp	r3, #160	; 0xa0
 80009a2:	f300 81aa 	bgt.w	8000cfa <run_recipe+0x416>
 80009a6:	2b80      	cmp	r3, #128	; 0x80
 80009a8:	f000 80ce 	beq.w	8000b48 <run_recipe+0x264>
 80009ac:	2b80      	cmp	r3, #128	; 0x80
 80009ae:	f300 81a4 	bgt.w	8000cfa <run_recipe+0x416>
 80009b2:	2b40      	cmp	r3, #64	; 0x40
 80009b4:	d072      	beq.n	8000a9c <run_recipe+0x1b8>
 80009b6:	2b40      	cmp	r3, #64	; 0x40
 80009b8:	f300 819f 	bgt.w	8000cfa <run_recipe+0x416>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 818f 	beq.w	8000ce0 <run_recipe+0x3fc>
 80009c2:	2b20      	cmp	r3, #32
 80009c4:	f040 8199 	bne.w	8000cfa <run_recipe+0x416>
				case MOV:
					if(instruction_in_bounds(instruction)){
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff fe9f 	bl	800070c <instruction_in_bounds>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d043      	beq.n	8000a5c <run_recipe+0x178>
						if(servos[servo_index].recipe_status == idle){
 80009d4:	4a77      	ldr	r2, [pc, #476]	; (8000bb4 <run_recipe+0x2d0>)
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	015b      	lsls	r3, r3, #5
 80009da:	4413      	add	r3, r2
 80009dc:	3308      	adds	r3, #8
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d113      	bne.n	8000a0c <run_recipe+0x128>
							start_timer(servo_index);
 80009e4:	6938      	ldr	r0, [r7, #16]
 80009e6:	f000 facd 	bl	8000f84 <start_timer>
							move_motor(servo_index, &servos[servo_index], instruction.parameter, 1);
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	4a71      	ldr	r2, [pc, #452]	; (8000bb4 <run_recipe+0x2d0>)
 80009f0:	1899      	adds	r1, r3, r2
 80009f2:	787b      	ldrb	r3, [r7, #1]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2301      	movs	r3, #1
 80009f8:	6938      	ldr	r0, [r7, #16]
 80009fa:	f7ff fe23 	bl	8000644 <move_motor>
							servos[servo_index].recipe_status = running;
 80009fe:	4a6d      	ldr	r2, [pc, #436]	; (8000bb4 <run_recipe+0x2d0>)
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	015b      	lsls	r3, r3, #5
 8000a04:	4413      	add	r3, r2
 8000a06:	3308      	adds	r3, #8
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
						}
						if(servos[servo_index].recipe_status == running){
 8000a0c:	4a69      	ldr	r2, [pc, #420]	; (8000bb4 <run_recipe+0x2d0>)
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	015b      	lsls	r3, r3, #5
 8000a12:	4413      	add	r3, r2
 8000a14:	3308      	adds	r3, #8
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	f040 818d 	bne.w	8000d38 <run_recipe+0x454>
							if(servo_ready(servo_index)){
 8000a1e:	6938      	ldr	r0, [r7, #16]
 8000a20:	f000 fb82 	bl	8001128 <servo_ready>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 8186 	beq.w	8000d38 <run_recipe+0x454>
								stop_timer(servo_index);
 8000a2c:	6938      	ldr	r0, [r7, #16]
 8000a2e:	f000 fac7 	bl	8000fc0 <stop_timer>
								servos[servo_index].recipe_status = idle;
 8000a32:	4a60      	ldr	r2, [pc, #384]	; (8000bb4 <run_recipe+0x2d0>)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	015b      	lsls	r3, r3, #5
 8000a38:	4413      	add	r3, r2
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
								servos[servo_index].instr_idx++;
 8000a40:	4a5c      	ldr	r2, [pc, #368]	; (8000bb4 <run_recipe+0x2d0>)
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	015b      	lsls	r3, r3, #5
 8000a46:	4413      	add	r3, r2
 8000a48:	3310      	adds	r3, #16
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	4959      	ldr	r1, [pc, #356]	; (8000bb4 <run_recipe+0x2d0>)
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	015b      	lsls	r3, r3, #5
 8000a54:	440b      	add	r3, r1
 8000a56:	3310      	adds	r3, #16
 8000a58:	601a      	str	r2, [r3, #0]
						keep_going = stop();
						if(keep_going){
							servos[servo_index].instr_idx++;
						}
					}
					break;
 8000a5a:	e16d      	b.n	8000d38 <run_recipe+0x454>
						xTaskCreate( TransmitTask, "Transmit", 256, "ERROR: Input out of bounds\r\n", 0, NULL);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	2300      	movs	r3, #0
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4b55      	ldr	r3, [pc, #340]	; (8000bbc <run_recipe+0x2d8>)
 8000a66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a6a:	4950      	ldr	r1, [pc, #320]	; (8000bac <run_recipe+0x2c8>)
 8000a6c:	4850      	ldr	r0, [pc, #320]	; (8000bb0 <run_recipe+0x2cc>)
 8000a6e:	f007 f8c2 	bl	8007bf6 <xTaskCreate>
						keep_going = stop();
 8000a72:	f000 fa65 	bl	8000f40 <stop>
 8000a76:	60f8      	str	r0, [r7, #12]
						if(keep_going){
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f000 815c 	beq.w	8000d38 <run_recipe+0x454>
							servos[servo_index].instr_idx++;
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <run_recipe+0x2d0>)
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	4413      	add	r3, r2
 8000a88:	3310      	adds	r3, #16
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	4949      	ldr	r1, [pc, #292]	; (8000bb4 <run_recipe+0x2d0>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	015b      	lsls	r3, r3, #5
 8000a94:	440b      	add	r3, r1
 8000a96:	3310      	adds	r3, #16
 8000a98:	601a      	str	r2, [r3, #0]
					break;
 8000a9a:	e14d      	b.n	8000d38 <run_recipe+0x454>
				case WAIT:
					if(servos[servo_index].recipe_status == idle){
 8000a9c:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <run_recipe+0x2d0>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	015b      	lsls	r3, r3, #5
 8000aa2:	4413      	add	r3, r2
 8000aa4:	3308      	adds	r3, #8
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d125      	bne.n	8000af8 <run_recipe+0x214>
						servos[servo_index].delay = (uint16_t)1000 * instruction.parameter;
 8000aac:	787b      	ldrb	r3, [r7, #1]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	0152      	lsls	r2, r2, #5
 8000ab4:	1ad2      	subs	r2, r2, r3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	b299      	uxth	r1, r3
 8000abe:	4a3d      	ldr	r2, [pc, #244]	; (8000bb4 <run_recipe+0x2d0>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	015b      	lsls	r3, r3, #5
 8000ac4:	4413      	add	r3, r2
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	460a      	mov	r2, r1
 8000aca:	801a      	strh	r2, [r3, #0]
						servos[servo_index].recipe_status = running;
 8000acc:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <run_recipe+0x2d0>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	015b      	lsls	r3, r3, #5
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3308      	adds	r3, #8
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
						start_timer(servo_index);
 8000ada:	6938      	ldr	r0, [r7, #16]
 8000adc:	f000 fa52 	bl	8000f84 <start_timer>
						uint16_t current_time = get_current_time(servo_index);
 8000ae0:	6938      	ldr	r0, [r7, #16]
 8000ae2:	f7ff fd67 	bl	80005b4 <get_current_time>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80bb      	strh	r3, [r7, #4]
						servos[servo_index].last_start = current_time;
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <run_recipe+0x2d0>)
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	4413      	add	r3, r2
 8000af2:	3302      	adds	r3, #2
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	801a      	strh	r2, [r3, #0]
					}
					if(servos[servo_index].recipe_status == running){
 8000af8:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <run_recipe+0x2d0>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	4413      	add	r3, r2
 8000b00:	3308      	adds	r3, #8
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	f040 8119 	bne.w	8000d3c <run_recipe+0x458>
						if(servo_ready(servo_index)){
 8000b0a:	6938      	ldr	r0, [r7, #16]
 8000b0c:	f000 fb0c 	bl	8001128 <servo_ready>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8112 	beq.w	8000d3c <run_recipe+0x458>
							stop_timer(servo_index);
 8000b18:	6938      	ldr	r0, [r7, #16]
 8000b1a:	f000 fa51 	bl	8000fc0 <stop_timer>
							servos[servo_index].recipe_status = idle;
 8000b1e:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <run_recipe+0x2d0>)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	015b      	lsls	r3, r3, #5
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
							servos[servo_index].instr_idx++;
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <run_recipe+0x2d0>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	015b      	lsls	r3, r3, #5
 8000b32:	4413      	add	r3, r2
 8000b34:	3310      	adds	r3, #16
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	491e      	ldr	r1, [pc, #120]	; (8000bb4 <run_recipe+0x2d0>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	015b      	lsls	r3, r3, #5
 8000b40:	440b      	add	r3, r1
 8000b42:	3310      	adds	r3, #16
 8000b44:	601a      	str	r2, [r3, #0]
						}
					}
					break;
 8000b46:	e0f9      	b.n	8000d3c <run_recipe+0x458>
				case LOOP:
					if(servos[servo_index].is_in_loop == 1){
 8000b48:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <run_recipe+0x2d0>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	015b      	lsls	r3, r3, #5
 8000b4e:	4413      	add	r3, r2
 8000b50:	3318      	adds	r3, #24
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d135      	bne.n	8000bc4 <run_recipe+0x2e0>
						xTaskCreate( TransmitTask, "Transmit", 256, "ERROR: Input creates nested loops\r\n", 0, NULL);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <run_recipe+0x2dc>)
 8000b62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b66:	4911      	ldr	r1, [pc, #68]	; (8000bac <run_recipe+0x2c8>)
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <run_recipe+0x2cc>)
 8000b6a:	f007 f844 	bl	8007bf6 <xTaskCreate>
						keep_going = stop();
 8000b6e:	f000 f9e7 	bl	8000f40 <stop>
 8000b72:	60f8      	str	r0, [r7, #12]
						if(keep_going){
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80e2 	beq.w	8000d40 <run_recipe+0x45c>
							servos[servo_index].instr_idx++;
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <run_recipe+0x2d0>)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	015b      	lsls	r3, r3, #5
 8000b82:	4413      	add	r3, r2
 8000b84:	3310      	adds	r3, #16
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	490a      	ldr	r1, [pc, #40]	; (8000bb4 <run_recipe+0x2d0>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	015b      	lsls	r3, r3, #5
 8000b90:	440b      	add	r3, r1
 8000b92:	3310      	adds	r3, #16
 8000b94:	601a      	str	r2, [r3, #0]
							servos[servo_index].is_in_loop = 0;
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <run_recipe+0x2d0>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	015b      	lsls	r3, r3, #5
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3318      	adds	r3, #24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
						servos[servo_index].instr_idx++;
						servos[servo_index].is_in_loop = 1;
						servos[servo_index].loop_idx = servos[servo_index].instr_idx;
						servos[servo_index].loop_cnt = instruction.parameter - 1;
					}
					break;
 8000ba4:	e0cc      	b.n	8000d40 <run_recipe+0x45c>
 8000ba6:	bf00      	nop
 8000ba8:	08009b70 	.word	0x08009b70
 8000bac:	08009b2c 	.word	0x08009b2c
 8000bb0:	08000551 	.word	0x08000551
 8000bb4:	20006840 	.word	0x20006840
 8000bb8:	20000018 	.word	0x20000018
 8000bbc:	08009b88 	.word	0x08009b88
 8000bc0:	08009ba8 	.word	0x08009ba8
						servos[servo_index].instr_idx++;
 8000bc4:	4a70      	ldr	r2, [pc, #448]	; (8000d88 <run_recipe+0x4a4>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	015b      	lsls	r3, r3, #5
 8000bca:	4413      	add	r3, r2
 8000bcc:	3310      	adds	r3, #16
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	1c5a      	adds	r2, r3, #1
 8000bd2:	496d      	ldr	r1, [pc, #436]	; (8000d88 <run_recipe+0x4a4>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	015b      	lsls	r3, r3, #5
 8000bd8:	440b      	add	r3, r1
 8000bda:	3310      	adds	r3, #16
 8000bdc:	601a      	str	r2, [r3, #0]
						servos[servo_index].is_in_loop = 1;
 8000bde:	4a6a      	ldr	r2, [pc, #424]	; (8000d88 <run_recipe+0x4a4>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	4413      	add	r3, r2
 8000be6:	3318      	adds	r3, #24
 8000be8:	2201      	movs	r2, #1
 8000bea:	601a      	str	r2, [r3, #0]
						servos[servo_index].loop_idx = servos[servo_index].instr_idx;
 8000bec:	4a66      	ldr	r2, [pc, #408]	; (8000d88 <run_recipe+0x4a4>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	015b      	lsls	r3, r3, #5
 8000bf2:	4413      	add	r3, r2
 8000bf4:	3310      	adds	r3, #16
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4963      	ldr	r1, [pc, #396]	; (8000d88 <run_recipe+0x4a4>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	440b      	add	r3, r1
 8000c00:	331c      	adds	r3, #28
 8000c02:	601a      	str	r2, [r3, #0]
						servos[servo_index].loop_cnt = instruction.parameter - 1;
 8000c04:	787b      	ldrb	r3, [r7, #1]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	495f      	ldr	r1, [pc, #380]	; (8000d88 <run_recipe+0x4a4>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	015b      	lsls	r3, r3, #5
 8000c0e:	440b      	add	r3, r1
 8000c10:	3314      	adds	r3, #20
 8000c12:	601a      	str	r2, [r3, #0]
					break;
 8000c14:	e094      	b.n	8000d40 <run_recipe+0x45c>
				case END_LOOP:
					if(servos[servo_index].is_in_loop != 1){
 8000c16:	4a5c      	ldr	r2, [pc, #368]	; (8000d88 <run_recipe+0x4a4>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	4413      	add	r3, r2
 8000c1e:	3318      	adds	r3, #24
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d025      	beq.n	8000c72 <run_recipe+0x38e>
						xTaskCreate( TransmitTask, "Transmit", 256, "ERROR: Input creates nested loops\r\n", 0, NULL);
 8000c26:	2300      	movs	r3, #0
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <run_recipe+0x4a8>)
 8000c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c34:	4956      	ldr	r1, [pc, #344]	; (8000d90 <run_recipe+0x4ac>)
 8000c36:	4857      	ldr	r0, [pc, #348]	; (8000d94 <run_recipe+0x4b0>)
 8000c38:	f006 ffdd 	bl	8007bf6 <xTaskCreate>
						keep_going = stop();
 8000c3c:	f000 f980 	bl	8000f40 <stop>
 8000c40:	60f8      	str	r0, [r7, #12]
						if(keep_going){
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d07d      	beq.n	8000d44 <run_recipe+0x460>
							servos[servo_index].instr_idx++;
 8000c48:	4a4f      	ldr	r2, [pc, #316]	; (8000d88 <run_recipe+0x4a4>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	015b      	lsls	r3, r3, #5
 8000c4e:	4413      	add	r3, r2
 8000c50:	3310      	adds	r3, #16
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	494c      	ldr	r1, [pc, #304]	; (8000d88 <run_recipe+0x4a4>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	440b      	add	r3, r1
 8000c5e:	3310      	adds	r3, #16
 8000c60:	601a      	str	r2, [r3, #0]
							servos[servo_index].is_in_loop = 0;
 8000c62:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <run_recipe+0x4a4>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	015b      	lsls	r3, r3, #5
 8000c68:	4413      	add	r3, r2
 8000c6a:	3318      	adds	r3, #24
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
						else {
							servos[servo_index].instr_idx = servos[servo_index].loop_idx;
							servos[servo_index].loop_cnt--;
						}
					}
					break;
 8000c70:	e068      	b.n	8000d44 <run_recipe+0x460>
						if(servos[servo_index].loop_cnt < 0){
 8000c72:	4a45      	ldr	r2, [pc, #276]	; (8000d88 <run_recipe+0x4a4>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	015b      	lsls	r3, r3, #5
 8000c78:	4413      	add	r3, r2
 8000c7a:	3314      	adds	r3, #20
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da14      	bge.n	8000cac <run_recipe+0x3c8>
							servos[servo_index].is_in_loop = 0;
 8000c82:	4a41      	ldr	r2, [pc, #260]	; (8000d88 <run_recipe+0x4a4>)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	015b      	lsls	r3, r3, #5
 8000c88:	4413      	add	r3, r2
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
							servos[servo_index].instr_idx++;
 8000c90:	4a3d      	ldr	r2, [pc, #244]	; (8000d88 <run_recipe+0x4a4>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	015b      	lsls	r3, r3, #5
 8000c96:	4413      	add	r3, r2
 8000c98:	3310      	adds	r3, #16
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	493a      	ldr	r1, [pc, #232]	; (8000d88 <run_recipe+0x4a4>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	015b      	lsls	r3, r3, #5
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3310      	adds	r3, #16
 8000ca8:	601a      	str	r2, [r3, #0]
					break;
 8000caa:	e04b      	b.n	8000d44 <run_recipe+0x460>
							servos[servo_index].instr_idx = servos[servo_index].loop_idx;
 8000cac:	4a36      	ldr	r2, [pc, #216]	; (8000d88 <run_recipe+0x4a4>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	015b      	lsls	r3, r3, #5
 8000cb2:	4413      	add	r3, r2
 8000cb4:	331c      	adds	r3, #28
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4933      	ldr	r1, [pc, #204]	; (8000d88 <run_recipe+0x4a4>)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	015b      	lsls	r3, r3, #5
 8000cbe:	440b      	add	r3, r1
 8000cc0:	3310      	adds	r3, #16
 8000cc2:	601a      	str	r2, [r3, #0]
							servos[servo_index].loop_cnt--;
 8000cc4:	4a30      	ldr	r2, [pc, #192]	; (8000d88 <run_recipe+0x4a4>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	015b      	lsls	r3, r3, #5
 8000cca:	4413      	add	r3, r2
 8000ccc:	3314      	adds	r3, #20
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1e5a      	subs	r2, r3, #1
 8000cd2:	492d      	ldr	r1, [pc, #180]	; (8000d88 <run_recipe+0x4a4>)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	440b      	add	r3, r1
 8000cda:	3314      	adds	r3, #20
 8000cdc:	601a      	str	r2, [r3, #0]
					break;
 8000cde:	e031      	b.n	8000d44 <run_recipe+0x460>
				case RECIPE_END:
					recipe_ended += 1;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
					reset_servo(servo_index, &servos[servo_index], 0);
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	015b      	lsls	r3, r3, #5
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <run_recipe+0x4a4>)
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6938      	ldr	r0, [r7, #16]
 8000cf4:	f000 f9ae 	bl	8001054 <reset_servo>
					break;
 8000cf8:	e027      	b.n	8000d4a <run_recipe+0x466>
				default:
					xTaskCreate( TransmitTask, "Transmit", 256, "ERROR: Invalid recipe\r\n", 0, NULL);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <run_recipe+0x4b4>)
 8000d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d08:	4921      	ldr	r1, [pc, #132]	; (8000d90 <run_recipe+0x4ac>)
 8000d0a:	4822      	ldr	r0, [pc, #136]	; (8000d94 <run_recipe+0x4b0>)
 8000d0c:	f006 ff73 	bl	8007bf6 <xTaskCreate>
					keep_going = stop();
 8000d10:	f000 f916 	bl	8000f40 <stop>
 8000d14:	60f8      	str	r0, [r7, #12]
					if(keep_going){
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d015      	beq.n	8000d48 <run_recipe+0x464>
						servos[servo_index].instr_idx++;
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <run_recipe+0x4a4>)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	015b      	lsls	r3, r3, #5
 8000d22:	4413      	add	r3, r2
 8000d24:	3310      	adds	r3, #16
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	4917      	ldr	r1, [pc, #92]	; (8000d88 <run_recipe+0x4a4>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	015b      	lsls	r3, r3, #5
 8000d30:	440b      	add	r3, r1
 8000d32:	3310      	adds	r3, #16
 8000d34:	601a      	str	r2, [r3, #0]
					}
					break;
 8000d36:	e007      	b.n	8000d48 <run_recipe+0x464>
					break;
 8000d38:	bf00      	nop
 8000d3a:	e006      	b.n	8000d4a <run_recipe+0x466>
					break;
 8000d3c:	bf00      	nop
 8000d3e:	e004      	b.n	8000d4a <run_recipe+0x466>
					break;
 8000d40:	bf00      	nop
 8000d42:	e002      	b.n	8000d4a <run_recipe+0x466>
					break;
 8000d44:	bf00      	nop
 8000d46:	e000      	b.n	8000d4a <run_recipe+0x466>
					break;
 8000d48:	bf00      	nop
		for(int servo_index = 0; servo_index < 2; servo_index++){
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	f77f adff 	ble.w	8000956 <run_recipe+0x72>
		if ((recipe_ended == 2) || (servos_paused == 2) || ((servos_paused == 1) && (recipe_ended == 1)) || ((servos_paused == 1) && (some_servo_inactive(servos))) || (both_servos_inactive_or_paused(servos))){
 8000d58:	e5da      	b.n	8000910 <run_recipe+0x2c>
				}
			}
		}
	}
	reset_all_servos(0);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f000 f9be 	bl	80010dc <reset_all_servos>
	if(servos_paused == 2){
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d10a      	bne.n	8000d7c <run_recipe+0x498>
		xTaskCreate( TransmitTask, "Transmit", 256, "Recipe finished\r\n", 0, NULL);
 8000d66:	2300      	movs	r3, #0
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <run_recipe+0x4b8>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	4906      	ldr	r1, [pc, #24]	; (8000d90 <run_recipe+0x4ac>)
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <run_recipe+0x4b0>)
 8000d78:	f006 ff3d 	bl	8007bf6 <xTaskCreate>
	}
	stop_timers();
 8000d7c:	f000 f93e 	bl	8000ffc <stop_timers>
}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20006840 	.word	0x20006840
 8000d8c:	08009ba8 	.word	0x08009ba8
 8000d90:	08009b2c 	.word	0x08009b2c
 8000d94:	08000551 	.word	0x08000551
 8000d98:	08009bcc 	.word	0x08009bcc
 8000d9c:	08009be4 	.word	0x08009be4

08000da0 <HAL_UART_RxCpltCallback>:

// overrides __weak version in stm32l4xx_hal_uart.c
// called when a byte has been received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    // queue the received byte for the ReceiveTask
    BaseType_t higherPriorityTaskWoken;
    xQueueSendFromISR(rxQueue, &rx_char, &higherPriorityTaskWoken); // queue the char
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_UART_RxCpltCallback+0x40>)
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	2300      	movs	r3, #0
 8000db2:	490c      	ldr	r1, [pc, #48]	; (8000de4 <HAL_UART_RxCpltCallback+0x44>)
 8000db4:	f006 f946 	bl	8007044 <xQueueGenericSendFromISR>
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to receive another char
 8000db8:	2201      	movs	r2, #1
 8000dba:	490a      	ldr	r1, [pc, #40]	; (8000de4 <HAL_UART_RxCpltCallback+0x44>)
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <HAL_UART_RxCpltCallback+0x48>)
 8000dbe:	f004 fc21 	bl	8005604 <HAL_UART_Receive_IT>
    portYIELD_FROM_ISR(higherPriorityTaskWoken);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <HAL_UART_RxCpltCallback+0x38>
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_UART_RxCpltCallback+0x4c>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20006830 	.word	0x20006830
 8000de4:	20006884 	.word	0x20006884
 8000de8:	200069b8 	.word	0x200069b8
 8000dec:	e000ed04 	.word	0xe000ed04

08000df0 <ReceiveTask>:

// pulls chars from rxQueue. When '\n' encountered, the line is printed
void ReceiveTask( void *pvParameters) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
    char letter;
    int cmd_idx = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to start receiving chars!!!
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4932      	ldr	r1, [pc, #200]	; (8000ec8 <ReceiveTask+0xd8>)
 8000e00:	4832      	ldr	r0, [pc, #200]	; (8000ecc <ReceiveTask+0xdc>)
 8000e02:	f004 fbff 	bl	8005604 <HAL_UART_Receive_IT>

    for(;;) {
        // keep pulling letters from rxQueue until its empty
        while(xQueuePeek( rxQueue, &letter, 0 ) != errQUEUE_EMPTY) {
 8000e06:	e052      	b.n	8000eae <ReceiveTask+0xbe>
            xQueueReceive( rxQueue, &letter, 1000);    // SHOULD return immediately because queue not empty
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <ReceiveTask+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f107 0117 	add.w	r1, r7, #23
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 fa3d 	bl	8007294 <xQueueReceive>

            // add letter to command line
            cmd_line[cmd_idx] = letter & 0xff;
 8000e1a:	7df9      	ldrb	r1, [r7, #23]
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <ReceiveTask+0xe4>)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4413      	add	r3, r2
 8000e22:	460a      	mov	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
            cmd_idx = (cmd_idx+1) % CMD_BUF_SIZE;   // safe if user types > CMD_BUF_SIZE with no \n
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <ReceiveTask+0xe8>)
 8000e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e30:	1151      	asrs	r1, r2, #5
 8000e32:	17da      	asrs	r2, r3, #31
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	fb01 f202 	mul.w	r2, r1, r2
 8000e3c:	1a9b      	subs	r3, r3, r2
 8000e3e:	61fb      	str	r3, [r7, #28]
            printBytes((char *)&letter, 1);
 8000e40:	f107 0317 	add.w	r3, r7, #23
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb46 	bl	80004d8 <printBytes>
            // print a full command line (ending in '\n')
            if(letter == '\r') {
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b0d      	cmp	r3, #13
 8000e50:	d124      	bne.n	8000e9c <ReceiveTask+0xac>
                cmd_line[cmd_idx] = 0;          // nul terminate string
 8000e52:	4a20      	ldr	r2, [pc, #128]	; (8000ed4 <ReceiveTask+0xe4>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	4413      	add	r3, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
                printBytes(cmd_line, cmd_idx);  // this call blocks
 8000e5c:	69f9      	ldr	r1, [r7, #28]
 8000e5e:	481d      	ldr	r0, [pc, #116]	; (8000ed4 <ReceiveTask+0xe4>)
 8000e60:	f7ff fb3a 	bl	80004d8 <printBytes>
                printBytes("\r\n", 4);
 8000e64:	2104      	movs	r1, #4
 8000e66:	481d      	ldr	r0, [pc, #116]	; (8000edc <ReceiveTask+0xec>)
 8000e68:	f7ff fb36 	bl	80004d8 <printBytes>
                cmd_idx = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
            	for(int i = 0; i < 2; i++){
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	e00f      	b.n	8000e96 <ReceiveTask+0xa6>
        			cmd_status_t params;
            		params.cmd = cmd_line[i];
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <ReceiveTask+0xe4>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	743b      	strb	r3, [r7, #16]
            		params.motor_idx = (int)i;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	60fb      	str	r3, [r7, #12]
            		parse_cmd(params);
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e8c:	f7ff fc4e 	bl	800072c <parse_cmd>
            	for(int i = 0; i < 2; i++){
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	ddec      	ble.n	8000e76 <ReceiveTask+0x86>
            	}
            }
            if (recipe_start) {
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <ReceiveTask+0xf0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d004      	beq.n	8000eae <ReceiveTask+0xbe>
            	run_recipe();
 8000ea4:	f7ff fd1e 	bl	80008e4 <run_recipe>
            	recipe_start = 0;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <ReceiveTask+0xf0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
        while(xQueuePeek( rxQueue, &letter, 0 ) != errQUEUE_EMPTY) {
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <ReceiveTask+0xe0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f107 0117 	add.w	r1, r7, #23
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f006 fbd7 	bl	800766c <xQueuePeek>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1a1      	bne.n	8000e08 <ReceiveTask+0x18>
 8000ec4:	e7f3      	b.n	8000eae <ReceiveTask+0xbe>
 8000ec6:	bf00      	nop
 8000ec8:	20006884 	.word	0x20006884
 8000ecc:	200069b8 	.word	0x200069b8
 8000ed0:	20006830 	.word	0x20006830
 8000ed4:	20000684 	.word	0x20000684
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	08009bf8 	.word	0x08009bf8
 8000ee0:	200006e8 	.word	0x200006e8

08000ee4 <check_for_continuation>:
        }
    }
    xTaskCreate( ReceiveTask, "Receive", 256, "", 0, NULL );
}

int check_for_continuation(){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af02      	add	r7, sp, #8
	char input = NULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
	int keep_going = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
	xTaskCreate( TransmitTask, "Transmit", 256, "Skip next instruction? Press y or n\r\n", 0, NULL);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <check_for_continuation+0x44>)
 8000efc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f00:	490a      	ldr	r1, [pc, #40]	; (8000f2c <check_for_continuation+0x48>)
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <check_for_continuation+0x4c>)
 8000f04:	f006 fe77 	bl	8007bf6 <xTaskCreate>
	xTaskCreate( ReceiveTask, "Receive", 256, "", 0, NULL );
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <check_for_continuation+0x50>)
 8000f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <check_for_continuation+0x54>)
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <check_for_continuation+0x58>)
 8000f1a:	f006 fe6c 	bl	8007bf6 <xTaskCreate>
}
 8000f1e:	bf00      	nop
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08009bfc 	.word	0x08009bfc
 8000f2c:	08009b2c 	.word	0x08009b2c
 8000f30:	08000551 	.word	0x08000551
 8000f34:	08009c24 	.word	0x08009c24
 8000f38:	08009c28 	.word	0x08009c28
 8000f3c:	08000df1 	.word	0x08000df1

08000f40 <stop>:

int stop(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af02      	add	r7, sp, #8
	int keep_going = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
	keep_going = check_for_continuation();
 8000f4a:	f7ff ffcb 	bl	8000ee4 <check_for_continuation>
 8000f4e:	6078      	str	r0, [r7, #4]
	if(!keep_going){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10b      	bne.n	8000f6e <stop+0x2e>
		xTaskCreate( TransmitTask, "Transmit", 256, "Exiting program\r\n", 0, NULL);
 8000f56:	2300      	movs	r3, #0
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <stop+0x38>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	4905      	ldr	r1, [pc, #20]	; (8000f7c <stop+0x3c>)
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <stop+0x40>)
 8000f68:	f006 fe45 	bl	8007bf6 <xTaskCreate>
		while(1);
 8000f6c:	e7fe      	b.n	8000f6c <stop+0x2c>
	}
	return keep_going;
 8000f6e:	687b      	ldr	r3, [r7, #4]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08009c30 	.word	0x08009c30
 8000f7c:	08009b2c 	.word	0x08009b2c
 8000f80:	08000551 	.word	0x08000551

08000f84 <start_timer>:
void delay(uint32_t delay_time) {
	delay_time = (10000 * delay_time);
	for(uint32_t index = 0; index < delay_time; index++);
}

void start_timer(int servo_num){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <start_timer+0x1c>
		TIM3->CR1 |= 0x1;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <start_timer+0x34>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <start_timer+0x34>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]
	}
	else {
		TIM4->CR1 |= 0x1;
	}
}
 8000f9e:	e005      	b.n	8000fac <start_timer+0x28>
		TIM4->CR1 |= 0x1;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <start_timer+0x38>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <start_timer+0x38>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <stop_timer>:
	for(int servo_num = 0; servo_num < 2; servo_num++){
		start_timer(servo_num);
	}
}

void stop_timer(int servo_num){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d105      	bne.n	8000fda <stop_timer+0x1a>
		TIM3->CR1 &= 0x0;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <stop_timer+0x34>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <stop_timer+0x34>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	}
	else {
		TIM4->CR1 &= 0x0E;
	}
}
 8000fd8:	e005      	b.n	8000fe6 <stop_timer+0x26>
		TIM4->CR1 &= 0x0E;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <stop_timer+0x38>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <stop_timer+0x38>)
 8000fe0:	f003 030e 	and.w	r3, r3, #14
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40000800 	.word	0x40000800

08000ffc <stop_timers>:

void stop_timers(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e005      	b.n	8001014 <stop_timers+0x18>
		stop_timer(servo_num);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffd9 	bl	8000fc0 <stop_timer>
	for(int servo_num = 0; servo_num < 2; servo_num++){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3301      	adds	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	ddf6      	ble.n	8001008 <stop_timers+0xc>
	}
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <increment_recipe>:
	else {
		return (uint16_t)TIM4->CCR1;
	}
}

void increment_recipe(servo_data *motor){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(motor->recipe_idx >= 3){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	dd03      	ble.n	800103c <increment_recipe+0x18>
		motor->recipe_idx = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
	}
	else{
		motor->recipe_idx++;
	}
}
 800103a:	e004      	b.n	8001046 <increment_recipe+0x22>
		motor->recipe_idx++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <reset_servo>:

void reset_servo(int index, servo_data *motor, int restart){
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af02      	add	r7, sp, #8
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	if(!restart){
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d111      	bne.n	800108a <reset_servo+0x36>
		xTaskCreate( TransmitTask, "Transmit", 256, "Recipe complete, resetting...\r\n", 0, NULL);
 8001066:	2300      	movs	r3, #0
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <reset_servo+0x7c>)
 8001070:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001074:	4917      	ldr	r1, [pc, #92]	; (80010d4 <reset_servo+0x80>)
 8001076:	4818      	ldr	r0, [pc, #96]	; (80010d8 <reset_servo+0x84>)
 8001078:	f006 fdbd 	bl	8007bf6 <xTaskCreate>
		increment_recipe(motor);
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f7ff ffd1 	bl	8001024 <increment_recipe>
		motor->status = inactive;
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <reset_servo+0x3c>
	}
	else {
		motor->recipe_idx = 0;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
	}
	move_motor(index, motor, zero_degrees, 1);
 8001090:	2301      	movs	r3, #1
 8001092:	2200      	movs	r2, #0
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fad4 	bl	8000644 <move_motor>
	motor->instr_idx = 0;
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
	motor->loop_cnt = 0;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
	motor->loop_idx = 0;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
	motor->is_in_loop = 0;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
	motor->next_pos = zero_degrees;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2200      	movs	r2, #0
 80010b8:	711a      	strb	r2, [r3, #4]
	motor->delay = 0;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2200      	movs	r2, #0
 80010be:	80da      	strh	r2, [r3, #6]
	motor->recipe_status = idle;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2200      	movs	r2, #0
 80010c4:	721a      	strb	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	08009c44 	.word	0x08009c44
 80010d4:	08009b2c 	.word	0x08009b2c
 80010d8:	08000551 	.word	0x08000551

080010dc <reset_all_servos>:

void reset_all_servos(int restart){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 80010e4:	e015      	b.n	8001112 <reset_all_servos+0x36>
		if((servos[servo_data_index].status == active) || restart){
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <reset_all_servos+0x48>)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	015b      	lsls	r3, r3, #5
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d002      	beq.n	80010fa <reset_all_servos+0x1e>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <reset_all_servos+0x30>
			reset_servo(servo_data_index, &servos[servo_data_index], restart);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	015b      	lsls	r3, r3, #5
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <reset_all_servos+0x48>)
 8001100:	4413      	add	r3, r2
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4619      	mov	r1, r3
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff ffa4 	bl	8001054 <reset_servo>
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3301      	adds	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	dde6      	ble.n	80010e6 <reset_all_servos+0xa>
		}
	}
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20006840 	.word	0x20006840

08001128 <servo_ready>:

int servo_ready(int servo_num){
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t current_time = get_current_time(servo_num);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff fa3f 	bl	80005b4 <get_current_time>
 8001136:	4603      	mov	r3, r0
 8001138:	81fb      	strh	r3, [r7, #14]
	uint16_t last_start = servos[servo_num].last_start;
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <servo_ready+0x50>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	015b      	lsls	r3, r3, #5
 8001140:	4413      	add	r3, r2
 8001142:	3302      	adds	r3, #2
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	81bb      	strh	r3, [r7, #12]
	uint16_t delay = servos[servo_num].delay;
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <servo_ready+0x50>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	015b      	lsls	r3, r3, #5
 800114e:	4413      	add	r3, r2
 8001150:	3306      	adds	r3, #6
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	817b      	strh	r3, [r7, #10]
	if(abs(current_time - last_start) > delay){
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	89bb      	ldrh	r3, [r7, #12]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001160:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001164:	897b      	ldrh	r3, [r7, #10]
 8001166:	429a      	cmp	r2, r3
 8001168:	dd01      	ble.n	800116e <servo_ready+0x46>
		return 1;
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <servo_ready+0x48>
	}
	else {
		return 0;
 800116e:	2300      	movs	r3, #0
	}
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20006840 	.word	0x20006840

0800117c <some_servo_inactive>:

int some_servo_inactive(servo_data *servos){
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	int servo_inactive = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	e00c      	b.n	80011a8 <some_servo_inactive+0x2c>
		if(servos[servo_num].status == inactive){
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	015b      	lsls	r3, r3, #5
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <some_servo_inactive+0x26>
			servo_inactive = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
			break;
 80011a0:	e005      	b.n	80011ae <some_servo_inactive+0x32>
	for(int servo_num = 0; servo_num < 2; servo_num++){
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	ddef      	ble.n	800118e <some_servo_inactive+0x12>
		}
	}
	return servo_inactive;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <both_servos_inactive_or_paused>:

int both_servos_inactive_or_paused(servo_data *servos){
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	int stop = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	e013      	b.n	80011f6 <both_servos_inactive_or_paused+0x3a>
			if((servos[servo_num].status == inactive) || (servos[servo_num].status == paused)){
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <both_servos_inactive_or_paused+0x2e>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	015b      	lsls	r3, r3, #5
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d102      	bne.n	80011f0 <both_servos_inactive_or_paused+0x34>
				stop += 1;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	3301      	adds	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	dde8      	ble.n	80011ce <both_servos_inactive_or_paused+0x12>
			}
	}
	if(stop == 2){
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d101      	bne.n	8001206 <both_servos_inactive_or_paused+0x4a>
		return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <both_servos_inactive_or_paused+0x4c>
	}
	else {
		return 0;
 8001206:	2300      	movs	r3, #0
	}
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800123a:	4a7a      	ldr	r2, [pc, #488]	; (8001424 <MX_FREERTOS_Init+0x1f0>)
 800123c:	2100      	movs	r1, #0
 800123e:	487a      	ldr	r0, [pc, #488]	; (8001428 <MX_FREERTOS_Init+0x1f4>)
 8001240:	f005 fafc 	bl	800683c <osThreadNew>
 8001244:	4603      	mov	r3, r0
 8001246:	4a79      	ldr	r2, [pc, #484]	; (800142c <MX_FREERTOS_Init+0x1f8>)
 8001248:	6013      	str	r3, [r2, #0]
  /////////////////////////////////////////////////////////////////////////

    ///////////////////////////////  TRANSMIT STUFF ////////////////////////////

    // create mutex for transmission (printing)
    txMutex = xSemaphoreCreateBinary();     // protects HAL_UART in printBytes()
 800124a:	2203      	movs	r2, #3
 800124c:	2100      	movs	r1, #0
 800124e:	2001      	movs	r0, #1
 8001250:	f005 fd6a 	bl	8006d28 <xQueueGenericCreate>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <MX_FREERTOS_Init+0x1fc>)
 8001258:	6013      	str	r3, [r2, #0]
    xSemaphoreGive(txMutex);                // the mutex is ready. First come, first served.
 800125a:	4b75      	ldr	r3, [pc, #468]	; (8001430 <MX_FREERTOS_Init+0x1fc>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	f005 fdf0 	bl	8006e48 <xQueueGenericSend>
    servo_mutex = xSemaphoreCreateMutex();
 8001268:	2001      	movs	r0, #1
 800126a:	f005 fdd4 	bl	8006e16 <xQueueCreateMutex>
 800126e:	4603      	mov	r3, r0
 8001270:	4a70      	ldr	r2, [pc, #448]	; (8001434 <MX_FREERTOS_Init+0x200>)
 8001272:	6013      	str	r3, [r2, #0]
    cmd_mutex = xSemaphoreCreateMutex();
 8001274:	2001      	movs	r0, #1
 8001276:	f005 fdce 	bl	8006e16 <xQueueCreateMutex>
 800127a:	4603      	mov	r3, r0
 800127c:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <MX_FREERTOS_Init+0x204>)
 800127e:	6013      	str	r3, [r2, #0]

    xTaskCreate( TransmitTask, "Transmit", 256, "Enter a two letter command to control each servo motor...\r\n", 0, NULL);
 8001280:	2300      	movs	r3, #0
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2300      	movs	r3, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	4b6c      	ldr	r3, [pc, #432]	; (800143c <MX_FREERTOS_Init+0x208>)
 800128a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800128e:	496c      	ldr	r1, [pc, #432]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 8001290:	486c      	ldr	r0, [pc, #432]	; (8001444 <MX_FREERTOS_Init+0x210>)
 8001292:	f006 fcb0 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "Valid letters are:\r\n", 0, NULL);
 8001296:	2300      	movs	r3, #0
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <MX_FREERTOS_Init+0x214>)
 80012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a4:	4966      	ldr	r1, [pc, #408]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 80012a6:	4867      	ldr	r0, [pc, #412]	; (8001444 <MX_FREERTOS_Init+0x210>)
 80012a8:	f006 fca5 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --p: Pause recipe\r\n", 0, NULL);
 80012ac:	2300      	movs	r3, #0
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4b65      	ldr	r3, [pc, #404]	; (800144c <MX_FREERTOS_Init+0x218>)
 80012b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ba:	4961      	ldr	r1, [pc, #388]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 80012bc:	4861      	ldr	r0, [pc, #388]	; (8001444 <MX_FREERTOS_Init+0x210>)
 80012be:	f006 fc9a 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --c: Continue recipe\r\n", 0, NULL);
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <MX_FREERTOS_Init+0x21c>)
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	495b      	ldr	r1, [pc, #364]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 80012d2:	485c      	ldr	r0, [pc, #368]	; (8001444 <MX_FREERTOS_Init+0x210>)
 80012d4:	f006 fc8f 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --r: Move servo to right\r\n", 0, NULL);
 80012d8:	2300      	movs	r3, #0
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b5c      	ldr	r3, [pc, #368]	; (8001454 <MX_FREERTOS_Init+0x220>)
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e6:	4956      	ldr	r1, [pc, #344]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 80012e8:	4856      	ldr	r0, [pc, #344]	; (8001444 <MX_FREERTOS_Init+0x210>)
 80012ea:	f006 fc84 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --l: Move servo to left\r\n", 0, NULL);
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	2300      	movs	r3, #0
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <MX_FREERTOS_Init+0x224>)
 80012f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fc:	4950      	ldr	r1, [pc, #320]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 80012fe:	4851      	ldr	r0, [pc, #324]	; (8001444 <MX_FREERTOS_Init+0x210>)
 8001300:	f006 fc79 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --n: Do nothing\r\n", 0, NULL);
 8001304:	2300      	movs	r3, #0
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <MX_FREERTOS_Init+0x228>)
 800130e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001312:	494b      	ldr	r1, [pc, #300]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 8001314:	484b      	ldr	r0, [pc, #300]	; (8001444 <MX_FREERTOS_Init+0x210>)
 8001316:	f006 fc6e 	bl	8007bf6 <xTaskCreate>
    xTaskCreate( TransmitTask, "Transmit", 256, "    --b: Start recipe\r\n", 0, NULL);
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2300      	movs	r3, #0
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <MX_FREERTOS_Init+0x22c>)
 8001324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001328:	4945      	ldr	r1, [pc, #276]	; (8001440 <MX_FREERTOS_Init+0x20c>)
 800132a:	4846      	ldr	r0, [pc, #280]	; (8001444 <MX_FREERTOS_Init+0x210>)
 800132c:	f006 fc63 	bl	8007bf6 <xTaskCreate>

    xSemaphoreTake(servo_mutex, 10000);
 8001330:	4b40      	ldr	r3, [pc, #256]	; (8001434 <MX_FREERTOS_Init+0x200>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f242 7110 	movw	r1, #10000	; 0x2710
 8001338:	4618      	mov	r0, r3
 800133a:	f006 f88b 	bl	8007454 <xQueueSemaphoreTake>
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 800133e:	e04e      	b.n	80013de <MX_FREERTOS_Init+0x1aa>
		servos[servo_data_index].status = inactive;
 8001340:	4a48      	ldr	r2, [pc, #288]	; (8001464 <MX_FREERTOS_Init+0x230>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].position = zero_degrees;
 800134c:	4a45      	ldr	r2, [pc, #276]	; (8001464 <MX_FREERTOS_Init+0x230>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	4413      	add	r3, r2
 8001354:	3301      	adds	r3, #1
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].last_start = 0;
 800135a:	4a42      	ldr	r2, [pc, #264]	; (8001464 <MX_FREERTOS_Init+0x230>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	4413      	add	r3, r2
 8001362:	3302      	adds	r3, #2
 8001364:	2200      	movs	r2, #0
 8001366:	801a      	strh	r2, [r3, #0]
		servos[servo_data_index].next_pos = zero_degrees;
 8001368:	4a3e      	ldr	r2, [pc, #248]	; (8001464 <MX_FREERTOS_Init+0x230>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].delay = 0;
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <MX_FREERTOS_Init+0x230>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	015b      	lsls	r3, r3, #5
 800137c:	4413      	add	r3, r2
 800137e:	3306      	adds	r3, #6
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
		servos[servo_data_index].recipe_status = idle;
 8001384:	4a37      	ldr	r2, [pc, #220]	; (8001464 <MX_FREERTOS_Init+0x230>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	4413      	add	r3, r2
 800138c:	3308      	adds	r3, #8
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].recipe_idx = 0;
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <MX_FREERTOS_Init+0x230>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	4413      	add	r3, r2
 800139a:	330c      	adds	r3, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].instr_idx = 0;
 80013a0:	4a30      	ldr	r2, [pc, #192]	; (8001464 <MX_FREERTOS_Init+0x230>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4413      	add	r3, r2
 80013a8:	3310      	adds	r3, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].loop_cnt = 0;
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <MX_FREERTOS_Init+0x230>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	015b      	lsls	r3, r3, #5
 80013b4:	4413      	add	r3, r2
 80013b6:	3314      	adds	r3, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].is_in_loop = 0;
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <MX_FREERTOS_Init+0x230>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	4413      	add	r3, r2
 80013c4:	3318      	adds	r3, #24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].loop_idx = 0;
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_FREERTOS_Init+0x230>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	015b      	lsls	r3, r3, #5
 80013d0:	4413      	add	r3, r2
 80013d2:	331c      	adds	r3, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	ddad      	ble.n	8001340 <MX_FREERTOS_Init+0x10c>
	}
	xSemaphoreGive(servo_mutex);
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_FREERTOS_Init+0x200>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	2300      	movs	r3, #0
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	f005 fd2b 	bl	8006e48 <xQueueGenericSend>
//	xTaskCreate( TransmitTask, "Transmit", 35, "    --r: Move servo to right\r\n", 0, NULL);
//	xTaskCreate( TransmitTask, "Transmit", 35, "    --l: Move servo to left\r\n", 0, NULL);
//	xTaskCreate( TransmitTask, "Transmit", 35, "    --n: Do nothing\r\n", 0, NULL);
//	xTaskCreate( TransmitTask, "Transmit", 35, "    --b: Start recipe\r\n", 0, NULL);
    ///////////////////////////////  RECEIVE STUFF ////////////////////////////
	int recipe_start = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
	rxQueue = xQueueCreate( 10, 1);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2101      	movs	r1, #1
 80013fa:	200a      	movs	r0, #10
 80013fc:	f005 fc94 	bl	8006d28 <xQueueGenericCreate>
 8001400:	4603      	mov	r3, r0
 8001402:	4a19      	ldr	r2, [pc, #100]	; (8001468 <MX_FREERTOS_Init+0x234>)
 8001404:	6013      	str	r3, [r2, #0]
	xTaskCreate( ReceiveTask, "Receive", 256, "", 0, NULL );
 8001406:	2300      	movs	r3, #0
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2300      	movs	r3, #0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_FREERTOS_Init+0x238>)
 8001410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001414:	4916      	ldr	r1, [pc, #88]	; (8001470 <MX_FREERTOS_Init+0x23c>)
 8001416:	4817      	ldr	r0, [pc, #92]	; (8001474 <MX_FREERTOS_Init+0x240>)
 8001418:	f006 fbed 	bl	8007bf6 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08009da8 	.word	0x08009da8
 8001428:	08001479 	.word	0x08001479
 800142c:	2000682c 	.word	0x2000682c
 8001430:	20006880 	.word	0x20006880
 8001434:	20006838 	.word	0x20006838
 8001438:	2000683c 	.word	0x2000683c
 800143c:	08009c70 	.word	0x08009c70
 8001440:	08009b2c 	.word	0x08009b2c
 8001444:	08000551 	.word	0x08000551
 8001448:	08009cac 	.word	0x08009cac
 800144c:	08009cc4 	.word	0x08009cc4
 8001450:	08009cdc 	.word	0x08009cdc
 8001454:	08009cf8 	.word	0x08009cf8
 8001458:	08009d18 	.word	0x08009d18
 800145c:	08009d38 	.word	0x08009d38
 8001460:	08009d50 	.word	0x08009d50
 8001464:	20006840 	.word	0x20006840
 8001468:	20006830 	.word	0x20006830
 800146c:	08009c24 	.word	0x08009c24
 8001470:	08009c28 	.word	0x08009c28
 8001474:	08000df1 	.word	0x08000df1

08001478 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f005 fa6e 	bl	8006962 <osDelay>
 8001486:	e7fb      	b.n	8001480 <StartDefaultTask+0x8>

08001488 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_GPIO_Init+0xa4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_GPIO_Init+0xa4>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_GPIO_Init+0xa4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_GPIO_Init+0xa4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MX_GPIO_Init+0xa4>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_GPIO_Init+0xa4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <MX_GPIO_Init+0xa4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a16      	ldr	r2, [pc, #88]	; (800152c <MX_GPIO_Init+0xa4>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_GPIO_Init+0xa4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_GPIO_Init+0xa4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a10      	ldr	r2, [pc, #64]	; (800152c <MX_GPIO_Init+0xa4>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_GPIO_Init+0xa4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f000 fe1b 	bl	8002158 <HAL_GPIO_Init>

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	; 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fc51 	bl	8001dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f81e 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f7ff ffa4 	bl	8001488 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fba6 	bl	8001c90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001544:	f000 f9a8 	bl	8001898 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001548:	f000 fa28 	bl	800199c <MX_TIM3_Init>
  MX_TIM4_Init();
 800154c:	f000 fa7c 	bl	8001a48 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <main+0x44>)
 8001552:	f002 fb75 	bl	8003c40 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001556:	2100      	movs	r1, #0
 8001558:	4806      	ldr	r0, [pc, #24]	; (8001574 <main+0x44>)
 800155a:	f002 fcab 	bl	8003eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800155e:	2104      	movs	r1, #4
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <main+0x44>)
 8001562:	f002 fca7 	bl	8003eb4 <HAL_TIM_PWM_Start>
//  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 19);
//  HAL_Delay(1000);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001566:	f005 f91f 	bl	80067a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800156a:	f7ff fe63 	bl	8001234 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800156e:	f005 f93f 	bl	80067f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001572:	e7fe      	b.n	8001572 <main+0x42>
 8001574:	20006888 	.word	0x20006888

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0b8      	sub	sp, #224	; 0xe0
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001582:	2244      	movs	r2, #68	; 0x44
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f008 faaa 	bl	8009ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2288      	movs	r2, #136	; 0x88
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f008 fa9c 	bl	8009ae0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b6:	2310      	movs	r3, #16
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015ce:	230a      	movs	r3, #10
 80015d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015d4:	2307      	movs	r3, #7
 80015d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 ffc2 	bl	8002574 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015f6:	f000 f85b 	bl	80016b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001618:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800161c:	2104      	movs	r1, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fb8e 	bl	8002d40 <HAL_RCC_ClockConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800162a:	f000 f841 	bl	80016b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162e:	2302      	movs	r3, #2
 8001630:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001632:	2300      	movs	r3, #0
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fded 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001644:	f000 f834 	bl	80016b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8001648:	2200      	movs	r2, #0
 800164a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800164e:	2000      	movs	r0, #0
 8001650:	f001 fc58 	bl	8002f04 <HAL_RCC_MCOConfig>
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001654:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001658:	f000 ff36 	bl	80024c8 <HAL_PWREx_ControlVoltageScaling>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001662:	f000 f825 	bl	80016b0 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	37e0      	adds	r7, #224	; 0xe0
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = (7);
 8001676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167a:	2207      	movs	r2, #7
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800169e:	f000 fbb5 	bl	8001e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40014800 	.word	0x40014800

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_MspInit+0x4c>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_MspInit+0x4c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6613      	str	r3, [r2, #96]	; 0x60
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_MspInit+0x4c>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_MspInit+0x4c>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_MspInit+0x4c>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	210f      	movs	r1, #15
 80016fa:	f06f 0001 	mvn.w	r0, #1
 80016fe:	f000 fc81 	bl	8002004 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	201a      	movs	r0, #26
 8001726:	f000 fc6d 	bl	8002004 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800172a:	201a      	movs	r0, #26
 800172c:	f000 fc86 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_InitTick+0x9c>)
 8001732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_InitTick+0x9c>)
 8001736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173a:	6613      	str	r3, [r2, #96]	; 0x60
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_InitTick+0x9c>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001748:	f107 0210 	add.w	r2, r7, #16
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fcce 	bl	80030f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001758:	f001 fcb6 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 800175c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	4a13      	ldr	r2, [pc, #76]	; (80017b0 <HAL_InitTick+0xa0>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0c9b      	lsrs	r3, r3, #18
 8001768:	3b01      	subs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_InitTick+0xa4>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_InitTick+0xa8>)
 8001770:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_InitTick+0xa4>)
 8001774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001778:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_InitTick+0xa4>)
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_InitTick+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_InitTick+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <HAL_InitTick+0xa4>)
 800178e:	f002 f9ff 	bl	8003b90 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d104      	bne.n	80017a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <HAL_InitTick+0xa4>)
 800179a:	f002 fab9 	bl	8003d10 <HAL_TIM_Base_Start_IT>
 800179e:	4603      	mov	r3, r0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3730      	adds	r7, #48	; 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	200068d4 	.word	0x200068d4
 80017b8:	40014800 	.word	0x40014800

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80017f6:	f002 fcba 	bl	800416e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200068d4 	.word	0x200068d4

08001804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <TIM2_IRQHandler+0x10>)
 800180a:	f002 fcb0 	bl	800416e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20006888 	.word	0x20006888

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f003 ff35 	bl	800568c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200069b8 	.word	0x200069b8

0800182c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <SystemInit+0x64>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <SystemInit+0x64>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <SystemInit+0x68>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a13      	ldr	r2, [pc, #76]	; (8001894 <SystemInit+0x68>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <SystemInit+0x68>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <SystemInit+0x68>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0f      	ldr	r2, [pc, #60]	; (8001894 <SystemInit+0x68>)
 8001858:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800185c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001860:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <SystemInit+0x68>)
 8001864:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001868:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <SystemInit+0x68>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a09      	ldr	r2, [pc, #36]	; (8001894 <SystemInit+0x68>)
 8001870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <SystemInit+0x68>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SystemInit+0x64>)
 800187e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001882:	609a      	str	r2, [r3, #8]
#endif
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	40021000 	.word	0x40021000

08001898 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	; 0x38
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b8:	463b      	mov	r3, r7
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <MX_TIM2_Init+0x100>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <MX_TIM2_Init+0x100>)
 80018d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018da:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <MX_TIM2_Init+0x100>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <MX_TIM2_Init+0x100>)
 80018e2:	22c8      	movs	r2, #200	; 0xc8
 80018e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <MX_TIM2_Init+0x100>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <MX_TIM2_Init+0x100>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f2:	4829      	ldr	r0, [pc, #164]	; (8001998 <MX_TIM2_Init+0x100>)
 80018f4:	f002 f94c 	bl	8003b90 <HAL_TIM_Base_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80018fe:	f7ff fed7 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	4619      	mov	r1, r3
 800190e:	4822      	ldr	r0, [pc, #136]	; (8001998 <MX_TIM2_Init+0x100>)
 8001910:	f002 fef0 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800191a:	f7ff fec9 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800191e:	481e      	ldr	r0, [pc, #120]	; (8001998 <MX_TIM2_Init+0x100>)
 8001920:	f002 fa66 	bl	8003df0 <HAL_TIM_PWM_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800192a:	f7ff fec1 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	4619      	mov	r1, r3
 800193c:	4816      	ldr	r0, [pc, #88]	; (8001998 <MX_TIM2_Init+0x100>)
 800193e:	f003 fd11 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001948:	f7ff feb2 	bl	80016b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194c:	2360      	movs	r3, #96	; 0x60
 800194e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001950:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001954:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <MX_TIM2_Init+0x100>)
 8001966:	f002 fdb5 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001970:	f7ff fe9e 	bl	80016b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	2204      	movs	r2, #4
 8001978:	4619      	mov	r1, r3
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_TIM2_Init+0x100>)
 800197c:	f002 fdaa 	bl	80044d4 <HAL_TIM_PWM_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001986:	f7ff fe93 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_TIM2_Init+0x100>)
 800198c:	f000 f94c 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001990:	bf00      	nop
 8001992:	3738      	adds	r7, #56	; 0x38
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20006888 	.word	0x20006888

0800199c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <MX_TIM3_Init+0xa8>)
 80019be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019e2:	4817      	ldr	r0, [pc, #92]	; (8001a40 <MX_TIM3_Init+0xa4>)
 80019e4:	f002 fb6c 	bl	80040c0 <HAL_TIM_IC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80019ee:	f7ff fe5f 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <MX_TIM3_Init+0xa4>)
 8001a02:	f003 fcaf 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a0c:	f7ff fe50 	bl	80016b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a14:	2301      	movs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM3_Init+0xa4>)
 8001a28:	f002 fcc0 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a32:	f7ff fe3d 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000696c 	.word	0x2000696c
 8001a44:	40000400 	.word	0x40000400

08001a48 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a68:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <MX_TIM4_Init+0xa8>)
 8001a6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001a72:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001a8e:	4817      	ldr	r0, [pc, #92]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001a90:	f002 fb16 	bl	80040c0 <HAL_TIM_IC_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001a9a:	f7ff fe09 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480f      	ldr	r0, [pc, #60]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001aae:	f003 fc59 	bl	8005364 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001ab8:	f7ff fdfa 	bl	80016b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_TIM4_Init+0xa4>)
 8001ad4:	f002 fc6a 	bl	80043ac <HAL_TIM_IC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ade:	f7ff fde7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20006920 	.word	0x20006920
 8001af0:	40000800 	.word	0x40000800

08001af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d113      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_TIM_Base_MspInit+0x44>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_TIM_Base_MspInit+0x44>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_TIM_Base_MspInit+0x44>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	201c      	movs	r0, #28
 8001b24:	f000 fa6e 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b28:	201c      	movs	r0, #28
 8001b2a:	f000 fa87 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <HAL_TIM_IC_MspInit+0xd8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d128      	bne.n	8001bb0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a2d      	ldr	r2, [pc, #180]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b76:	4b28      	ldr	r3, [pc, #160]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PE3     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481c      	ldr	r0, [pc, #112]	; (8001c1c <HAL_TIM_IC_MspInit+0xe0>)
 8001baa:	f000 fad5 	bl	8002158 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bae:	e02d      	b.n	8001c0c <HAL_TIM_IC_MspInit+0xd0>
  else if(tim_icHandle->Instance==TIM4)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_TIM_IC_MspInit+0xe4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d128      	bne.n	8001c0c <HAL_TIM_IC_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_TIM_IC_MspInit+0xdc>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <HAL_TIM_IC_MspInit+0xe8>)
 8001c08:	f000 faa6 	bl	8002158 <HAL_GPIO_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48001000 	.word	0x48001000
 8001c20:	40000800 	.word	0x40000800
 8001c24:	48000c00 	.word	0x48000c00

08001c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c48:	d11c      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_TIM_MspPostInit+0x64>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_TIM_MspPostInit+0x64>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_TIM_MspPostInit+0x64>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c62:	2303      	movs	r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f000 fa6a 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_USART2_UART_Init+0x5c>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001c9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cd4:	f003 fbec 	bl	80054b0 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cde:	f7ff fce7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200069b8 	.word	0x200069b8
 8001cec:	40004400 	.word	0x40004400

08001cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_UART_MspInit+0x8c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12f      	bne.n	8001d72 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_UART_MspInit+0x90>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d42:	2360      	movs	r3, #96	; 0x60
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d52:	2307      	movs	r3, #7
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <HAL_UART_MspInit+0x94>)
 8001d5e:	f000 f9fb 	bl	8002158 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2105      	movs	r1, #5
 8001d66:	2026      	movs	r0, #38	; 0x26
 8001d68:	f000 f94c 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d6c:	2026      	movs	r0, #38	; 0x26
 8001d6e:	f000 f965 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	48000c00 	.word	0x48000c00

08001d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff fd4e 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d92:	e003      	b.n	8001d9c <LoopCopyDataInit>

08001d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d9a:	3104      	adds	r1, #4

08001d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001da4:	d3f6      	bcc.n	8001d94 <CopyDataInit>
	ldr	r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001da8:	e002      	b.n	8001db0 <LoopFillZerobss>

08001daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dac:	f842 3b04 	str.w	r3, [r2], #4

08001db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <LoopForever+0x16>)
	cmp	r2, r3
 8001db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001db4:	d3f9      	bcc.n	8001daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f007 fe61 	bl	8009a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dba:	f7ff fbb9 	bl	8001530 <main>

08001dbe <LoopForever>:

LoopForever:
    b LoopForever
 8001dbe:	e7fe      	b.n	8001dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dc4:	08009e24 	.word	0x08009e24
	ldr	r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dcc:	20000668 	.word	0x20000668
	ldr	r2, =_sbss
 8001dd0:	20000668 	.word	0x20000668
	ldr	r3, = _ebss
 8001dd4:	20006a80 	.word	0x20006a80

08001dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC1_2_IRQHandler>

08001dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 f902 	bl	8001fee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fc90 	bl	8001710 <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e001      	b.n	8001e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dfc:	f7ff fc60 	bl	80016c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000660 	.word	0x20000660
 8001e30:	20006a3c 	.word	0x20006a3c

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20006a3c 	.word	0x20006a3c

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000660 	.word	0x20000660

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff4c 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002016:	f7ff ff61 	bl	8001edc <__NVIC_GetPriorityGrouping>
 800201a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7ff ffb1 	bl	8001f88 <NVIC_EncodePriority>
 8002026:	4602      	mov	r2, r0
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff80 	bl	8001f34 <__NVIC_SetPriority>
}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff54 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d008      	beq.n	8002082 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2204      	movs	r2, #4
 8002074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e022      	b.n	80020c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 020e 	bic.w	r2, r2, #14
 8002090:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f003 021c 	and.w	r2, r3, #28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d005      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2204      	movs	r2, #4
 80020f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	e029      	b.n	800214c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020e 	bic.w	r2, r2, #14
 8002106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	f003 021c 	and.w	r2, r3, #28
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
    }
  }
  return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	e17f      	b.n	8002468 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8171 	beq.w	8002462 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d00b      	beq.n	80021a0 <HAL_GPIO_Init+0x48>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002194:	2b11      	cmp	r3, #17
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b12      	cmp	r3, #18
 800219e:	d130      	bne.n	8002202 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d6:	2201      	movs	r2, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0201 	and.w	r2, r3, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b03      	cmp	r3, #3
 800220c:	d118      	bne.n	8002240 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x128>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b12      	cmp	r3, #18
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	6939      	ldr	r1, [r7, #16]
 80022c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0203 	and.w	r2, r3, #3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80ac 	beq.w	8002462 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_GPIO_Init+0x330>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <HAL_GPIO_Init+0x330>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6613      	str	r3, [r2, #96]	; 0x60
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_GPIO_Init+0x330>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_GPIO_Init+0x334>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800234c:	d025      	beq.n	800239a <HAL_GPIO_Init+0x242>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_GPIO_Init+0x338>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_Init+0x23e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4e      	ldr	r2, [pc, #312]	; (8002494 <HAL_GPIO_Init+0x33c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_Init+0x23a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4d      	ldr	r2, [pc, #308]	; (8002498 <HAL_GPIO_Init+0x340>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_Init+0x236>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4c      	ldr	r2, [pc, #304]	; (800249c <HAL_GPIO_Init+0x344>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_Init+0x232>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4b      	ldr	r2, [pc, #300]	; (80024a0 <HAL_GPIO_Init+0x348>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x22e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_GPIO_Init+0x34c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_Init+0x22a>
 800237e:	2306      	movs	r3, #6
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002382:	2307      	movs	r3, #7
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x244>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x244>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x244>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x244>
 800239a:	2300      	movs	r3, #0
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023ac:	4937      	ldr	r1, [pc, #220]	; (800248c <HAL_GPIO_Init+0x334>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023de:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_GPIO_Init+0x350>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x350>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002432:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x350>)
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_GPIO_Init+0x350>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f ae78 	bne.w	8002168 <HAL_GPIO_Init+0x10>
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40010000 	.word	0x40010000
 8002490:	48000400 	.word	0x48000400
 8002494:	48000800 	.word	0x48000800
 8002498:	48000c00 	.word	0x48000c00
 800249c:	48001000 	.word	0x48001000
 80024a0:	48001400 	.word	0x48001400
 80024a4:	48001800 	.word	0x48001800
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000

080024c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d6:	d130      	bne.n	800253a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024e4:	d038      	beq.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2232      	movs	r2, #50	; 0x32
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	0c9b      	lsrs	r3, r3, #18
 8002508:	3301      	adds	r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800250c:	e002      	b.n	8002514 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b01      	subs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d102      	bne.n	8002528 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f2      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002534:	d110      	bne.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e00f      	b.n	800255a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002546:	d007      	beq.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002550:	4a05      	ldr	r2, [pc, #20]	; (8002568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002556:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40007000 	.word	0x40007000
 800256c:	20000658 	.word	0x20000658
 8002570:	431bde83 	.word	0x431bde83

08002574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e3d4      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4ba1      	ldr	r3, [pc, #644]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002590:	4b9e      	ldr	r3, [pc, #632]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80e4 	beq.w	8002770 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_RCC_OscConfig+0x4a>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	2b0c      	cmp	r3, #12
 80025b2:	f040 808b 	bne.w	80026cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 8087 	bne.w	80026cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025be:	4b93      	ldr	r3, [pc, #588]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_RCC_OscConfig+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e3ac      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	4b8c      	ldr	r3, [pc, #560]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_RCC_OscConfig+0x7c>
 80025e6:	4b89      	ldr	r3, [pc, #548]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ee:	e005      	b.n	80025fc <HAL_RCC_OscConfig+0x88>
 80025f0:	4b86      	ldr	r3, [pc, #536]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d223      	bcs.n	8002648 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fda7 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e38d      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002614:	4b7d      	ldr	r3, [pc, #500]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a7c      	ldr	r2, [pc, #496]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b7a      	ldr	r3, [pc, #488]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4977      	ldr	r1, [pc, #476]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002632:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	4972      	ldr	r1, [pc, #456]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e025      	b.n	8002694 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6f      	ldr	r2, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	496a      	ldr	r1, [pc, #424]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002666:	4b69      	ldr	r3, [pc, #420]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	4965      	ldr	r1, [pc, #404]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fd67 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e34d      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002694:	f000 fc6a 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	495a      	ldr	r1, [pc, #360]	; (8002810 <HAL_RCC_OscConfig+0x29c>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	4a58      	ldr	r2, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x2a0>)
 80026b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026b4:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCC_OscConfig+0x2a4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f829 	bl	8001710 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d052      	beq.n	800276e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	e331      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d032      	beq.n	800273a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d4:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a4c      	ldr	r2, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fba8 	bl	8001e34 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e8:	f7ff fba4 	bl	8001e34 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e31a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a40      	ldr	r2, [pc, #256]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	493b      	ldr	r1, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
 8002738:	e01a      	b.n	8002770 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCC_OscConfig+0x298>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a33      	ldr	r2, [pc, #204]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002746:	f7ff fb75 	bl	8001e34 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800274e:	f7ff fb71 	bl	8001e34 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e2e7      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCC_OscConfig+0x1da>
 800276c:	e000      	b.n	8002770 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d074      	beq.n	8002866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b08      	cmp	r3, #8
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x21a>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	d10e      	bne.n	80027a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d064      	beq.n	8002864 <HAL_RCC_OscConfig+0x2f0>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d160      	bne.n	8002864 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e2c4      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x24a>
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a15      	ldr	r2, [pc, #84]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e01d      	b.n	80027fa <HAL_RCC_OscConfig+0x286>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x26e>
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x286>
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_RCC_OscConfig+0x298>)
 80027f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01c      	beq.n	800283c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7ff fb17 	bl	8001e34 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002808:	e011      	b.n	800282e <HAL_RCC_OscConfig+0x2ba>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	08009dcc 	.word	0x08009dcc
 8002814:	20000658 	.word	0x20000658
 8002818:	2000065c 	.word	0x2000065c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff fb0a 	bl	8001e34 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e280      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282e:	4baf      	ldr	r3, [pc, #700]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x2a8>
 800283a:	e014      	b.n	8002866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fafa 	bl	8001e34 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff faf6 	bl	8001e34 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e26c      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	4ba5      	ldr	r3, [pc, #660]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x2d0>
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d060      	beq.n	8002934 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d005      	beq.n	8002884 <HAL_RCC_OscConfig+0x310>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d116      	bne.n	80028b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002884:	4b99      	ldr	r3, [pc, #612]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_OscConfig+0x328>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e249      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800289c:	4b93      	ldr	r3, [pc, #588]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4990      	ldr	r1, [pc, #576]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b0:	e040      	b.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d023      	beq.n	8002902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ba:	4b8c      	ldr	r3, [pc, #560]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a8b      	ldr	r2, [pc, #556]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff fab5 	bl	8001e34 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ce:	f7ff fab1 	bl	8001e34 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e227      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ec:	4b7f      	ldr	r3, [pc, #508]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	497c      	ldr	r1, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b7a      	ldr	r3, [pc, #488]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a79      	ldr	r2, [pc, #484]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7ff fa91 	bl	8001e34 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7ff fa8d 	bl	8001e34 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e203      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	4b70      	ldr	r3, [pc, #448]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d03c      	beq.n	80029ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01c      	beq.n	8002982 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002948:	4b68      	ldr	r3, [pc, #416]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	4a67      	ldr	r2, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7ff fa6c 	bl	8001e34 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7ff fa68 	bl	8001e34 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1de      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002972:	4b5e      	ldr	r3, [pc, #376]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ef      	beq.n	8002960 <HAL_RCC_OscConfig+0x3ec>
 8002980:	e01b      	b.n	80029ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002982:	4b5a      	ldr	r3, [pc, #360]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7ff fa4f 	bl	8001e34 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7ff fa4b 	bl	8001e34 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1c1      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ac:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1ef      	bne.n	800299a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a6 	beq.w	8002b14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029cc:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4a43      	ldr	r2, [pc, #268]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f4:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCC_OscConfig+0x57c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d118      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_RCC_OscConfig+0x57c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_RCC_OscConfig+0x57c>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fa12 	bl	8001e34 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7ff fa0e 	bl	8001e34 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e184      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x57c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4d8>
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4a:	e024      	b.n	8002a96 <HAL_RCC_OscConfig+0x522>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d110      	bne.n	8002a76 <HAL_RCC_OscConfig+0x502>
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	e00f      	b.n	8002a96 <HAL_RCC_OscConfig+0x522>
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f9c9 	bl	8001e34 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7ff f9c5 	bl	8001e34 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e139      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_OscConfig+0x578>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ed      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x532>
 8002aca:	e01a      	b.n	8002b02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff f9b2 	bl	8001e34 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad2:	e00f      	b.n	8002af4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7ff f9ae 	bl	8001e34 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d906      	bls.n	8002af4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e122      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af4:	4b90      	ldr	r3, [pc, #576]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e8      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	4a8a      	ldr	r2, [pc, #552]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8108 	beq.w	8002d2e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 80d0 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b28:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d130      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	3b01      	subs	r3, #1
 8002b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d127      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b68:	2a07      	cmp	r2, #7
 8002b6a:	bf14      	ite	ne
 8002b6c:	2201      	movne	r2, #1
 8002b6e:	2200      	moveq	r2, #0
 8002b70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d06e      	beq.n	8002c7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	d069      	beq.n	8002c78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ba4:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bb0:	4b61      	ldr	r3, [pc, #388]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0b7      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5c      	ldr	r2, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bcc:	f7ff f932 	bl	8001e34 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff f92e 	bl	8001e34 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e0a4      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <HAL_RCC_OscConfig+0x7c8>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c02:	3a01      	subs	r2, #1
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	4311      	orrs	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c0c:	0212      	lsls	r2, r2, #8
 8002c0e:	4311      	orrs	r1, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c14:	0852      	lsrs	r2, r2, #1
 8002c16:	3a01      	subs	r2, #1
 8002c18:	0552      	lsls	r2, r2, #21
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c20:	0852      	lsrs	r2, r2, #1
 8002c22:	3a01      	subs	r2, #1
 8002c24:	0652      	lsls	r2, r2, #25
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c2c:	0912      	lsrs	r2, r2, #4
 8002c2e:	0452      	lsls	r2, r2, #17
 8002c30:	430a      	orrs	r2, r1
 8002c32:	4941      	ldr	r1, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c44:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a3b      	ldr	r2, [pc, #236]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c50:	f7ff f8f0 	bl	8001e34 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff f8ec 	bl	8001e34 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e062      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c76:	e05a      	b.n	8002d2e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e059      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d152      	bne.n	8002d2e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca0:	f7ff f8c8 	bl	8001e34 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7ff f8c4 	bl	8001e34 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e03a      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cba:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x734>
 8002cc6:	e032      	b.n	8002d2e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d02d      	beq.n	8002d2a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cec:	f023 0303 	bic.w	r3, r3, #3
 8002cf0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002cf8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7ff f897 	bl	8001e34 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0a:	f7ff f893 	bl	8001e34 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e009      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f0      	bne.n	8002d0a <HAL_RCC_OscConfig+0x796>
 8002d28:	e001      	b.n	8002d2e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3720      	adds	r7, #32
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	f99d808c 	.word	0xf99d808c

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0c8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d910      	bls.n	8002d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4961      	ldr	r1, [pc, #388]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b5f      	ldr	r3, [pc, #380]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b0      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d04c      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d98:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d121      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e09e      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e092      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e086      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd8:	4b46      	ldr	r3, [pc, #280]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e07e      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 0203 	bic.w	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	493f      	ldr	r1, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfa:	f7ff f81b 	bl	8001e34 <HAL_GetTick>
 8002dfe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e02:	f7ff f817 	bl	8001e34 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e066      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 020c 	and.w	r2, r3, #12
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d1eb      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	492c      	ldr	r1, [pc, #176]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b29      	ldr	r3, [pc, #164]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d210      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4924      	ldr	r1, [pc, #144]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e036      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4918      	ldr	r1, [pc, #96]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4910      	ldr	r1, [pc, #64]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eb6:	f000 f859 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_ClockConfig+0x1b4>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe fc18 	bl	8001710 <HAL_InitTick>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08009dcc 	.word	0x08009dcc
 8002efc:	20000658 	.word	0x20000658
 8002f00:	2000065c 	.word	0x2000065c

08002f04 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RCC_MCOx);

  /* MCO Clock Enable */
  __MCO1_CLK_ENABLE();
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <HAL_RCC_MCOConfig+0x64>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_RCC_MCOConfig+0x64>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_RCC_MCOConfig+0x64>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

  /* Configue the MCO1 pin in alternate function mode */
  GPIO_InitStruct.Pin = MCO1_PIN;
 8002f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f32:	2302      	movs	r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f48:	f7ff f906 	bl	8002158 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_MCOConfig+0x64>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	4903      	ldr	r1, [pc, #12]	; (8002f68 <HAL_RCC_MCOConfig+0x64>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	608b      	str	r3, [r1, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3728      	adds	r7, #40	; 0x28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11e      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	; (8003078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d134      	bne.n	8003064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0xa6>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d003      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0xac>
 8003010:	e005      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8003014:	617b      	str	r3, [r7, #20]
      break;
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 800301a:	617b      	str	r3, [r7, #20]
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	617b      	str	r3, [r7, #20]
      break;
 8003022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	3301      	adds	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	fb02 f203 	mul.w	r2, r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0e5b      	lsrs	r3, r3, #25
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	3301      	adds	r3, #1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003064:	69bb      	ldr	r3, [r7, #24]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	08009de4 	.word	0x08009de4
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000658 	.word	0x20000658

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	08009ddc 	.word	0x08009ddc

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030cc:	f7ff ffda 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0adb      	lsrs	r3, r3, #11
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4904      	ldr	r1, [pc, #16]	; (80030f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08009ddc 	.word	0x08009ddc

080030f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	220f      	movs	r2, #15
 8003102:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_RCC_GetClockConfig+0x5c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_RCC_GetClockConfig+0x5c>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_RCC_GetClockConfig+0x5c>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_GetClockConfig+0x5c>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003136:	4b07      	ldr	r3, [pc, #28]	; (8003154 <HAL_RCC_GetClockConfig+0x60>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0207 	and.w	r2, r3, #7
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	40022000 	.word	0x40022000

08003158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003170:	f7ff f99c 	bl	80024ac <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
 8003176:	e014      	b.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	4a24      	ldr	r2, [pc, #144]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	; 0x58
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003190:	f7ff f98c 	bl	80024ac <HAL_PWREx_GetVoltageRange>
 8003194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a8:	d10b      	bne.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d919      	bls.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2ba0      	cmp	r3, #160	; 0xa0
 80031b4:	d902      	bls.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b6:	2302      	movs	r3, #2
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e013      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031bc:	2301      	movs	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e010      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b80      	cmp	r3, #128	; 0x80
 80031c6:	d902      	bls.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031c8:	2303      	movs	r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e00a      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b80      	cmp	r3, #128	; 0x80
 80031d2:	d102      	bne.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031d4:	2302      	movs	r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	e004      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b70      	cmp	r3, #112	; 0x70
 80031de:	d101      	bne.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 0207 	bic.w	r2, r3, #7
 80031ec:	4909      	ldr	r1, [pc, #36]	; (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	40022000 	.word	0x40022000

08003218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003220:	2300      	movs	r3, #0
 8003222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003224:	2300      	movs	r3, #0
 8003226:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d041      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003238:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800323c:	d02a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800323e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003242:	d824      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d81e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003258:	d010      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800325a:	e018      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800325c:	4b86      	ldr	r3, [pc, #536]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a85      	ldr	r2, [pc, #532]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003268:	e015      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fabb 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3320      	adds	r3, #32
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fba6 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	74fb      	strb	r3, [r7, #19]
      break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800329c:	4b76      	ldr	r3, [pc, #472]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032aa:	4973      	ldr	r1, [pc, #460]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032b2:	e001      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d041      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032cc:	d02a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d010      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ea:	e018      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ec:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a61      	ldr	r2, [pc, #388]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032f8:	e015      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fa73 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800330a:	e00c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3320      	adds	r3, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fb5e 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	74fb      	strb	r3, [r7, #19]
      break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800332c:	4b52      	ldr	r3, [pc, #328]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333a:	494f      	ldr	r1, [pc, #316]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a0 	beq.w	8003496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003370:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4a40      	ldr	r2, [pc, #256]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003388:	2301      	movs	r3, #1
 800338a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338c:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3a      	ldr	r2, [pc, #232]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003398:	f7fe fd4c 	bl	8001e34 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800339e:	e009      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fe fd48 	bl	8001e34 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	74fb      	strb	r3, [r7, #19]
        break;
 80033b2:	e005      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b4:	4b31      	ldr	r3, [pc, #196]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d15c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033c6:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d019      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e4:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003410:	4a19      	ldr	r2, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe fd07 	bl	8001e34 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003428:	e00b      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fd03 	bl	8001e34 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d902      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	74fb      	strb	r3, [r7, #19]
            break;
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ec      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003484:	7c7b      	ldrb	r3, [r7, #17]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	4a9d      	ldr	r2, [pc, #628]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a2:	4b98      	ldr	r3, [pc, #608]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	4994      	ldr	r1, [pc, #592]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 020c 	bic.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	498c      	ldr	r1, [pc, #560]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e6:	4b87      	ldr	r3, [pc, #540]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	4983      	ldr	r1, [pc, #524]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003508:	4b7e      	ldr	r3, [pc, #504]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	497b      	ldr	r1, [pc, #492]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800352a:	4b76      	ldr	r3, [pc, #472]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	4972      	ldr	r1, [pc, #456]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800354c:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	496a      	ldr	r1, [pc, #424]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800356e:	4b65      	ldr	r3, [pc, #404]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	4961      	ldr	r1, [pc, #388]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003590:	4b5c      	ldr	r3, [pc, #368]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359e:	4959      	ldr	r1, [pc, #356]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	4950      	ldr	r1, [pc, #320]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	4948      	ldr	r1, [pc, #288]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035f6:	4b43      	ldr	r3, [pc, #268]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	493f      	ldr	r1, [pc, #252]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d028      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	4937      	ldr	r1, [pc, #220]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003636:	d106      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a31      	ldr	r2, [pc, #196]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	e011      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364e:	d10c      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f8c8 	bl	80037ec <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d028      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	491f      	ldr	r1, [pc, #124]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003694:	d106      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a0:	60d3      	str	r3, [r2, #12]
 80036a2:	e011      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2101      	movs	r1, #1
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f899 	bl	80037ec <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02b      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f2:	d109      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a02      	ldr	r2, [pc, #8]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
 8003700:	e014      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003710:	d10c      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f867 	bl	80037ec <RCCEx_PLLSAI1_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d02f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003746:	4928      	ldr	r1, [pc, #160]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003756:	d10d      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f844 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3320      	adds	r3, #32
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f925 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d6:	4904      	ldr	r1, [pc, #16]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037de:	7cbb      	ldrb	r3, [r7, #18]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037fa:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
       ||
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800381e:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
       ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d047      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	e044      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d018      	beq.n	8003872 <RCCEx_PLLSAI1_Config+0x86>
 8003840:	2b03      	cmp	r3, #3
 8003842:	d825      	bhi.n	8003890 <RCCEx_PLLSAI1_Config+0xa4>
 8003844:	2b01      	cmp	r3, #1
 8003846:	d002      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x62>
 8003848:	2b02      	cmp	r3, #2
 800384a:	d009      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x74>
 800384c:	e020      	b.n	8003890 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800384e:	4b60      	ldr	r3, [pc, #384]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800385e:	e01a      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003860:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d116      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003870:	e013      	b.n	800389a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003872:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800387e:	4b54      	ldr	r3, [pc, #336]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800388e:	e006      	b.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e004      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800389e:	bf00      	nop
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	430b      	orrs	r3, r1
 80038bc:	4944      	ldr	r1, [pc, #272]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d17d      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038c8:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d4:	f7fe faae 	bl	8001e34 <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038da:	e009      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038dc:	f7fe faaa 	bl	8001e34 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	73fb      	strb	r3, [r7, #15]
        break;
 80038ee:	e005      	b.n	80038fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038f0:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ef      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d160      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d111      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003908:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	0211      	lsls	r1, r2, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68d2      	ldr	r2, [r2, #12]
 800391e:	0912      	lsrs	r2, r2, #4
 8003920:	0452      	lsls	r2, r2, #17
 8003922:	430a      	orrs	r2, r1
 8003924:	492a      	ldr	r1, [pc, #168]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
 800392a:	e027      	b.n	800397c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d112      	bne.n	8003958 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003932:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800393a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	0211      	lsls	r1, r2, #8
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6912      	ldr	r2, [r2, #16]
 8003948:	0852      	lsrs	r2, r2, #1
 800394a:	3a01      	subs	r2, #1
 800394c:	0552      	lsls	r2, r2, #21
 800394e:	430a      	orrs	r2, r1
 8003950:	491f      	ldr	r1, [pc, #124]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]
 8003956:	e011      	b.n	800397c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6952      	ldr	r2, [r2, #20]
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0652      	lsls	r2, r2, #25
 8003974:	430a      	orrs	r2, r1
 8003976:	4916      	ldr	r1, [pc, #88]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fe fa54 	bl	8001e34 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003990:	f7fe fa50 	bl	8001e34 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
          break;
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4904      	ldr	r1, [pc, #16]	; (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000

080039d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
       ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a06:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
       ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d047      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI2_Config+0x86>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI2_Config+0xa4>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x62>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI2_Config+0x74>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a36:	4b55      	ldr	r3, [pc, #340]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a5a:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a66:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4939      	ldr	r1, [pc, #228]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d167      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a35      	ldr	r2, [pc, #212]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fe f9ba 	bl	8001e34 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac4:	f7fe f9b6 	bl	8001e34 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d14a      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	0912      	lsrs	r2, r2, #4
 8003b08:	0452      	lsls	r2, r2, #17
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	491f      	ldr	r1, [pc, #124]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	614b      	str	r3, [r1, #20]
 8003b12:	e011      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6912      	ldr	r2, [r2, #16]
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0652      	lsls	r2, r2, #25
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4916      	ldr	r1, [pc, #88]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b44:	f7fe f976 	bl	8001e34 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b4a:	e009      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b4c:	f7fe f972 	bl	8001e34 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b5e:	e005      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b72:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4904      	ldr	r1, [pc, #16]	; (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e049      	b.n	8003c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd ff9c 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fe74 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e047      	b.n	8003ce8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <HAL_TIM_Base_Start+0xb4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01d      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d018      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1f      	ldr	r2, [pc, #124]	; (8003cf8 <HAL_TIM_Base_Start+0xb8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d013      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_TIM_Base_Start+0xbc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00e      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_TIM_Base_Start+0xc0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <HAL_TIM_Base_Start+0xc4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIM_Base_Start+0x66>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a19      	ldr	r2, [pc, #100]	; (8003d08 <HAL_TIM_Base_Start+0xc8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d115      	bne.n	8003cd2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	4b17      	ldr	r3, [pc, #92]	; (8003d0c <HAL_TIM_Base_Start+0xcc>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b06      	cmp	r3, #6
 8003cb6:	d015      	beq.n	8003ce4 <HAL_TIM_Base_Start+0xa4>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbe:	d011      	beq.n	8003ce4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd0:	e008      	b.n	8003ce4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e000      	b.n	8003ce6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	00010007 	.word	0x00010007

08003d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d001      	beq.n	8003d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e04f      	b.n	8003dc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d52:	d018      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0x76>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a19      	ldr	r2, [pc, #100]	; (8003de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d115      	bne.n	8003db2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_TIM_Base_Start_IT+0xdc>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d015      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0xb4>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d011      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db0:	e008      	b.n	8003dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e000      	b.n	8003dc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40013400 	.word	0x40013400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	00010007 	.word	0x00010007

08003df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e049      	b.n	8003e96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f841 	bl	8003e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f000 fd44 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x24>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e03c      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d109      	bne.n	8003ef2 <HAL_TIM_PWM_Start+0x3e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	bf14      	ite	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	2300      	moveq	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e02f      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d109      	bne.n	8003f0c <HAL_TIM_PWM_Start+0x58>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e022      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d109      	bne.n	8003f26 <HAL_TIM_PWM_Start+0x72>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	bf14      	ite	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	2300      	moveq	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e015      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d109      	bne.n	8003f40 <HAL_TIM_PWM_Start+0x8c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	bf14      	ite	ne
 8003f38:	2301      	movne	r3, #1
 8003f3a:	2300      	moveq	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e008      	b.n	8003f52 <HAL_TIM_PWM_Start+0x9e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e09c      	b.n	8004094 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Start+0xb6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	e023      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0xc6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	e01b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xd6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xe6>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	e00b      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start+0xf6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_PWM_Start+0xfe>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 f9ac 	bl	8005318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a35      	ldr	r2, [pc, #212]	; (800409c <HAL_TIM_PWM_Start+0x1e8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <HAL_TIM_PWM_Start+0x1ec>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <HAL_TIM_PWM_Start+0x1f0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a31      	ldr	r2, [pc, #196]	; (80040a8 <HAL_TIM_PWM_Start+0x1f4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0x13e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <HAL_TIM_PWM_Start+0x1f8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x142>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_TIM_PWM_Start+0x144>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_TIM_PWM_Start+0x1e8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01d      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d018      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <HAL_TIM_PWM_Start+0x200>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <HAL_TIM_PWM_Start+0x204>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_TIM_PWM_Start+0x1ec>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIM_PWM_Start+0x19e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_TIM_PWM_Start+0x1f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d115      	bne.n	800407e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_TIM_PWM_Start+0x208>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d015      	beq.n	8004090 <HAL_TIM_PWM_Start+0x1dc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d011      	beq.n	8004090 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407c:	e008      	b.n	8004090 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e000      	b.n	8004092 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	00010007 	.word	0x00010007

080040c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e049      	b.n	8004166 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd fd28 	bl	8001b3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fbdc 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b02      	cmp	r3, #2
 8004182:	d122      	bne.n	80041ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d11b      	bne.n	80041ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0202 	mvn.w	r2, #2
 800419a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fd fa5c 	bl	800166e <HAL_TIM_IC_CaptureCallback>
 80041b6:	e005      	b.n	80041c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fb61 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb68 	bl	8004894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d122      	bne.n	800421e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d11b      	bne.n	800421e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0204 	mvn.w	r2, #4
 80041ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fd fa32 	bl	800166e <HAL_TIM_IC_CaptureCallback>
 800420a:	e005      	b.n	8004218 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb37 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb3e 	bl	8004894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b08      	cmp	r3, #8
 800422a:	d122      	bne.n	8004272 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d11b      	bne.n	8004272 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0208 	mvn.w	r2, #8
 8004242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7fd fa08 	bl	800166e <HAL_TIM_IC_CaptureCallback>
 800425e:	e005      	b.n	800426c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb0d 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fb14 	bl	8004894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d122      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b10      	cmp	r3, #16
 800428c:	d11b      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0210 	mvn.w	r2, #16
 8004296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2208      	movs	r2, #8
 800429c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fd f9de 	bl	800166e <HAL_TIM_IC_CaptureCallback>
 80042b2:	e005      	b.n	80042c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fae3 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 faea 	bl	8004894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10e      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0201 	mvn.w	r2, #1
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fd f9cd 	bl	800168c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b80      	cmp	r3, #128	; 0x80
 80042fe:	d10e      	bne.n	800431e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d107      	bne.n	800431e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f001 f8b5 	bl	8005488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f001 f8a8 	bl	800549c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa98 	bl	80048a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b20      	cmp	r3, #32
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0220 	mvn.w	r2, #32
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f868 	bl	8005474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e082      	b.n	80044cc <HAL_TIM_IC_ConfigChannel+0x120>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f000 fdda 	bl	8004f9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 020c 	bic.w	r2, r2, #12
 80043f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6999      	ldr	r1, [r3, #24]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	619a      	str	r2, [r3, #24]
 800440a:	e05a      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d11c      	bne.n	800444c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6819      	ldr	r1, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f000 fe58 	bl	80050d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004434:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6999      	ldr	r1, [r3, #24]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	619a      	str	r2, [r3, #24]
 800444a:	e03a      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11b      	bne.n	800448a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6819      	ldr	r1, [r3, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f000 fea5 	bl	80051b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 020c 	bic.w	r2, r2, #12
 8004474:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	61da      	str	r2, [r3, #28]
 8004488:	e01b      	b.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f000 fec5 	bl	8005228 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69da      	ldr	r2, [r3, #28]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0fd      	b.n	80046ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b14      	cmp	r3, #20
 80044fa:	f200 80f0 	bhi.w	80046de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004559 	.word	0x08004559
 8004508:	080046df 	.word	0x080046df
 800450c:	080046df 	.word	0x080046df
 8004510:	080046df 	.word	0x080046df
 8004514:	08004599 	.word	0x08004599
 8004518:	080046df 	.word	0x080046df
 800451c:	080046df 	.word	0x080046df
 8004520:	080046df 	.word	0x080046df
 8004524:	080045db 	.word	0x080045db
 8004528:	080046df 	.word	0x080046df
 800452c:	080046df 	.word	0x080046df
 8004530:	080046df 	.word	0x080046df
 8004534:	0800461b 	.word	0x0800461b
 8004538:	080046df 	.word	0x080046df
 800453c:	080046df 	.word	0x080046df
 8004540:	080046df 	.word	0x080046df
 8004544:	0800465d 	.word	0x0800465d
 8004548:	080046df 	.word	0x080046df
 800454c:	080046df 	.word	0x080046df
 8004550:	080046df 	.word	0x080046df
 8004554:	0800469d 	.word	0x0800469d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa46 	bl	80049f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0204 	bic.w	r2, r2, #4
 8004582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6999      	ldr	r1, [r3, #24]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	619a      	str	r2, [r3, #24]
      break;
 8004596:	e0a3      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fab6 	bl	8004b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	619a      	str	r2, [r3, #24]
      break;
 80045d8:	e082      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb1f 	bl	8004c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0208 	orr.w	r2, r2, #8
 80045f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0204 	bic.w	r2, r2, #4
 8004604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69d9      	ldr	r1, [r3, #28]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	61da      	str	r2, [r3, #28]
      break;
 8004618:	e062      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fb87 	bl	8004d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	61da      	str	r2, [r3, #28]
      break;
 800465a:	e041      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fbd0 	bl	8004e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0208 	orr.w	r2, r2, #8
 8004676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800469a:	e021      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fc14 	bl	8004ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	021a      	lsls	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046dc:	e000      	b.n	80046e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80046de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIM_ConfigClockSource+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e0b5      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x184>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800472e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004756:	f000 8085 	beq.w	8004864 <HAL_TIM_ConfigClockSource+0x170>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	; 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	; 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	; 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f000 fd95 	bl	80052d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04e      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fd7e 	bl	80052d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fc3c 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	; 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd4b 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 800480c:	e02b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	461a      	mov	r2, r3
 800481c:	f000 fc98 	bl	8005150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fd3b 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 800482c:	e01b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 fc1c 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fd2b 	bl	80052a2 <TIM_ITRx_SetConfig>
      break;
 800484c:	e00b      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fd22 	bl	80052a2 <TIM_ITRx_SetConfig>
        break;
 800485e:	e002      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004864:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <TIM_Base_SetConfig+0x118>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <TIM_Base_SetConfig+0x11c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <TIM_Base_SetConfig+0x120>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01f      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d01b      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <TIM_Base_SetConfig+0x118>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d017      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <TIM_Base_SetConfig+0x11c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <TIM_Base_SetConfig+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <TIM_Base_SetConfig+0x128>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <TIM_Base_SetConfig+0x130>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <TIM_Base_SetConfig+0x128>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0302 	bic.w	r3, r3, #2
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <TIM_OC1_SetConfig+0x10c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00f      	beq.n	8004a70 <TIM_OC1_SetConfig+0x80>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <TIM_OC1_SetConfig+0x110>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_OC1_SetConfig+0x80>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <TIM_OC1_SetConfig+0x114>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_OC1_SetConfig+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <TIM_OC1_SetConfig+0x118>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC1_SetConfig+0x80>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <TIM_OC1_SetConfig+0x11c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10c      	bne.n	8004a8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f023 0308 	bic.w	r3, r3, #8
 8004a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f023 0304 	bic.w	r3, r3, #4
 8004a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <TIM_OC1_SetConfig+0x10c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xc2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <TIM_OC1_SetConfig+0x110>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xc2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <TIM_OC1_SetConfig+0x114>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <TIM_OC1_SetConfig+0x118>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xc2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <TIM_OC1_SetConfig+0x11c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d111      	bne.n	8004ad6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0210 	bic.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0320 	bic.w	r3, r3, #32
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a28      	ldr	r2, [pc, #160]	; (8004c10 <TIM_OC2_SetConfig+0x100>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC2_SetConfig+0x6c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a27      	ldr	r2, [pc, #156]	; (8004c14 <TIM_OC2_SetConfig+0x104>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10d      	bne.n	8004b98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <TIM_OC2_SetConfig+0x100>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xb0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <TIM_OC2_SetConfig+0x104>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xb0>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1b      	ldr	r2, [pc, #108]	; (8004c18 <TIM_OC2_SetConfig+0x108>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xb0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a1a      	ldr	r2, [pc, #104]	; (8004c1c <TIM_OC2_SetConfig+0x10c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_OC2_SetConfig+0xb0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <TIM_OC2_SetConfig+0x110>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d113      	bne.n	8004be8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800

08004c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <TIM_OC3_SetConfig+0xfc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC3_SetConfig+0x6a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <TIM_OC3_SetConfig+0x100>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d10d      	bne.n	8004caa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <TIM_OC3_SetConfig+0xfc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <TIM_OC3_SetConfig+0xae>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <TIM_OC3_SetConfig+0x100>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00b      	beq.n	8004cd2 <TIM_OC3_SetConfig+0xae>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <TIM_OC3_SetConfig+0x104>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <TIM_OC3_SetConfig+0xae>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <TIM_OC3_SetConfig+0x108>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC3_SetConfig+0xae>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <TIM_OC3_SetConfig+0x10c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d113      	bne.n	8004cfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <TIM_OC4_SetConfig+0xc0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00f      	beq.n	8004db8 <TIM_OC4_SetConfig+0x84>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <TIM_OC4_SetConfig+0xc4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_OC4_SetConfig+0x84>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <TIM_OC4_SetConfig+0xc8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_OC4_SetConfig+0x84>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <TIM_OC4_SetConfig+0xcc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_OC4_SetConfig+0x84>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <TIM_OC4_SetConfig+0xd0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40013400 	.word	0x40013400
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <TIM_OC5_SetConfig+0xb4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_OC5_SetConfig+0x7a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <TIM_OC5_SetConfig+0xb8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_OC5_SetConfig+0x7a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <TIM_OC5_SetConfig+0xbc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_OC5_SetConfig+0x7a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <TIM_OC5_SetConfig+0xc0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC5_SetConfig+0x7a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <TIM_OC5_SetConfig+0xc4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d109      	bne.n	8004e96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	621a      	str	r2, [r3, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40013400 	.word	0x40013400
 8004ec4:	40014000 	.word	0x40014000
 8004ec8:	40014400 	.word	0x40014400
 8004ecc:	40014800 	.word	0x40014800

08004ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <TIM_OC6_SetConfig+0xb8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_OC6_SetConfig+0x7c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <TIM_OC6_SetConfig+0xbc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_OC6_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <TIM_OC6_SetConfig+0xc0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_OC6_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <TIM_OC6_SetConfig+0xc4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC6_SetConfig+0x7c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <TIM_OC6_SetConfig+0xc8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d109      	bne.n	8004f60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40014400 	.word	0x40014400
 8004f98:	40014800 	.word	0x40014800

08004f9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <TIM_TI1_SetConfig+0xc4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d017      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d013      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a23      	ldr	r2, [pc, #140]	; (8005064 <TIM_TI1_SetConfig+0xc8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <TIM_TI1_SetConfig+0xcc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a21      	ldr	r2, [pc, #132]	; (800506c <TIM_TI1_SetConfig+0xd0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a20      	ldr	r2, [pc, #128]	; (8005070 <TIM_TI1_SetConfig+0xd4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_TI1_SetConfig+0x5e>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <TIM_TI1_SetConfig+0xd8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d101      	bne.n	8004ffe <TIM_TI1_SetConfig+0x62>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <TIM_TI1_SetConfig+0x64>
 8004ffe:	2300      	movs	r3, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e003      	b.n	800501e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	b2db      	uxtb	r3, r3
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f023 030a 	bic.w	r3, r3, #10
 8005038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f003 030a 	and.w	r3, r3, #10
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40013400 	.word	0x40013400
 8005074:	40014000 	.word	0x40014000

08005078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0201 	bic.w	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 030a 	bic.w	r3, r3, #10
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	f023 0210 	bic.w	r2, r3, #16
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	b29b      	uxth	r3, r3
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005128:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	621a      	str	r2, [r3, #32]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f023 0210 	bic.w	r2, r3, #16
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800517a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	031b      	lsls	r3, r3, #12
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f023 0303 	bic.w	r3, r3, #3
 80051dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005200:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	621a      	str	r2, [r3, #32]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005254:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005266:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	031b      	lsls	r3, r3, #12
 800526c:	b29b      	uxth	r3, r3
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800527a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	f043 0307 	orr.w	r3, r3, #7
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
}
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 031f 	and.w	r3, r3, #31
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005378:	2302      	movs	r3, #2
 800537a:	e068      	b.n	800544e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1e      	ldr	r2, [pc, #120]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01d      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d018      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1b      	ldr	r2, [pc, #108]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00e      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a13      	ldr	r2, [pc, #76]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d004      	beq.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d10c      	bne.n	800543c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4313      	orrs	r3, r2
 8005432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40013400 	.word	0x40013400
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800
 800546c:	40000c00 	.word	0x40000c00
 8005470:	40014000 	.word	0x40014000

08005474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e040      	b.n	8005544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc fc0c 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	; 0x24
 80054dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0201 	bic.w	r2, r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fae4 	bl	8005abc <UART_SetConfig>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e022      	b.n	8005544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fd62 	bl	8005fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fde9 	bl	8006114 <UART_CheckIdleState>
 8005542:	4603      	mov	r3, r0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800555e:	2b20      	cmp	r3, #32
 8005560:	d145      	bne.n	80055ee <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_Transmit_IT+0x22>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e03e      	b.n	80055f0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_UART_Transmit_IT+0x34>
 800557c:	2302      	movs	r3, #2
 800557e:	e037      	b.n	80055f0 <HAL_UART_Transmit_IT+0xa4>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	88fa      	ldrh	r2, [r7, #6]
 8005592:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2221      	movs	r2, #33	; 0x21
 80055b0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d107      	bne.n	80055cc <HAL_UART_Transmit_IT+0x80>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <HAL_UART_Transmit_IT+0xb0>)
 80055c8:	669a      	str	r2, [r3, #104]	; 0x68
 80055ca:	e002      	b.n	80055d2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4a0c      	ldr	r2, [pc, #48]	; (8005600 <HAL_UART_Transmit_IT+0xb4>)
 80055d0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e000      	b.n	80055f0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	080064af 	.word	0x080064af
 8005600:	0800643b 	.word	0x0800643b

08005604 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005616:	2b20      	cmp	r3, #32
 8005618:	d131      	bne.n	800567e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_Receive_IT+0x22>
 8005620:	88fb      	ldrh	r3, [r7, #6]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e02a      	b.n	8005680 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_UART_Receive_IT+0x34>
 8005634:	2302      	movs	r3, #2
 8005636:	e023      	b.n	8005680 <HAL_UART_Receive_IT+0x7c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a0f      	ldr	r2, [pc, #60]	; (8005688 <HAL_UART_Receive_IT+0x84>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800566c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	461a      	mov	r2, r3
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fe13 	bl	80062a0 <UART_Start_Receive_IT>
 800567a:	4603      	mov	r3, r0
 800567c:	e000      	b.n	8005680 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800567e:	2302      	movs	r3, #2
  }
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40008000 	.word	0x40008000

0800568c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 81ce 	beq.w	8005a76 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      }
      return;
 80056e2:	e1c8      	b.n	8005a76 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80e3 	beq.w	80058b2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4ba6      	ldr	r3, [pc, #664]	; (8005994 <HAL_UART_IRQHandler+0x308>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80d8 	beq.w	80058b2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_UART_IRQHandler+0xa2>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2201      	movs	r2, #1
 800571c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_UART_IRQHandler+0xce>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2202      	movs	r2, #2
 8005748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005750:	f043 0204 	orr.w	r2, r3, #4
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_UART_IRQHandler+0xfa>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2204      	movs	r2, #4
 8005774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d015      	beq.n	80057bc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d104      	bne.n	80057a4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2208      	movs	r2, #8
 80057aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d011      	beq.n	80057ea <HAL_UART_IRQHandler+0x15e>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00c      	beq.n	80057ea <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057e0:	f043 0220 	orr.w	r2, r3, #32
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8142 	beq.w	8005a7a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005820:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d004      	beq.n	800583a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005836:	2b00      	cmp	r3, #0
 8005838:	d031      	beq.n	800589e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fdb8 	bl	80063b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d123      	bne.n	8005896 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800585c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	2b00      	cmp	r3, #0
 8005864:	d013      	beq.n	800588e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a4b      	ldr	r2, [pc, #300]	; (8005998 <HAL_UART_IRQHandler+0x30c>)
 800586c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	4618      	mov	r0, r3
 8005874:	f7fc fc2e 	bl	80020d4 <HAL_DMA_Abort_IT>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d017      	beq.n	80058ae <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00f      	b.n	80058ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f8fe 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e00b      	b.n	80058ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8fa 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e007      	b.n	80058ae <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8f6 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80058ac:	e0e5      	b.n	8005a7a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ae:	bf00      	nop
    return;
 80058b0:	e0e3      	b.n	8005a7a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	f040 80a9 	bne.w	8005a0e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a3 	beq.w	8005a0e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 809d 	beq.w	8005a0e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2210      	movs	r2, #16
 80058da:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d158      	bne.n	800599c <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80058f4:	893b      	ldrh	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80c1 	beq.w	8005a7e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005902:	893a      	ldrh	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	f080 80ba 	bcs.w	8005a7e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	893a      	ldrh	r2, [r7, #8]
 800590e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d12a      	bne.n	8005978 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005930:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005972:	4618      	mov	r0, r3
 8005974:	f7fc fb70 	bl	8002058 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005984:	b29b      	uxth	r3, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	b29b      	uxth	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f889 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005992:	e074      	b.n	8005a7e <HAL_UART_IRQHandler+0x3f2>
 8005994:	04000120 	.word	0x04000120
 8005998:	0800640f 	.word	0x0800640f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d063      	beq.n	8005a82 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d060      	beq.n	8005a82 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0210 	bic.w	r2, r2, #16
 8005a00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f84c 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a0c:	e039      	b.n	8005a82 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <HAL_UART_IRQHandler+0x3a8>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fe6d 	bl	800670c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a32:	e029      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00d      	beq.n	8005a5a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
    }
    return;
 8005a58:	e015      	b.n	8005a86 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd5b 	bl	800652a <UART_EndTransmit_IT>
    return;
 8005a74:	e008      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005a76:	bf00      	nop
 8005a78:	e006      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005a7a:	bf00      	nop
 8005a7c:	e004      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005a7e:	bf00      	nop
 8005a80:	e002      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005a86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4bad      	ldr	r3, [pc, #692]	; (8005d9c <UART_SetConfig+0x2e0>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	69f9      	ldr	r1, [r7, #28]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4aa2      	ldr	r2, [pc, #648]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a99      	ldr	r2, [pc, #612]	; (8005da4 <UART_SetConfig+0x2e8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d121      	bne.n	8005b86 <UART_SetConfig+0xca>
 8005b42:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d817      	bhi.n	8005b80 <UART_SetConfig+0xc4>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0x9c>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b69 	.word	0x08005b69
 8005b5c:	08005b75 	.word	0x08005b75
 8005b60:	08005b6f 	.word	0x08005b6f
 8005b64:	08005b7b 	.word	0x08005b7b
 8005b68:	2301      	movs	r3, #1
 8005b6a:	76fb      	strb	r3, [r7, #27]
 8005b6c:	e0e7      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	76fb      	strb	r3, [r7, #27]
 8005b72:	e0e4      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b74:	2304      	movs	r3, #4
 8005b76:	76fb      	strb	r3, [r7, #27]
 8005b78:	e0e1      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	76fb      	strb	r3, [r7, #27]
 8005b7e:	e0de      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b80:	2310      	movs	r3, #16
 8005b82:	76fb      	strb	r3, [r7, #27]
 8005b84:	e0db      	b.n	8005d3e <UART_SetConfig+0x282>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a88      	ldr	r2, [pc, #544]	; (8005dac <UART_SetConfig+0x2f0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d132      	bne.n	8005bf6 <UART_SetConfig+0x13a>
 8005b90:	4b85      	ldr	r3, [pc, #532]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d828      	bhi.n	8005bf0 <UART_SetConfig+0x134>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0xe8>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bd9 	.word	0x08005bd9
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bf1 	.word	0x08005bf1
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005bdf 	.word	0x08005bdf
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf1 	.word	0x08005bf1
 8005bd4:	08005beb 	.word	0x08005beb
 8005bd8:	2300      	movs	r3, #0
 8005bda:	76fb      	strb	r3, [r7, #27]
 8005bdc:	e0af      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bde:	2302      	movs	r3, #2
 8005be0:	76fb      	strb	r3, [r7, #27]
 8005be2:	e0ac      	b.n	8005d3e <UART_SetConfig+0x282>
 8005be4:	2304      	movs	r3, #4
 8005be6:	76fb      	strb	r3, [r7, #27]
 8005be8:	e0a9      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bea:	2308      	movs	r3, #8
 8005bec:	76fb      	strb	r3, [r7, #27]
 8005bee:	e0a6      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	76fb      	strb	r3, [r7, #27]
 8005bf4:	e0a3      	b.n	8005d3e <UART_SetConfig+0x282>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6d      	ldr	r2, [pc, #436]	; (8005db0 <UART_SetConfig+0x2f4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d120      	bne.n	8005c42 <UART_SetConfig+0x186>
 8005c00:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c0a:	2b30      	cmp	r3, #48	; 0x30
 8005c0c:	d013      	beq.n	8005c36 <UART_SetConfig+0x17a>
 8005c0e:	2b30      	cmp	r3, #48	; 0x30
 8005c10:	d814      	bhi.n	8005c3c <UART_SetConfig+0x180>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d009      	beq.n	8005c2a <UART_SetConfig+0x16e>
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d810      	bhi.n	8005c3c <UART_SetConfig+0x180>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <UART_SetConfig+0x168>
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d006      	beq.n	8005c30 <UART_SetConfig+0x174>
 8005c22:	e00b      	b.n	8005c3c <UART_SetConfig+0x180>
 8005c24:	2300      	movs	r3, #0
 8005c26:	76fb      	strb	r3, [r7, #27]
 8005c28:	e089      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	76fb      	strb	r3, [r7, #27]
 8005c2e:	e086      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c30:	2304      	movs	r3, #4
 8005c32:	76fb      	strb	r3, [r7, #27]
 8005c34:	e083      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c36:	2308      	movs	r3, #8
 8005c38:	76fb      	strb	r3, [r7, #27]
 8005c3a:	e080      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	76fb      	strb	r3, [r7, #27]
 8005c40:	e07d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5b      	ldr	r2, [pc, #364]	; (8005db4 <UART_SetConfig+0x2f8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d120      	bne.n	8005c8e <UART_SetConfig+0x1d2>
 8005c4c:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c56:	2bc0      	cmp	r3, #192	; 0xc0
 8005c58:	d013      	beq.n	8005c82 <UART_SetConfig+0x1c6>
 8005c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c5c:	d814      	bhi.n	8005c88 <UART_SetConfig+0x1cc>
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d009      	beq.n	8005c76 <UART_SetConfig+0x1ba>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d810      	bhi.n	8005c88 <UART_SetConfig+0x1cc>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <UART_SetConfig+0x1b4>
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d006      	beq.n	8005c7c <UART_SetConfig+0x1c0>
 8005c6e:	e00b      	b.n	8005c88 <UART_SetConfig+0x1cc>
 8005c70:	2300      	movs	r3, #0
 8005c72:	76fb      	strb	r3, [r7, #27]
 8005c74:	e063      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c76:	2302      	movs	r3, #2
 8005c78:	76fb      	strb	r3, [r7, #27]
 8005c7a:	e060      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	76fb      	strb	r3, [r7, #27]
 8005c80:	e05d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c82:	2308      	movs	r3, #8
 8005c84:	76fb      	strb	r3, [r7, #27]
 8005c86:	e05a      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	76fb      	strb	r3, [r7, #27]
 8005c8c:	e057      	b.n	8005d3e <UART_SetConfig+0x282>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a49      	ldr	r2, [pc, #292]	; (8005db8 <UART_SetConfig+0x2fc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d125      	bne.n	8005ce4 <UART_SetConfig+0x228>
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca6:	d017      	beq.n	8005cd8 <UART_SetConfig+0x21c>
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d817      	bhi.n	8005cde <UART_SetConfig+0x222>
 8005cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb2:	d00b      	beq.n	8005ccc <UART_SetConfig+0x210>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d811      	bhi.n	8005cde <UART_SetConfig+0x222>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <UART_SetConfig+0x20a>
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d006      	beq.n	8005cd2 <UART_SetConfig+0x216>
 8005cc4:	e00b      	b.n	8005cde <UART_SetConfig+0x222>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	76fb      	strb	r3, [r7, #27]
 8005cca:	e038      	b.n	8005d3e <UART_SetConfig+0x282>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	76fb      	strb	r3, [r7, #27]
 8005cd0:	e035      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cd2:	2304      	movs	r3, #4
 8005cd4:	76fb      	strb	r3, [r7, #27]
 8005cd6:	e032      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cd8:	2308      	movs	r3, #8
 8005cda:	76fb      	strb	r3, [r7, #27]
 8005cdc:	e02f      	b.n	8005d3e <UART_SetConfig+0x282>
 8005cde:	2310      	movs	r3, #16
 8005ce0:	76fb      	strb	r3, [r7, #27]
 8005ce2:	e02c      	b.n	8005d3e <UART_SetConfig+0x282>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d125      	bne.n	8005d3a <UART_SetConfig+0x27e>
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <UART_SetConfig+0x2ec>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cfc:	d017      	beq.n	8005d2e <UART_SetConfig+0x272>
 8005cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d02:	d817      	bhi.n	8005d34 <UART_SetConfig+0x278>
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d00b      	beq.n	8005d22 <UART_SetConfig+0x266>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d811      	bhi.n	8005d34 <UART_SetConfig+0x278>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <UART_SetConfig+0x260>
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d006      	beq.n	8005d28 <UART_SetConfig+0x26c>
 8005d1a:	e00b      	b.n	8005d34 <UART_SetConfig+0x278>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d22:	2302      	movs	r3, #2
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e00a      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d28:	2304      	movs	r3, #4
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e007      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d2e:	2308      	movs	r3, #8
 8005d30:	76fb      	strb	r3, [r7, #27]
 8005d32:	e004      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d34:	2310      	movs	r3, #16
 8005d36:	76fb      	strb	r3, [r7, #27]
 8005d38:	e001      	b.n	8005d3e <UART_SetConfig+0x282>
 8005d3a:	2310      	movs	r3, #16
 8005d3c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <UART_SetConfig+0x2e4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	f040 8087 	bne.w	8005e58 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d4a:	7efb      	ldrb	r3, [r7, #27]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d837      	bhi.n	8005dc0 <UART_SetConfig+0x304>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0x29c>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005dc1 	.word	0x08005dc1
 8005d60:	08005d85 	.word	0x08005d85
 8005d64:	08005dc1 	.word	0x08005dc1
 8005d68:	08005d8b 	.word	0x08005d8b
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005dc1 	.word	0x08005dc1
 8005d74:	08005dc1 	.word	0x08005dc1
 8005d78:	08005d93 	.word	0x08005d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fd f98e 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8005d80:	6178      	str	r0, [r7, #20]
        break;
 8005d82:	e022      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <UART_SetConfig+0x300>)
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e01f      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8a:	f7fd f8ef 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8005d8e:	6178      	str	r0, [r7, #20]
        break;
 8005d90:	e01b      	b.n	8005dca <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	617b      	str	r3, [r7, #20]
        break;
 8005d98:	e017      	b.n	8005dca <UART_SetConfig+0x30e>
 8005d9a:	bf00      	nop
 8005d9c:	efff69f3 	.word	0xefff69f3
 8005da0:	40008000 	.word	0x40008000
 8005da4:	40013800 	.word	0x40013800
 8005da8:	40021000 	.word	0x40021000
 8005dac:	40004400 	.word	0x40004400
 8005db0:	40004800 	.word	0x40004800
 8005db4:	40004c00 	.word	0x40004c00
 8005db8:	40005000 	.word	0x40005000
 8005dbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	76bb      	strb	r3, [r7, #26]
        break;
 8005dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80f1 	beq.w	8005fb4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d305      	bcc.n	8005dee <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d902      	bls.n	8005df4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	76bb      	strb	r3, [r7, #26]
 8005df2:	e0df      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	020b      	lsls	r3, r1, #8
 8005e06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e0a:	0202      	lsls	r2, r0, #8
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	6849      	ldr	r1, [r1, #4]
 8005e10:	0849      	lsrs	r1, r1, #1
 8005e12:	4608      	mov	r0, r1
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	1814      	adds	r4, r2, r0
 8005e1a:	eb43 0501 	adc.w	r5, r3, r1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	f7fa f9d8 	bl	80001e0 <__aeabi_uldivmod>
 8005e30:	4602      	mov	r2, r0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4613      	mov	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e3e:	d308      	bcc.n	8005e52 <UART_SetConfig+0x396>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e46:	d204      	bcs.n	8005e52 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	60da      	str	r2, [r3, #12]
 8005e50:	e0b0      	b.n	8005fb4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	76bb      	strb	r3, [r7, #26]
 8005e56:	e0ad      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d15c      	bne.n	8005f1c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005e62:	7efb      	ldrb	r3, [r7, #27]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d828      	bhi.n	8005eba <UART_SetConfig+0x3fe>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x3b4>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	08005ebb 	.word	0x08005ebb
 8005e80:	08005eab 	.word	0x08005eab
 8005e84:	08005ebb 	.word	0x08005ebb
 8005e88:	08005ebb 	.word	0x08005ebb
 8005e8c:	08005ebb 	.word	0x08005ebb
 8005e90:	08005eb3 	.word	0x08005eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fd f902 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8005e98:	6178      	str	r0, [r7, #20]
        break;
 8005e9a:	e013      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e9c:	f7fd f914 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8005ea0:	6178      	str	r0, [r7, #20]
        break;
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea4:	4b49      	ldr	r3, [pc, #292]	; (8005fcc <UART_SetConfig+0x510>)
 8005ea6:	617b      	str	r3, [r7, #20]
        break;
 8005ea8:	e00c      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eaa:	f7fd f85f 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8005eae:	6178      	str	r0, [r7, #20]
        break;
 8005eb0:	e008      	b.n	8005ec4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	617b      	str	r3, [r7, #20]
        break;
 8005eb8:	e004      	b.n	8005ec4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ec2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d074      	beq.n	8005fb4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005a      	lsls	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	441a      	add	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d916      	bls.n	8005f16 <UART_SetConfig+0x45a>
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eee:	d212      	bcs.n	8005f16 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f023 030f 	bic.w	r3, r3, #15
 8005ef8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	085b      	lsrs	r3, r3, #1
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	89fb      	ldrh	r3, [r7, #14]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	89fa      	ldrh	r2, [r7, #14]
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	e04e      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	76bb      	strb	r3, [r7, #26]
 8005f1a:	e04b      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f1c:	7efb      	ldrb	r3, [r7, #27]
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d827      	bhi.n	8005f72 <UART_SetConfig+0x4b6>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x46c>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f55 	.word	0x08005f55
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	08005f73 	.word	0x08005f73
 8005f38:	08005f63 	.word	0x08005f63
 8005f3c:	08005f73 	.word	0x08005f73
 8005f40:	08005f73 	.word	0x08005f73
 8005f44:	08005f73 	.word	0x08005f73
 8005f48:	08005f6b 	.word	0x08005f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4c:	f7fd f8a6 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8005f50:	6178      	str	r0, [r7, #20]
        break;
 8005f52:	e013      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f54:	f7fd f8b8 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8005f58:	6178      	str	r0, [r7, #20]
        break;
 8005f5a:	e00f      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <UART_SetConfig+0x510>)
 8005f5e:	617b      	str	r3, [r7, #20]
        break;
 8005f60:	e00c      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f62:	f7fd f803 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8005f66:	6178      	str	r0, [r7, #20]
        break;
 8005f68:	e008      	b.n	8005f7c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6e:	617b      	str	r3, [r7, #20]
        break;
 8005f70:	e004      	b.n	8005f7c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	76bb      	strb	r3, [r7, #26]
        break;
 8005f7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d018      	beq.n	8005fb4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085a      	lsrs	r2, r3, #1
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	441a      	add	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b0f      	cmp	r3, #15
 8005f9c:	d908      	bls.n	8005fb0 <UART_SetConfig+0x4f4>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d204      	bcs.n	8005fb0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	e001      	b.n	8005fb4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fc0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	00f42400 	.word	0x00f42400

08005fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ce:	d10a      	bne.n	80060e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006124:	f7fb fe86 	bl	8001e34 <HAL_GetTick>
 8006128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10e      	bne.n	8006156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f82d 	bl	80061a6 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e023      	b.n	800619e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b04      	cmp	r3, #4
 8006162:	d10e      	bne.n	8006182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f817 	bl	80061a6 <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e00d      	b.n	800619e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	4613      	mov	r3, r2
 80061b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b6:	e05e      	b.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d05a      	beq.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c0:	f7fb fe38 	bl	8001e34 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d302      	bcc.n	80061d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d11b      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e043      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d02c      	beq.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622a:	d124      	bne.n	8006276 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006234:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006244:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e00f      	b.n	8006296 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d091      	beq.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	d10e      	bne.n	80062f2 <UART_Start_Receive_IT+0x52>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <UART_Start_Receive_IT+0x48>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062e6:	e02d      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	22ff      	movs	r2, #255	; 0xff
 80062ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f0:	e028      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <UART_Start_Receive_IT+0x76>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <UART_Start_Receive_IT+0x6c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800630a:	e01b      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	227f      	movs	r2, #127	; 0x7f
 8006310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006314:	e016      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631e:	d10d      	bne.n	800633c <UART_Start_Receive_IT+0x9c>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <UART_Start_Receive_IT+0x92>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	227f      	movs	r2, #127	; 0x7f
 800632c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006330:	e008      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	223f      	movs	r2, #63	; 0x3f
 8006336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800633a:	e003      	b.n	8006344 <UART_Start_Receive_IT+0xa4>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2222      	movs	r2, #34	; 0x22
 8006350:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d107      	bne.n	800637c <UART_Start_Receive_IT+0xdc>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <UART_Start_Receive_IT+0x108>)
 8006378:	665a      	str	r2, [r3, #100]	; 0x64
 800637a:	e002      	b.n	8006382 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a0b      	ldr	r2, [pc, #44]	; (80063ac <UART_Start_Receive_IT+0x10c>)
 8006380:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006398:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	08006635 	.word	0x08006635
 80063ac:	0800655d 	.word	0x0800655d

080063b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0210 	bic.w	r2, r2, #16
 80063ee:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fb2f 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006446:	2b21      	cmp	r3, #33	; 0x21
 8006448:	d12b      	bne.n	80064a2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d110      	bne.n	8006478 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006464:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006474:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006476:	e014      	b.n	80064a2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647c:	781a      	ldrb	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b292      	uxth	r2, r2
 8006484:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ba:	2b21      	cmp	r3, #33	; 0x21
 80064bc:	d12f      	bne.n	800651e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d110      	bne.n	80064ec <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80064ea:	e018      	b.n	800651e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fe:	b292      	uxth	r2, r2
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006506:	1c9a      	adds	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006540:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7f9 ffde 	bl	8000510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800656a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006570:	2b22      	cmp	r3, #34	; 0x22
 8006572:	d151      	bne.n	8006618 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800657a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800657c:	89bb      	ldrh	r3, [r7, #12]
 800657e:	b2d9      	uxtb	r1, r3
 8006580:	89fb      	ldrh	r3, [r7, #14]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006588:	400a      	ands	r2, r1
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	1c5a      	adds	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d13a      	bne.n	800662c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d10f      	bne.n	800660a <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0210 	bic.w	r2, r2, #16
 80065f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fa4e 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
 8006608:	e002      	b.n	8006610 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa fbc8 	bl	8000da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006616:	e009      	b.n	800662c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	8b1b      	ldrh	r3, [r3, #24]
 800661e:	b29a      	uxth	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0208 	orr.w	r2, r2, #8
 8006628:	b292      	uxth	r2, r2
 800662a:	831a      	strh	r2, [r3, #24]
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006642:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	2b22      	cmp	r3, #34	; 0x22
 800664a:	d151      	bne.n	80066f0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006652:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006658:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800665a:	89ba      	ldrh	r2, [r7, #12]
 800665c:	89fb      	ldrh	r3, [r7, #14]
 800665e:	4013      	ands	r3, r2
 8006660:	b29a      	uxth	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d13a      	bne.n	8006704 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800669c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10f      	bne.n	80066e2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0210 	bic.w	r2, r2, #16
 80066d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff f9e2 	bl	8005aa4 <HAL_UARTEx_RxEventCallback>
 80066e0:	e002      	b.n	80066e8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fa fb5c 	bl	8000da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066ee:	e009      	b.n	8006704 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	8b1b      	ldrh	r3, [r3, #24]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0208 	orr.w	r2, r2, #8
 8006700:	b292      	uxth	r2, r2
 8006702:	831a      	strh	r2, [r3, #24]
}
 8006704:	bf00      	nop
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <__NVIC_SetPriority>:
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800672c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006730:	2b00      	cmp	r3, #0
 8006732:	db0a      	blt.n	800674a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	490c      	ldr	r1, [pc, #48]	; (800676c <__NVIC_SetPriority+0x4c>)
 800673a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673e:	0112      	lsls	r2, r2, #4
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	440b      	add	r3, r1
 8006744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006748:	e00a      	b.n	8006760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	b2da      	uxtb	r2, r3
 800674e:	4908      	ldr	r1, [pc, #32]	; (8006770 <__NVIC_SetPriority+0x50>)
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	3b04      	subs	r3, #4
 8006758:	0112      	lsls	r2, r2, #4
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	440b      	add	r3, r1
 800675e:	761a      	strb	r2, [r3, #24]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	e000e100 	.word	0xe000e100
 8006770:	e000ed00 	.word	0xe000ed00

08006774 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006778:	4b05      	ldr	r3, [pc, #20]	; (8006790 <SysTick_Handler+0x1c>)
 800677a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800677c:	f002 f81a 	bl	80087b4 <xTaskGetSchedulerState>
 8006780:	4603      	mov	r3, r0
 8006782:	2b01      	cmp	r3, #1
 8006784:	d001      	beq.n	800678a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006786:	f002 feff 	bl	8009588 <xPortSysTickHandler>
  }
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010

08006794 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006798:	2100      	movs	r1, #0
 800679a:	f06f 0004 	mvn.w	r0, #4
 800679e:	f7ff ffbf 	bl	8006720 <__NVIC_SetPriority>
#endif
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	603b      	str	r3, [r7, #0]
  return(result);
 80067b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067ba:	f06f 0305 	mvn.w	r3, #5
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	e00c      	b.n	80067dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <osKernelInitialize+0x44>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d105      	bne.n	80067d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <osKernelInitialize+0x44>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e002      	b.n	80067dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295
 80067da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067dc:	687b      	ldr	r3, [r7, #4]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	200006ec 	.word	0x200006ec

080067f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f6:	f3ef 8305 	mrs	r3, IPSR
 80067fa:	603b      	str	r3, [r7, #0]
  return(result);
 80067fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006802:	f06f 0305 	mvn.w	r3, #5
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e010      	b.n	800682c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <osKernelStart+0x48>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d109      	bne.n	8006826 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006812:	f7ff ffbf 	bl	8006794 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006816:	4b08      	ldr	r3, [pc, #32]	; (8006838 <osKernelStart+0x48>)
 8006818:	2202      	movs	r2, #2
 800681a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800681c:	f001 fb66 	bl	8007eec <vTaskStartScheduler>
      stat = osOK;
 8006820:	2300      	movs	r3, #0
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	e002      	b.n	800682c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800682c:	687b      	ldr	r3, [r7, #4]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200006ec 	.word	0x200006ec

0800683c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b08e      	sub	sp, #56	; 0x38
 8006840:	af04      	add	r7, sp, #16
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006848:	2300      	movs	r3, #0
 800684a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	617b      	str	r3, [r7, #20]
  return(result);
 8006852:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d17f      	bne.n	8006958 <osThreadNew+0x11c>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d07c      	beq.n	8006958 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800685e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006862:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006864:	2318      	movs	r3, #24
 8006866:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800686c:	f04f 33ff 	mov.w	r3, #4294967295
 8006870:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d045      	beq.n	8006904 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <osThreadNew+0x4a>
        name = attr->name;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <osThreadNew+0x70>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b38      	cmp	r3, #56	; 0x38
 800689e:	d805      	bhi.n	80068ac <osThreadNew+0x70>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <osThreadNew+0x74>
        return (NULL);
 80068ac:	2300      	movs	r3, #0
 80068ae:	e054      	b.n	800695a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00e      	beq.n	80068e6 <osThreadNew+0xaa>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	2b5f      	cmp	r3, #95	; 0x5f
 80068ce:	d90a      	bls.n	80068e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <osThreadNew+0xaa>
        mem = 1;
 80068e0:	2301      	movs	r3, #1
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e010      	b.n	8006908 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10c      	bne.n	8006908 <osThreadNew+0xcc>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d108      	bne.n	8006908 <osThreadNew+0xcc>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d104      	bne.n	8006908 <osThreadNew+0xcc>
          mem = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	e001      	b.n	8006908 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006904:	2300      	movs	r3, #0
 8006906:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d110      	bne.n	8006930 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006916:	9202      	str	r2, [sp, #8]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6a3a      	ldr	r2, [r7, #32]
 8006922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f001 f909 	bl	8007b3c <xTaskCreateStatic>
 800692a:	4603      	mov	r3, r0
 800692c:	613b      	str	r3, [r7, #16]
 800692e:	e013      	b.n	8006958 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d110      	bne.n	8006958 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	b29a      	uxth	r2, r3
 800693a:	f107 0310 	add.w	r3, r7, #16
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f001 f954 	bl	8007bf6 <xTaskCreate>
 800694e:	4603      	mov	r3, r0
 8006950:	2b01      	cmp	r3, #1
 8006952:	d001      	beq.n	8006958 <osThreadNew+0x11c>
            hTask = NULL;
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006958:	693b      	ldr	r3, [r7, #16]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696a:	f3ef 8305 	mrs	r3, IPSR
 800696e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <osDelay+0x1c>
    stat = osErrorISR;
 8006976:	f06f 0305 	mvn.w	r3, #5
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e007      	b.n	800698e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <osDelay+0x2c>
      vTaskDelay(ticks);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fa7b 	bl	8007e84 <vTaskDelay>
    }
  }

  return (stat);
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4a07      	ldr	r2, [pc, #28]	; (80069c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80069a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <vApplicationGetIdleTaskMemory+0x30>)
 80069ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b6:	601a      	str	r2, [r3, #0]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	200006f0 	.word	0x200006f0
 80069c8:	20000750 	.word	0x20000750

080069cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4a07      	ldr	r2, [pc, #28]	; (80069f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80069dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4a06      	ldr	r2, [pc, #24]	; (80069fc <vApplicationGetTimerTaskMemory+0x30>)
 80069e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	20000b50 	.word	0x20000b50
 80069fc:	20000bb0 	.word	0x20000bb0

08006a00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0208 	add.w	r2, r3, #8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f04f 32ff 	mov.w	r2, #4294967295
 8006a18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f103 0208 	add.w	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f103 0208 	add.w	r2, r3, #8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d103      	bne.n	8006ac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	e00c      	b.n	8006adc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e002      	b.n	8006ad0 <vListInsert+0x2e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d2f6      	bcs.n	8006aca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6852      	ldr	r2, [r2, #4]
 8006b34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d103      	bne.n	8006b48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1e5a      	subs	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b92:	f002 fc67 	bl	8009464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	441a      	add	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	441a      	add	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	22ff      	movs	r2, #255	; 0xff
 8006bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d114      	bne.n	8006c12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3310      	adds	r3, #16
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fc1f 	bl	8008438 <xTaskRemoveFromEventList>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d012      	beq.n	8006c26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <xQueueGenericReset+0xcc>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	e009      	b.n	8006c26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3310      	adds	r3, #16
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fef2 	bl	8006a00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff feed 	bl	8006a00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c26:	f002 fc4d 	bl	80094c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c2a:	2301      	movs	r3, #1
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08e      	sub	sp, #56	; 0x38
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <xQueueGenericCreateStatic+0x52>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <xQueueGenericCreateStatic+0x56>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueGenericCreateStatic+0x58>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	623b      	str	r3, [r7, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <xQueueGenericCreateStatic+0x7e>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <xQueueGenericCreateStatic+0x82>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <xQueueGenericCreateStatic+0x84>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	61fb      	str	r3, [r7, #28]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cd6:	2350      	movs	r3, #80	; 0x50
 8006cd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b50      	cmp	r3, #80	; 0x50
 8006cde:	d00a      	beq.n	8006cf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61bb      	str	r3, [r7, #24]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f83f 	bl	8006d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3730      	adds	r7, #48	; 0x30
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	613b      	str	r3, [r7, #16]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	fb02 f303 	mul.w	r3, r2, r3
 8006d5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3350      	adds	r3, #80	; 0x50
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 fca1 	bl	80096a8 <pvPortMalloc>
 8006d66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d011      	beq.n	8006d92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	3350      	adds	r3, #80	; 0x50
 8006d76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d80:	79fa      	ldrb	r2, [r7, #7]
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f805 	bl	8006d9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d92:	69bb      	ldr	r3, [r7, #24]
	}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3720      	adds	r7, #32
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dca:	2101      	movs	r1, #1
 8006dcc:	69b8      	ldr	r0, [r7, #24]
 8006dce:	f7ff fecb 	bl	8006b68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00e      	beq.n	8006e0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f81d 	bl	8006e48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e0e:	bf00      	nop
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6939      	ldr	r1, [r7, #16]
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f7ff ff7a 	bl	8006d28 <xQueueGenericCreate>
 8006e34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ffd3 	bl	8006de2 <prvInitialiseMutex>

		return xNewQueue;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08e      	sub	sp, #56	; 0x38
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e56:	2300      	movs	r3, #0
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <xQueueGenericSend+0x32>
	__asm volatile
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e76:	bf00      	nop
 8006e78:	e7fe      	b.n	8006e78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <xQueueGenericSend+0x40>
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <xQueueGenericSend+0x44>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <xQueueGenericSend+0x46>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <xQueueGenericSend+0x60>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d103      	bne.n	8006eb6 <xQueueGenericSend+0x6e>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0x72>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0x74>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	623b      	str	r3, [r7, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed6:	f001 fc6d 	bl	80087b4 <xTaskGetSchedulerState>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <xQueueGenericSend+0x9e>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <xQueueGenericSend+0xa2>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericSend+0xa4>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xQueueGenericSend+0xbe>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	61fb      	str	r3, [r7, #28]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f06:	f002 faad 	bl	8009464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d302      	bcc.n	8006f1c <xQueueGenericSend+0xd4>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d129      	bne.n	8006f70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	68b9      	ldr	r1, [r7, #8]
 8006f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f22:	f000 fc9d 	bl	8007860 <prvCopyDataToQueue>
 8006f26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 fa7f 	bl	8008438 <xTaskRemoveFromEventList>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f40:	4b3f      	ldr	r3, [pc, #252]	; (8007040 <xQueueGenericSend+0x1f8>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	e00a      	b.n	8006f68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f58:	4b39      	ldr	r3, [pc, #228]	; (8007040 <xQueueGenericSend+0x1f8>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f68:	f002 faac 	bl	80094c4 <vPortExitCritical>
				return pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e063      	b.n	8007038 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d103      	bne.n	8006f7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f76:	f002 faa5 	bl	80094c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e05c      	b.n	8007038 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 fab9 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f92:	f002 fa97 	bl	80094c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f96:	f001 f811 	bl	8007fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f9a:	f002 fa63 	bl	8009464 <vPortEnterCritical>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa4:	b25b      	sxtb	r3, r3
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006faa:	d103      	bne.n	8006fb4 <xQueueGenericSend+0x16c>
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d103      	bne.n	8006fca <xQueueGenericSend+0x182>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fca:	f002 fa7b 	bl	80094c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fce:	1d3a      	adds	r2, r7, #4
 8006fd0:	f107 0314 	add.w	r3, r7, #20
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 faa8 	bl	800852c <xTaskCheckForTimeOut>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d124      	bne.n	800702c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe4:	f000 fd34 	bl	8007a50 <prvIsQueueFull>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d018      	beq.n	8007020 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	3310      	adds	r3, #16
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 f9ce 	bl	8008398 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffe:	f000 fcbf 	bl	8007980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007002:	f000 ffe9 	bl	8007fd8 <xTaskResumeAll>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	f47f af7c 	bne.w	8006f06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <xQueueGenericSend+0x1f8>)
 8007010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	e772      	b.n	8006f06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007022:	f000 fcad 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007026:	f000 ffd7 	bl	8007fd8 <xTaskResumeAll>
 800702a:	e76c      	b.n	8006f06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800702c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702e:	f000 fca7 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007032:	f000 ffd1 	bl	8007fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007036:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007038:	4618      	mov	r0, r3
 800703a:	3738      	adds	r7, #56	; 0x38
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b090      	sub	sp, #64	; 0x40
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <xQueueGenericSendFromISR+0x3c>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <xQueueGenericSendFromISR+0x40>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <xQueueGenericSendFromISR+0x42>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d103      	bne.n	80070ae <xQueueGenericSendFromISR+0x6a>
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <xQueueGenericSendFromISR+0x6e>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <xQueueGenericSendFromISR+0x70>
 80070b2:	2300      	movs	r3, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	623b      	str	r3, [r7, #32]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ce:	f002 faab 	bl	8009628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070d2:	f3ef 8211 	mrs	r2, BASEPRI
 80070d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d302      	bcc.n	8007100 <xQueueGenericSendFromISR+0xbc>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d12f      	bne.n	8007160 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007116:	f000 fba3 	bl	8007860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800711a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007122:	d112      	bne.n	800714a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	3324      	adds	r3, #36	; 0x24
 8007130:	4618      	mov	r0, r3
 8007132:	f001 f981 	bl	8008438 <xTaskRemoveFromEventList>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00e      	beq.n	800715a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	e007      	b.n	800715a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800714a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800714e:	3301      	adds	r3, #1
 8007150:	b2db      	uxtb	r3, r3
 8007152:	b25a      	sxtb	r2, r3
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800715a:	2301      	movs	r3, #1
 800715c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800715e:	e001      	b.n	8007164 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007160:	2300      	movs	r3, #0
 8007162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800716e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007172:	4618      	mov	r0, r3
 8007174:	3740      	adds	r7, #64	; 0x40
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08e      	sub	sp, #56	; 0x38
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	623b      	str	r3, [r7, #32]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	61fb      	str	r3, [r7, #28]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <xQueueGiveFromISR+0x58>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueGiveFromISR+0x5c>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueGiveFromISR+0x5e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61bb      	str	r3, [r7, #24]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f002 fa19 	bl	8009628 <vPortValidateInterruptPriority>
	__asm volatile
 80071f6:	f3ef 8211 	mrs	r2, BASEPRI
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	617a      	str	r2, [r7, #20]
 800720c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800720e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721e:	429a      	cmp	r2, r3
 8007220:	d22b      	bcs.n	800727a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723c:	d112      	bne.n	8007264 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	3324      	adds	r3, #36	; 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f001 f8f4 	bl	8008438 <xTaskRemoveFromEventList>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00e      	beq.n	8007274 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2201      	movs	r2, #1
 8007260:	601a      	str	r2, [r3, #0]
 8007262:	e007      	b.n	8007274 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007268:	3301      	adds	r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	b25a      	sxtb	r2, r3
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007274:	2301      	movs	r3, #1
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
 8007278:	e001      	b.n	800727e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800727a:	2300      	movs	r3, #0
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f383 8811 	msr	BASEPRI, r3
}
 8007288:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800728c:	4618      	mov	r0, r3
 800728e:	3738      	adds	r7, #56	; 0x38
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08c      	sub	sp, #48	; 0x30
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <xQueueReceive+0x30>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	623b      	str	r3, [r7, #32]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <xQueueReceive+0x3e>
 80072ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <xQueueReceive+0x42>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <xQueueReceive+0x44>
 80072d6:	2300      	movs	r3, #0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueReceive+0x5e>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	61fb      	str	r3, [r7, #28]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072f2:	f001 fa5f 	bl	80087b4 <xTaskGetSchedulerState>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <xQueueReceive+0x6e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <xQueueReceive+0x72>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <xQueueReceive+0x74>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <xQueueReceive+0x8e>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	61bb      	str	r3, [r7, #24]
}
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007322:	f002 f89f 	bl	8009464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01f      	beq.n	8007372 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007336:	f000 fafd 	bl	8007934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	1e5a      	subs	r2, r3, #1
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	3310      	adds	r3, #16
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f872 	bl	8008438 <xTaskRemoveFromEventList>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800735a:	4b3d      	ldr	r3, [pc, #244]	; (8007450 <xQueueReceive+0x1bc>)
 800735c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800736a:	f002 f8ab 	bl	80094c4 <vPortExitCritical>
				return pdPASS;
 800736e:	2301      	movs	r3, #1
 8007370:	e069      	b.n	8007446 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d103      	bne.n	8007380 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007378:	f002 f8a4 	bl	80094c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800737c:	2300      	movs	r3, #0
 800737e:	e062      	b.n	8007446 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007386:	f107 0310 	add.w	r3, r7, #16
 800738a:	4618      	mov	r0, r3
 800738c:	f001 f8b8 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007394:	f002 f896 	bl	80094c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007398:	f000 fe10 	bl	8007fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800739c:	f002 f862 	bl	8009464 <vPortEnterCritical>
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a6:	b25b      	sxtb	r3, r3
 80073a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ac:	d103      	bne.n	80073b6 <xQueueReceive+0x122>
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d103      	bne.n	80073cc <xQueueReceive+0x138>
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073cc:	f002 f87a 	bl	80094c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073d0:	1d3a      	adds	r2, r7, #4
 80073d2:	f107 0310 	add.w	r3, r7, #16
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f8a7 	bl	800852c <xTaskCheckForTimeOut>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d123      	bne.n	800742c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e6:	f000 fb1d 	bl	8007a24 <prvIsQueueEmpty>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f2:	3324      	adds	r3, #36	; 0x24
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4611      	mov	r1, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 ffcd 	bl	8008398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007400:	f000 fabe 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007404:	f000 fde8 	bl	8007fd8 <xTaskResumeAll>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d189      	bne.n	8007322 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <xQueueReceive+0x1bc>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	e780      	b.n	8007322 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007422:	f000 faad 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007426:	f000 fdd7 	bl	8007fd8 <xTaskResumeAll>
 800742a:	e77a      	b.n	8007322 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800742c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800742e:	f000 faa7 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007432:	f000 fdd1 	bl	8007fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007438:	f000 faf4 	bl	8007a24 <prvIsQueueEmpty>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	f43f af6f 	beq.w	8007322 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007446:	4618      	mov	r0, r3
 8007448:	3730      	adds	r7, #48	; 0x30
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	; 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800745e:	2300      	movs	r3, #0
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	623b      	str	r3, [r7, #32]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	61fb      	str	r3, [r7, #28]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a4:	f001 f986 	bl	80087b4 <xTaskGetSchedulerState>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <xQueueSemaphoreTake+0x60>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <xQueueSemaphoreTake+0x64>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <xQueueSemaphoreTake+0x66>
 80074b8:	2300      	movs	r3, #0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	61bb      	str	r3, [r7, #24]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074d4:	f001 ffc6 	bl	8009464 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d024      	beq.n	800752e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	1e5a      	subs	r2, r3, #1
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074f4:	f001 fad4 	bl	8008aa0 <pvTaskIncrementMutexHeldCount>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	3310      	adds	r3, #16
 800750a:	4618      	mov	r0, r3
 800750c:	f000 ff94 	bl	8008438 <xTaskRemoveFromEventList>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d007      	beq.n	8007526 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007516:	4b54      	ldr	r3, [pc, #336]	; (8007668 <xQueueSemaphoreTake+0x214>)
 8007518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007526:	f001 ffcd 	bl	80094c4 <vPortExitCritical>
				return pdPASS;
 800752a:	2301      	movs	r3, #1
 800752c:	e097      	b.n	800765e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d111      	bne.n	8007558 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	617b      	str	r3, [r7, #20]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007550:	f001 ffb8 	bl	80094c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007554:	2300      	movs	r3, #0
 8007556:	e082      	b.n	800765e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800755e:	f107 030c 	add.w	r3, r7, #12
 8007562:	4618      	mov	r0, r3
 8007564:	f000 ffcc 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800756c:	f001 ffaa 	bl	80094c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007570:	f000 fd24 	bl	8007fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007574:	f001 ff76 	bl	8009464 <vPortEnterCritical>
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800757e:	b25b      	sxtb	r3, r3
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007584:	d103      	bne.n	800758e <xQueueSemaphoreTake+0x13a>
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007594:	b25b      	sxtb	r3, r3
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d103      	bne.n	80075a4 <xQueueSemaphoreTake+0x150>
 800759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a4:	f001 ff8e 	bl	80094c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a8:	463a      	mov	r2, r7
 80075aa:	f107 030c 	add.w	r3, r7, #12
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 ffbb 	bl	800852c <xTaskCheckForTimeOut>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d132      	bne.n	8007622 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075be:	f000 fa31 	bl	8007a24 <prvIsQueueEmpty>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d026      	beq.n	8007616 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075d0:	f001 ff48 	bl	8009464 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 f909 	bl	80087f0 <xTaskPriorityInherit>
 80075de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075e0:	f001 ff70 	bl	80094c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	3324      	adds	r3, #36	; 0x24
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fed3 	bl	8008398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f4:	f000 f9c4 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075f8:	f000 fcee 	bl	8007fd8 <xTaskResumeAll>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f47f af68 	bne.w	80074d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007604:	4b18      	ldr	r3, [pc, #96]	; (8007668 <xQueueSemaphoreTake+0x214>)
 8007606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	e75e      	b.n	80074d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007618:	f000 f9b2 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800761c:	f000 fcdc 	bl	8007fd8 <xTaskResumeAll>
 8007620:	e758      	b.n	80074d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007624:	f000 f9ac 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007628:	f000 fcd6 	bl	8007fd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800762c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800762e:	f000 f9f9 	bl	8007a24 <prvIsQueueEmpty>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	f43f af4d 	beq.w	80074d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00d      	beq.n	800765c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007640:	f001 ff10 	bl	8009464 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007644:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007646:	f000 f8f3 	bl	8007830 <prvGetDisinheritPriorityAfterTimeout>
 800764a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007652:	4618      	mov	r0, r3
 8007654:	f001 f9a2 	bl	800899c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007658:	f001 ff34 	bl	80094c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800765c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800765e:	4618      	mov	r0, r3
 8007660:	3738      	adds	r7, #56	; 0x38
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	e000ed04 	.word	0xe000ed04

0800766c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08e      	sub	sp, #56	; 0x38
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007678:	2300      	movs	r3, #0
 800767a:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xQueuePeek+0x30>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <xQueuePeek+0x3e>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <xQueuePeek+0x42>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueuePeek+0x44>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueuePeek+0x5e>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	623b      	str	r3, [r7, #32]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ca:	f001 f873 	bl	80087b4 <xTaskGetSchedulerState>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <xQueuePeek+0x6e>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <xQueuePeek+0x72>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <xQueuePeek+0x74>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xQueuePeek+0x8e>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	61fb      	str	r3, [r7, #28]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076fa:	f001 feb3 	bl	8009464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d021      	beq.n	800774e <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007714:	f000 f90e 	bl	8007934 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771c:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00f      	beq.n	8007746 <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	3324      	adds	r3, #36	; 0x24
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fe84 	bl	8008438 <xTaskRemoveFromEventList>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8007736:	4b3d      	ldr	r3, [pc, #244]	; (800782c <xQueuePeek+0x1c0>)
 8007738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007746:	f001 febd 	bl	80094c4 <vPortExitCritical>
				return pdPASS;
 800774a:	2301      	movs	r3, #1
 800774c:	e069      	b.n	8007822 <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007754:	f001 feb6 	bl	80094c4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007758:	2300      	movs	r3, #0
 800775a:	e062      	b.n	8007822 <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007762:	f107 0314 	add.w	r3, r7, #20
 8007766:	4618      	mov	r0, r3
 8007768:	f000 feca 	bl	8008500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007770:	f001 fea8 	bl	80094c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007774:	f000 fc22 	bl	8007fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007778:	f001 fe74 	bl	8009464 <vPortEnterCritical>
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007782:	b25b      	sxtb	r3, r3
 8007784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007788:	d103      	bne.n	8007792 <xQueuePeek+0x126>
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007798:	b25b      	sxtb	r3, r3
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d103      	bne.n	80077a8 <xQueuePeek+0x13c>
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077a8:	f001 fe8c 	bl	80094c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ac:	1d3a      	adds	r2, r7, #4
 80077ae:	f107 0314 	add.w	r3, r7, #20
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 feb9 	bl	800852c <xTaskCheckForTimeOut>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d123      	bne.n	8007808 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077c2:	f000 f92f 	bl	8007a24 <prvIsQueueEmpty>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	3324      	adds	r3, #36	; 0x24
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4611      	mov	r1, r2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fddf 	bl	8008398 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077dc:	f000 f8d0 	bl	8007980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077e0:	f000 fbfa 	bl	8007fd8 <xTaskResumeAll>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d187      	bne.n	80076fa <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <xQueuePeek+0x1c0>)
 80077ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	e77e      	b.n	80076fa <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80077fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077fe:	f000 f8bf 	bl	8007980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007802:	f000 fbe9 	bl	8007fd8 <xTaskResumeAll>
 8007806:	e778      	b.n	80076fa <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8007808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800780a:	f000 f8b9 	bl	8007980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800780e:	f000 fbe3 	bl	8007fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007814:	f000 f906 	bl	8007a24 <prvIsQueueEmpty>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	f43f af6d 	beq.w	80076fa <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007822:	4618      	mov	r0, r3
 8007824:	3738      	adds	r7, #56	; 0x38
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e001      	b.n	8007852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007852:	68fb      	ldr	r3, [r7, #12]
	}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d14d      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f001 f818 	bl	80088c0 <xTaskPriorityDisinherit>
 8007890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	e043      	b.n	8007922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d119      	bne.n	80078d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6858      	ldr	r0, [r3, #4]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a8:	461a      	mov	r2, r3
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	f002 f90a 	bl	8009ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d32b      	bcc.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	e026      	b.n	8007922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68d8      	ldr	r0, [r3, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	461a      	mov	r2, r3
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	f002 f8f0 	bl	8009ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	425b      	negs	r3, r3
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d207      	bcs.n	8007910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	425b      	negs	r3, r3
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d105      	bne.n	8007922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3b01      	subs	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800792a:	697b      	ldr	r3, [r7, #20]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d018      	beq.n	8007978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	441a      	add	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	d303      	bcc.n	8007968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68d9      	ldr	r1, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	461a      	mov	r2, r3
 8007972:	6838      	ldr	r0, [r7, #0]
 8007974:	f002 f8a6 	bl	8009ac4 <memcpy>
	}
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007988:	f001 fd6c 	bl	8009464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007994:	e011      	b.n	80079ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	2b00      	cmp	r3, #0
 800799c:	d012      	beq.n	80079c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3324      	adds	r3, #36	; 0x24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fd48 	bl	8008438 <xTaskRemoveFromEventList>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ae:	f000 fe1f 	bl	80085f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dce9      	bgt.n	8007996 <prvUnlockQueue+0x16>
 80079c2:	e000      	b.n	80079c6 <prvUnlockQueue+0x46>
					break;
 80079c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	22ff      	movs	r2, #255	; 0xff
 80079ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079ce:	f001 fd79 	bl	80094c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079d2:	f001 fd47 	bl	8009464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079de:	e011      	b.n	8007a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3310      	adds	r3, #16
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fd23 	bl	8008438 <xTaskRemoveFromEventList>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079f8:	f000 fdfa 	bl	80085f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dce9      	bgt.n	80079e0 <prvUnlockQueue+0x60>
 8007a0c:	e000      	b.n	8007a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a18:	f001 fd54 	bl	80094c4 <vPortExitCritical>
}
 8007a1c:	bf00      	nop
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a2c:	f001 fd1a 	bl	8009464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e001      	b.n	8007a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f001 fd3f 	bl	80094c4 <vPortExitCritical>

	return xReturn;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a58:	f001 fd04 	bl	8009464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d102      	bne.n	8007a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	e001      	b.n	8007a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f001 fd27 	bl	80094c4 <vPortExitCritical>

	return xReturn;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	e014      	b.n	8007aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a90:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10b      	bne.n	8007ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a9c:	490c      	ldr	r1, [pc, #48]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <vQueueAddToRegistry+0x50>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ab2:	e006      	b.n	8007ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b07      	cmp	r3, #7
 8007abe:	d9e7      	bls.n	8007a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	20006a40 	.word	0x20006a40

08007ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ae4:	f001 fcbe 	bl	8009464 <vPortEnterCritical>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d103      	bne.n	8007afe <vQueueWaitForMessageRestricted+0x2a>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d103      	bne.n	8007b14 <vQueueWaitForMessageRestricted+0x40>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b14:	f001 fcd6 	bl	80094c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	3324      	adds	r3, #36	; 0x24
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fc59 	bl	80083e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f7ff ff26 	bl	8007980 <prvUnlockQueue>
	}
 8007b34:	bf00      	nop
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	623b      	str	r3, [r7, #32]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	61fb      	str	r3, [r7, #28]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b82:	2360      	movs	r3, #96	; 0x60
 8007b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	2b60      	cmp	r3, #96	; 0x60
 8007b8a:	d00a      	beq.n	8007ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	61bb      	str	r3, [r7, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01e      	beq.n	8007be8 <xTaskCreateStatic+0xac>
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01b      	beq.n	8007be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9303      	str	r3, [sp, #12]
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	9302      	str	r3, [sp, #8]
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f850 	bl	8007c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be2:	f000 f8df 	bl	8007da4 <prvAddNewTaskToReadyList>
 8007be6:	e001      	b.n	8007bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bec:	697b      	ldr	r3, [r7, #20]
	}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3728      	adds	r7, #40	; 0x28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b08c      	sub	sp, #48	; 0x30
 8007bfa:	af04      	add	r7, sp, #16
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fd4c 	bl	80096a8 <pvPortMalloc>
 8007c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c18:	2060      	movs	r0, #96	; 0x60
 8007c1a:	f001 fd45 	bl	80096a8 <pvPortMalloc>
 8007c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c2c:	e005      	b.n	8007c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c2e:	6978      	ldr	r0, [r7, #20]
 8007c30:	f001 fe06 	bl	8009840 <vPortFree>
 8007c34:	e001      	b.n	8007c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d017      	beq.n	8007c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c48:	88fa      	ldrh	r2, [r7, #6]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	9303      	str	r3, [sp, #12]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68b9      	ldr	r1, [r7, #8]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f80e 	bl	8007c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c64:	69f8      	ldr	r0, [r7, #28]
 8007c66:	f000 f89d 	bl	8007da4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	e002      	b.n	8007c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295
 8007c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c76:	69bb      	ldr	r3, [r7, #24]
	}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	461a      	mov	r2, r3
 8007c98:	21a5      	movs	r1, #165	; 0xa5
 8007c9a:	f001 ff21 	bl	8009ae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	617b      	str	r3, [r7, #20]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01f      	beq.n	8007d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	e012      	b.n	8007d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	7819      	ldrb	r1, [r3, #0]
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3334      	adds	r3, #52	; 0x34
 8007cf4:	460a      	mov	r2, r1
 8007cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3301      	adds	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d9e9      	bls.n	8007ce4 <prvInitialiseNewTask+0x64>
 8007d10:	e000      	b.n	8007d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d1c:	e003      	b.n	8007d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	2b37      	cmp	r3, #55	; 0x37
 8007d2a:	d901      	bls.n	8007d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d2c:	2337      	movs	r3, #55	; 0x37
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2200      	movs	r2, #0
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	3304      	adds	r3, #4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fe7a 	bl	8006a40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	3318      	adds	r3, #24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fe75 	bl	8006a40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6e:	2200      	movs	r2, #0
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2200      	movs	r2, #0
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	69b8      	ldr	r0, [r7, #24]
 8007d86:	f001 fa41 	bl	800920c <pxPortInitialiseStack>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d9c:	bf00      	nop
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dac:	f001 fb5a 	bl	8009464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007db0:	4b2d      	ldr	r3, [pc, #180]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3301      	adds	r3, #1
 8007db6:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007db8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d109      	bne.n	8007dd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dc2:	4a2a      	ldr	r2, [pc, #168]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dc8:	4b27      	ldr	r3, [pc, #156]	; (8007e68 <prvAddNewTaskToReadyList+0xc4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d110      	bne.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dd0:	f000 fc32 	bl	8008638 <prvInitialiseTaskLists>
 8007dd4:	e00d      	b.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dd6:	4b26      	ldr	r3, [pc, #152]	; (8007e70 <prvAddNewTaskToReadyList+0xcc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007dde:	4b23      	ldr	r3, [pc, #140]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d802      	bhi.n	8007df2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007df2:	4b20      	ldr	r3, [pc, #128]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007dfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <prvAddNewTaskToReadyList+0xd0>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <prvAddNewTaskToReadyList+0xd4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d903      	bls.n	8007e18 <prvAddNewTaskToReadyList+0x74>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <prvAddNewTaskToReadyList+0xd4>)
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4a15      	ldr	r2, [pc, #84]	; (8007e7c <prvAddNewTaskToReadyList+0xd8>)
 8007e26:	441a      	add	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f7fe fe13 	bl	8006a5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e34:	f001 fb46 	bl	80094c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e38:	4b0d      	ldr	r3, [pc, #52]	; (8007e70 <prvAddNewTaskToReadyList+0xcc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00e      	beq.n	8007e5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e40:	4b0a      	ldr	r3, [pc, #40]	; (8007e6c <prvAddNewTaskToReadyList+0xc8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d207      	bcs.n	8007e5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <prvAddNewTaskToReadyList+0xdc>)
 8007e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20001884 	.word	0x20001884
 8007e6c:	200013b0 	.word	0x200013b0
 8007e70:	20001890 	.word	0x20001890
 8007e74:	200018a0 	.word	0x200018a0
 8007e78:	2000188c 	.word	0x2000188c
 8007e7c:	200013b4 	.word	0x200013b4
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d017      	beq.n	8007ec6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e96:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <vTaskDelay+0x60>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <vTaskDelay+0x30>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	e7fe      	b.n	8007eb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007eb4:	f000 f882 	bl	8007fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fe04 	bl	8008ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ec0:	f000 f88a 	bl	8007fd8 <xTaskResumeAll>
 8007ec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d107      	bne.n	8007edc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <vTaskDelay+0x64>)
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200018ac 	.word	0x200018ac
 8007ee8:	e000ed04 	.word	0xe000ed04

08007eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007efa:	463a      	mov	r2, r7
 8007efc:	1d39      	adds	r1, r7, #4
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fd48 	bl	8006998 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	9202      	str	r2, [sp, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	2300      	movs	r3, #0
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	460a      	mov	r2, r1
 8007f1a:	4922      	ldr	r1, [pc, #136]	; (8007fa4 <vTaskStartScheduler+0xb8>)
 8007f1c:	4822      	ldr	r0, [pc, #136]	; (8007fa8 <vTaskStartScheduler+0xbc>)
 8007f1e:	f7ff fe0d 	bl	8007b3c <xTaskCreateStatic>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4a21      	ldr	r2, [pc, #132]	; (8007fac <vTaskStartScheduler+0xc0>)
 8007f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f28:	4b20      	ldr	r3, [pc, #128]	; (8007fac <vTaskStartScheduler+0xc0>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e001      	b.n	8007f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d102      	bne.n	8007f46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f40:	f000 fe16 	bl	8008b70 <xTimerCreateTimerTask>
 8007f44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d118      	bne.n	8007f7e <vTaskStartScheduler+0x92>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	613b      	str	r3, [r7, #16]
}
 8007f5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f60:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <vTaskStartScheduler+0xc4>)
 8007f62:	f04f 32ff 	mov.w	r2, #4294967295
 8007f66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <vTaskStartScheduler+0xc8>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <vTaskStartScheduler+0xcc>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007f74:	f7f9 f94e 	bl	8001214 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f78:	f001 f9d2 	bl	8009320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f7c:	e00e      	b.n	8007f9c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d10a      	bne.n	8007f9c <vTaskStartScheduler+0xb0>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60fb      	str	r3, [r7, #12]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <vTaskStartScheduler+0xae>
}
 8007f9c:	bf00      	nop
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	08009d68 	.word	0x08009d68
 8007fa8:	08008609 	.word	0x08008609
 8007fac:	200018a8 	.word	0x200018a8
 8007fb0:	200018a4 	.word	0x200018a4
 8007fb4:	20001890 	.word	0x20001890
 8007fb8:	20001888 	.word	0x20001888

08007fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <vTaskSuspendAll+0x18>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	4a03      	ldr	r2, [pc, #12]	; (8007fd4 <vTaskSuspendAll+0x18>)
 8007fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fca:	bf00      	nop
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	200018ac 	.word	0x200018ac

08007fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fe6:	4b42      	ldr	r3, [pc, #264]	; (80080f0 <xTaskResumeAll+0x118>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10a      	bne.n	8008004 <xTaskResumeAll+0x2c>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	603b      	str	r3, [r7, #0]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008004:	f001 fa2e 	bl	8009464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008008:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <xTaskResumeAll+0x118>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3b01      	subs	r3, #1
 800800e:	4a38      	ldr	r2, [pc, #224]	; (80080f0 <xTaskResumeAll+0x118>)
 8008010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008012:	4b37      	ldr	r3, [pc, #220]	; (80080f0 <xTaskResumeAll+0x118>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d162      	bne.n	80080e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800801a:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <xTaskResumeAll+0x11c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d05e      	beq.n	80080e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008022:	e02f      	b.n	8008084 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008024:	4b34      	ldr	r3, [pc, #208]	; (80080f8 <xTaskResumeAll+0x120>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3318      	adds	r3, #24
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fd6f 	bl	8006b14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3304      	adds	r3, #4
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fd6a 	bl	8006b14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <xTaskResumeAll+0x124>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d903      	bls.n	8008054 <xTaskResumeAll+0x7c>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <xTaskResumeAll+0x124>)
 8008052:	6013      	str	r3, [r2, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4a27      	ldr	r2, [pc, #156]	; (8008100 <xTaskResumeAll+0x128>)
 8008062:	441a      	add	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fe fcf5 	bl	8006a5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	4b23      	ldr	r3, [pc, #140]	; (8008104 <xTaskResumeAll+0x12c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800807e:	4b22      	ldr	r3, [pc, #136]	; (8008108 <xTaskResumeAll+0x130>)
 8008080:	2201      	movs	r2, #1
 8008082:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008084:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <xTaskResumeAll+0x120>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1cb      	bne.n	8008024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008092:	f000 fb6f 	bl	8008774 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <xTaskResumeAll+0x134>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d010      	beq.n	80080c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080a2:	f000 f847 	bl	8008134 <xTaskIncrementTick>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080ac:	4b16      	ldr	r3, [pc, #88]	; (8008108 <xTaskResumeAll+0x130>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3b01      	subs	r3, #1
 80080b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f1      	bne.n	80080a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <xTaskResumeAll+0x134>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080c4:	4b10      	ldr	r3, [pc, #64]	; (8008108 <xTaskResumeAll+0x130>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080d0:	4b0f      	ldr	r3, [pc, #60]	; (8008110 <xTaskResumeAll+0x138>)
 80080d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080e0:	f001 f9f0 	bl	80094c4 <vPortExitCritical>

	return xAlreadyYielded;
 80080e4:	68bb      	ldr	r3, [r7, #8]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	200018ac 	.word	0x200018ac
 80080f4:	20001884 	.word	0x20001884
 80080f8:	20001844 	.word	0x20001844
 80080fc:	2000188c 	.word	0x2000188c
 8008100:	200013b4 	.word	0x200013b4
 8008104:	200013b0 	.word	0x200013b0
 8008108:	20001898 	.word	0x20001898
 800810c:	20001894 	.word	0x20001894
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800811a:	4b05      	ldr	r3, [pc, #20]	; (8008130 <xTaskGetTickCount+0x1c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008120:	687b      	ldr	r3, [r7, #4]
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20001888 	.word	0x20001888

08008134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800813e:	4b4f      	ldr	r3, [pc, #316]	; (800827c <xTaskIncrementTick+0x148>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 808f 	bne.w	8008266 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008148:	4b4d      	ldr	r3, [pc, #308]	; (8008280 <xTaskIncrementTick+0x14c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3301      	adds	r3, #1
 800814e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008150:	4a4b      	ldr	r2, [pc, #300]	; (8008280 <xTaskIncrementTick+0x14c>)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d120      	bne.n	800819e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800815c:	4b49      	ldr	r3, [pc, #292]	; (8008284 <xTaskIncrementTick+0x150>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <xTaskIncrementTick+0x48>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	603b      	str	r3, [r7, #0]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <xTaskIncrementTick+0x46>
 800817c:	4b41      	ldr	r3, [pc, #260]	; (8008284 <xTaskIncrementTick+0x150>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	4b41      	ldr	r3, [pc, #260]	; (8008288 <xTaskIncrementTick+0x154>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3f      	ldr	r2, [pc, #252]	; (8008284 <xTaskIncrementTick+0x150>)
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	4a3f      	ldr	r2, [pc, #252]	; (8008288 <xTaskIncrementTick+0x154>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	4b3e      	ldr	r3, [pc, #248]	; (800828c <xTaskIncrementTick+0x158>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3301      	adds	r3, #1
 8008196:	4a3d      	ldr	r2, [pc, #244]	; (800828c <xTaskIncrementTick+0x158>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	f000 faeb 	bl	8008774 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800819e:	4b3c      	ldr	r3, [pc, #240]	; (8008290 <xTaskIncrementTick+0x15c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d349      	bcc.n	800823c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081a8:	4b36      	ldr	r3, [pc, #216]	; (8008284 <xTaskIncrementTick+0x150>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081b2:	4b37      	ldr	r3, [pc, #220]	; (8008290 <xTaskIncrementTick+0x15c>)
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	601a      	str	r2, [r3, #0]
					break;
 80081ba:	e03f      	b.n	800823c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081bc:	4b31      	ldr	r3, [pc, #196]	; (8008284 <xTaskIncrementTick+0x150>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d203      	bcs.n	80081dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081d4:	4a2e      	ldr	r2, [pc, #184]	; (8008290 <xTaskIncrementTick+0x15c>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081da:	e02f      	b.n	800823c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	3304      	adds	r3, #4
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fc97 	bl	8006b14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d004      	beq.n	80081f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	3318      	adds	r3, #24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fc8e 	bl	8006b14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4b25      	ldr	r3, [pc, #148]	; (8008294 <xTaskIncrementTick+0x160>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <xTaskIncrementTick+0xd8>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a22      	ldr	r2, [pc, #136]	; (8008294 <xTaskIncrementTick+0x160>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a1f      	ldr	r2, [pc, #124]	; (8008298 <xTaskIncrementTick+0x164>)
 800821a:	441a      	add	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fc19 	bl	8006a5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	4b1b      	ldr	r3, [pc, #108]	; (800829c <xTaskIncrementTick+0x168>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d3b8      	bcc.n	80081a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008236:	2301      	movs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800823a:	e7b5      	b.n	80081a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800823c:	4b17      	ldr	r3, [pc, #92]	; (800829c <xTaskIncrementTick+0x168>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	4915      	ldr	r1, [pc, #84]	; (8008298 <xTaskIncrementTick+0x164>)
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d901      	bls.n	8008258 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <xTaskIncrementTick+0x16c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d007      	beq.n	8008270 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e004      	b.n	8008270 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008266:	4b0f      	ldr	r3, [pc, #60]	; (80082a4 <xTaskIncrementTick+0x170>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3301      	adds	r3, #1
 800826c:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <xTaskIncrementTick+0x170>)
 800826e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008270:	697b      	ldr	r3, [r7, #20]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	200018ac 	.word	0x200018ac
 8008280:	20001888 	.word	0x20001888
 8008284:	2000183c 	.word	0x2000183c
 8008288:	20001840 	.word	0x20001840
 800828c:	2000189c 	.word	0x2000189c
 8008290:	200018a4 	.word	0x200018a4
 8008294:	2000188c 	.word	0x2000188c
 8008298:	200013b4 	.word	0x200013b4
 800829c:	200013b0 	.word	0x200013b0
 80082a0:	20001898 	.word	0x20001898
 80082a4:	20001894 	.word	0x20001894

080082a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ae:	4b33      	ldr	r3, [pc, #204]	; (800837c <vTaskSwitchContext+0xd4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082b6:	4b32      	ldr	r3, [pc, #200]	; (8008380 <vTaskSwitchContext+0xd8>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082bc:	e05a      	b.n	8008374 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 80082be:	4b30      	ldr	r3, [pc, #192]	; (8008380 <vTaskSwitchContext+0xd8>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80082c4:	f7f8 ffad 	bl	8001222 <getRunTimeCounterValue>
 80082c8:	4603      	mov	r3, r0
 80082ca:	4a2e      	ldr	r2, [pc, #184]	; (8008384 <vTaskSwitchContext+0xdc>)
 80082cc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80082ce:	4b2d      	ldr	r3, [pc, #180]	; (8008384 <vTaskSwitchContext+0xdc>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <vTaskSwitchContext+0xe0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d909      	bls.n	80082ee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80082da:	4b2c      	ldr	r3, [pc, #176]	; (800838c <vTaskSwitchContext+0xe4>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082e0:	4a28      	ldr	r2, [pc, #160]	; (8008384 <vTaskSwitchContext+0xdc>)
 80082e2:	6810      	ldr	r0, [r2, #0]
 80082e4:	4a28      	ldr	r2, [pc, #160]	; (8008388 <vTaskSwitchContext+0xe0>)
 80082e6:	6812      	ldr	r2, [r2, #0]
 80082e8:	1a82      	subs	r2, r0, r2
 80082ea:	440a      	add	r2, r1
 80082ec:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80082ee:	4b25      	ldr	r3, [pc, #148]	; (8008384 <vTaskSwitchContext+0xdc>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a25      	ldr	r2, [pc, #148]	; (8008388 <vTaskSwitchContext+0xe0>)
 80082f4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	4b26      	ldr	r3, [pc, #152]	; (8008390 <vTaskSwitchContext+0xe8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e010      	b.n	8008320 <vTaskSwitchContext+0x78>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10a      	bne.n	800831a <vTaskSwitchContext+0x72>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	607b      	str	r3, [r7, #4]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <vTaskSwitchContext+0x70>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3b01      	subs	r3, #1
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	491c      	ldr	r1, [pc, #112]	; (8008394 <vTaskSwitchContext+0xec>)
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	440b      	add	r3, r1
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0e4      	beq.n	80082fe <vTaskSwitchContext+0x56>
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4613      	mov	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4a15      	ldr	r2, [pc, #84]	; (8008394 <vTaskSwitchContext+0xec>)
 8008340:	4413      	add	r3, r2
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	3308      	adds	r3, #8
 8008356:	429a      	cmp	r2, r3
 8008358:	d104      	bne.n	8008364 <vTaskSwitchContext+0xbc>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	605a      	str	r2, [r3, #4]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	4a08      	ldr	r2, [pc, #32]	; (800838c <vTaskSwitchContext+0xe4>)
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	4a08      	ldr	r2, [pc, #32]	; (8008390 <vTaskSwitchContext+0xe8>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6013      	str	r3, [r2, #0]
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	200018ac 	.word	0x200018ac
 8008380:	20001898 	.word	0x20001898
 8008384:	200018b4 	.word	0x200018b4
 8008388:	200018b0 	.word	0x200018b0
 800838c:	200013b0 	.word	0x200013b0
 8008390:	2000188c 	.word	0x2000188c
 8008394:	200013b4 	.word	0x200013b4

08008398 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	60fb      	str	r3, [r7, #12]
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <vTaskPlaceOnEventList+0x44>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3318      	adds	r3, #24
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fe fb6b 	bl	8006aa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083cc:	2101      	movs	r1, #1
 80083ce:	6838      	ldr	r0, [r7, #0]
 80083d0:	f000 fb7a 	bl	8008ac8 <prvAddCurrentTaskToDelayedList>
}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200013b0 	.word	0x200013b0

080083e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	617b      	str	r3, [r7, #20]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <vTaskPlaceOnEventListRestricted+0x54>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3318      	adds	r3, #24
 800840e:	4619      	mov	r1, r3
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7fe fb22 	bl	8006a5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	68b8      	ldr	r0, [r7, #8]
 8008426:	f000 fb4f 	bl	8008ac8 <prvAddCurrentTaskToDelayedList>
	}
 800842a:	bf00      	nop
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200013b0 	.word	0x200013b0

08008438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	3318      	adds	r3, #24
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fb53 	bl	8006b14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800846e:	4b1e      	ldr	r3, [pc, #120]	; (80084e8 <xTaskRemoveFromEventList+0xb0>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d11d      	bne.n	80084b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	3304      	adds	r3, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fb4a 	bl	8006b14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4b19      	ldr	r3, [pc, #100]	; (80084ec <xTaskRemoveFromEventList+0xb4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d903      	bls.n	8008494 <xTaskRemoveFromEventList+0x5c>
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	4a16      	ldr	r2, [pc, #88]	; (80084ec <xTaskRemoveFromEventList+0xb4>)
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <xTaskRemoveFromEventList+0xb8>)
 80084a2:	441a      	add	r2, r3
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7fe fad5 	bl	8006a5a <vListInsertEnd>
 80084b0:	e005      	b.n	80084be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3318      	adds	r3, #24
 80084b6:	4619      	mov	r1, r3
 80084b8:	480e      	ldr	r0, [pc, #56]	; (80084f4 <xTaskRemoveFromEventList+0xbc>)
 80084ba:	f7fe face 	bl	8006a5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c2:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <xTaskRemoveFromEventList+0xc0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d905      	bls.n	80084d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <xTaskRemoveFromEventList+0xc4>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	e001      	b.n	80084dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084dc:	697b      	ldr	r3, [r7, #20]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	200018ac 	.word	0x200018ac
 80084ec:	2000188c 	.word	0x2000188c
 80084f0:	200013b4 	.word	0x200013b4
 80084f4:	20001844 	.word	0x20001844
 80084f8:	200013b0 	.word	0x200013b0
 80084fc:	20001898 	.word	0x20001898

08008500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <vTaskInternalSetTimeOutState+0x24>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <vTaskInternalSetTimeOutState+0x28>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	2000189c 	.word	0x2000189c
 8008528:	20001888 	.word	0x20001888

0800852c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	613b      	str	r3, [r7, #16]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	60fb      	str	r3, [r7, #12]
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800856e:	f000 ff79 	bl	8009464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008572:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <xTaskCheckForTimeOut+0xbc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	69ba      	ldr	r2, [r7, #24]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858a:	d102      	bne.n	8008592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800858c:	2300      	movs	r3, #0
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	e023      	b.n	80085da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	4b15      	ldr	r3, [pc, #84]	; (80085ec <xTaskCheckForTimeOut+0xc0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d007      	beq.n	80085ae <xTaskCheckForTimeOut+0x82>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d302      	bcc.n	80085ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	61fb      	str	r3, [r7, #28]
 80085ac:	e015      	b.n	80085da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d20b      	bcs.n	80085d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff ff9b 	bl	8008500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	e004      	b.n	80085da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085da:	f000 ff73 	bl	80094c4 <vPortExitCritical>

	return xReturn;
 80085de:	69fb      	ldr	r3, [r7, #28]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	20001888 	.word	0x20001888
 80085ec:	2000189c 	.word	0x2000189c

080085f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085f4:	4b03      	ldr	r3, [pc, #12]	; (8008604 <vTaskMissedYield+0x14>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
}
 80085fa:	bf00      	nop
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20001898 	.word	0x20001898

08008608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008610:	f000 f852 	bl	80086b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008614:	4b06      	ldr	r3, [pc, #24]	; (8008630 <prvIdleTask+0x28>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d9f9      	bls.n	8008610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800861c:	4b05      	ldr	r3, [pc, #20]	; (8008634 <prvIdleTask+0x2c>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800862c:	e7f0      	b.n	8008610 <prvIdleTask+0x8>
 800862e:	bf00      	nop
 8008630:	200013b4 	.word	0x200013b4
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800863e:	2300      	movs	r3, #0
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	e00c      	b.n	800865e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4a12      	ldr	r2, [pc, #72]	; (8008698 <prvInitialiseTaskLists+0x60>)
 8008650:	4413      	add	r3, r2
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe f9d4 	bl	8006a00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3301      	adds	r3, #1
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b37      	cmp	r3, #55	; 0x37
 8008662:	d9ef      	bls.n	8008644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008664:	480d      	ldr	r0, [pc, #52]	; (800869c <prvInitialiseTaskLists+0x64>)
 8008666:	f7fe f9cb 	bl	8006a00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800866a:	480d      	ldr	r0, [pc, #52]	; (80086a0 <prvInitialiseTaskLists+0x68>)
 800866c:	f7fe f9c8 	bl	8006a00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008670:	480c      	ldr	r0, [pc, #48]	; (80086a4 <prvInitialiseTaskLists+0x6c>)
 8008672:	f7fe f9c5 	bl	8006a00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008676:	480c      	ldr	r0, [pc, #48]	; (80086a8 <prvInitialiseTaskLists+0x70>)
 8008678:	f7fe f9c2 	bl	8006a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800867c:	480b      	ldr	r0, [pc, #44]	; (80086ac <prvInitialiseTaskLists+0x74>)
 800867e:	f7fe f9bf 	bl	8006a00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008682:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <prvInitialiseTaskLists+0x78>)
 8008684:	4a05      	ldr	r2, [pc, #20]	; (800869c <prvInitialiseTaskLists+0x64>)
 8008686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <prvInitialiseTaskLists+0x7c>)
 800868a:	4a05      	ldr	r2, [pc, #20]	; (80086a0 <prvInitialiseTaskLists+0x68>)
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200013b4 	.word	0x200013b4
 800869c:	20001814 	.word	0x20001814
 80086a0:	20001828 	.word	0x20001828
 80086a4:	20001844 	.word	0x20001844
 80086a8:	20001858 	.word	0x20001858
 80086ac:	20001870 	.word	0x20001870
 80086b0:	2000183c 	.word	0x2000183c
 80086b4:	20001840 	.word	0x20001840

080086b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086be:	e019      	b.n	80086f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086c0:	f000 fed0 	bl	8009464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c4:	4b10      	ldr	r3, [pc, #64]	; (8008708 <prvCheckTasksWaitingTermination+0x50>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fa1f 	bl	8006b14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <prvCheckTasksWaitingTermination+0x54>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3b01      	subs	r3, #1
 80086dc:	4a0b      	ldr	r2, [pc, #44]	; (800870c <prvCheckTasksWaitingTermination+0x54>)
 80086de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086e0:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <prvCheckTasksWaitingTermination+0x58>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	4a0a      	ldr	r2, [pc, #40]	; (8008710 <prvCheckTasksWaitingTermination+0x58>)
 80086e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086ea:	f000 feeb 	bl	80094c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f810 	bl	8008714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086f4:	4b06      	ldr	r3, [pc, #24]	; (8008710 <prvCheckTasksWaitingTermination+0x58>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e1      	bne.n	80086c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20001858 	.word	0x20001858
 800870c:	20001884 	.word	0x20001884
 8008710:	2000186c 	.word	0x2000186c

08008714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f888 	bl	8009840 <vPortFree>
				vPortFree( pxTCB );
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f001 f885 	bl	8009840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008736:	e018      	b.n	800876a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800873e:	2b01      	cmp	r3, #1
 8008740:	d103      	bne.n	800874a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f87c 	bl	8009840 <vPortFree>
	}
 8008748:	e00f      	b.n	800876a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008750:	2b02      	cmp	r3, #2
 8008752:	d00a      	beq.n	800876a <prvDeleteTCB+0x56>
	__asm volatile
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	60fb      	str	r3, [r7, #12]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <prvDeleteTCB+0x54>
	}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	4b0c      	ldr	r3, [pc, #48]	; (80087ac <prvResetNextTaskUnblockTime+0x38>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <prvResetNextTaskUnblockTime+0x3c>)
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800878c:	e008      	b.n	80087a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <prvResetNextTaskUnblockTime+0x38>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <prvResetNextTaskUnblockTime+0x3c>)
 800879e:	6013      	str	r3, [r2, #0]
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	2000183c 	.word	0x2000183c
 80087b0:	200018a4 	.word	0x200018a4

080087b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <xTaskGetSchedulerState+0x34>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087c2:	2301      	movs	r3, #1
 80087c4:	607b      	str	r3, [r7, #4]
 80087c6:	e008      	b.n	80087da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c8:	4b08      	ldr	r3, [pc, #32]	; (80087ec <xTaskGetSchedulerState+0x38>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d102      	bne.n	80087d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087d0:	2302      	movs	r3, #2
 80087d2:	607b      	str	r3, [r7, #4]
 80087d4:	e001      	b.n	80087da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087d6:	2300      	movs	r3, #0
 80087d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087da:	687b      	ldr	r3, [r7, #4]
	}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20001890 	.word	0x20001890
 80087ec:	200018ac 	.word	0x200018ac

080087f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d051      	beq.n	80088aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880a:	4b2a      	ldr	r3, [pc, #168]	; (80088b4 <xTaskPriorityInherit+0xc4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	429a      	cmp	r2, r3
 8008812:	d241      	bcs.n	8008898 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	db06      	blt.n	800882a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800881c:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <xTaskPriorityInherit+0xc4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6959      	ldr	r1, [r3, #20]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4a1f      	ldr	r2, [pc, #124]	; (80088b8 <xTaskPriorityInherit+0xc8>)
 800883c:	4413      	add	r3, r2
 800883e:	4299      	cmp	r1, r3
 8008840:	d122      	bne.n	8008888 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	3304      	adds	r3, #4
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe f964 	bl	8006b14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800884c:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <xTaskPriorityInherit+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885a:	4b18      	ldr	r3, [pc, #96]	; (80088bc <xTaskPriorityInherit+0xcc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	429a      	cmp	r2, r3
 8008860:	d903      	bls.n	800886a <xTaskPriorityInherit+0x7a>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	4a15      	ldr	r2, [pc, #84]	; (80088bc <xTaskPriorityInherit+0xcc>)
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4a10      	ldr	r2, [pc, #64]	; (80088b8 <xTaskPriorityInherit+0xc8>)
 8008878:	441a      	add	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fe f8ea 	bl	8006a5a <vListInsertEnd>
 8008886:	e004      	b.n	8008892 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <xTaskPriorityInherit+0xc4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	e008      	b.n	80088aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskPriorityInherit+0xc4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d201      	bcs.n	80088aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088a6:	2301      	movs	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
	}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200013b0 	.word	0x200013b0
 80088b8:	200013b4 	.word	0x200013b4
 80088bc:	2000188c 	.word	0x2000188c

080088c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d056      	beq.n	8008984 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088d6:	4b2e      	ldr	r3, [pc, #184]	; (8008990 <xTaskPriorityDisinherit+0xd0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d00a      	beq.n	80088f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10a      	bne.n	8008914 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	60bb      	str	r3, [r7, #8]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008918:	1e5a      	subs	r2, r3, #1
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008926:	429a      	cmp	r2, r3
 8008928:	d02c      	beq.n	8008984 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892e:	2b00      	cmp	r3, #0
 8008930:	d128      	bne.n	8008984 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	3304      	adds	r3, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f7fe f8ec 	bl	8006b14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <xTaskPriorityDisinherit+0xd4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d903      	bls.n	8008964 <xTaskPriorityDisinherit+0xa4>
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	4a0c      	ldr	r2, [pc, #48]	; (8008994 <xTaskPriorityDisinherit+0xd4>)
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a09      	ldr	r2, [pc, #36]	; (8008998 <xTaskPriorityDisinherit+0xd8>)
 8008972:	441a      	add	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f7fe f86d 	bl	8006a5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008980:	2301      	movs	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008984:	697b      	ldr	r3, [r7, #20]
	}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200013b0 	.word	0x200013b0
 8008994:	2000188c 	.word	0x2000188c
 8008998:	200013b4 	.word	0x200013b4

0800899c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80089aa:	2301      	movs	r3, #1
 80089ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d06a      	beq.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10a      	bne.n	80089d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d902      	bls.n	80089e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e002      	b.n	80089e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d04b      	beq.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d146      	bne.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089fc:	4b25      	ldr	r3, [pc, #148]	; (8008a94 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d10a      	bne.n	8008a1c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	db04      	blt.n	8008a3a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	6959      	ldr	r1, [r3, #20]
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4a13      	ldr	r2, [pc, #76]	; (8008a98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a4a:	4413      	add	r3, r2
 8008a4c:	4299      	cmp	r1, r3
 8008a4e:	d11c      	bne.n	8008a8a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	3304      	adds	r3, #4
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe f85d 	bl	8006b14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d903      	bls.n	8008a6e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	4a0c      	ldr	r2, [pc, #48]	; (8008a9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a07      	ldr	r2, [pc, #28]	; (8008a98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008a7c:	441a      	add	r2, r3
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fd ffe8 	bl	8006a5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a8a:	bf00      	nop
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200013b0 	.word	0x200013b0
 8008a98:	200013b4 	.word	0x200013b4
 8008a9c:	2000188c 	.word	0x2000188c

08008aa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d004      	beq.n	8008ab6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ab2:	3201      	adds	r2, #1
 8008ab4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ab6:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
	}
 8008aba:	4618      	mov	r0, r3
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	200013b0 	.word	0x200013b0

08008ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ad2:	4b21      	ldr	r3, [pc, #132]	; (8008b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ad8:	4b20      	ldr	r3, [pc, #128]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fe f818 	bl	8006b14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d10a      	bne.n	8008b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d007      	beq.n	8008b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af2:	4b1a      	ldr	r3, [pc, #104]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4819      	ldr	r0, [pc, #100]	; (8008b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8008afc:	f7fd ffad 	bl	8006a5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b00:	e026      	b.n	8008b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4413      	add	r3, r2
 8008b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d209      	bcs.n	8008b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7fd ffbb 	bl	8006aa2 <vListInsert>
}
 8008b2c:	e010      	b.n	8008b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f7fd ffb1 	bl	8006aa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d202      	bcs.n	8008b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b4a:	4a08      	ldr	r2, [pc, #32]	; (8008b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	6013      	str	r3, [r2, #0]
}
 8008b50:	bf00      	nop
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20001888 	.word	0x20001888
 8008b5c:	200013b0 	.word	0x200013b0
 8008b60:	20001870 	.word	0x20001870
 8008b64:	20001840 	.word	0x20001840
 8008b68:	2000183c 	.word	0x2000183c
 8008b6c:	200018a4 	.word	0x200018a4

08008b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	; 0x28
 8008b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b7a:	f000 fb07 	bl	800918c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	; (8008bf0 <xTimerCreateTimerTask+0x80>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d021      	beq.n	8008bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b8e:	1d3a      	adds	r2, r7, #4
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	f107 030c 	add.w	r3, r7, #12
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fd ff17 	bl	80069cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	9202      	str	r2, [sp, #8]
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	2302      	movs	r3, #2
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2300      	movs	r3, #0
 8008bae:	460a      	mov	r2, r1
 8008bb0:	4910      	ldr	r1, [pc, #64]	; (8008bf4 <xTimerCreateTimerTask+0x84>)
 8008bb2:	4811      	ldr	r0, [pc, #68]	; (8008bf8 <xTimerCreateTimerTask+0x88>)
 8008bb4:	f7fe ffc2 	bl	8007b3c <xTaskCreateStatic>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4a10      	ldr	r2, [pc, #64]	; (8008bfc <xTimerCreateTimerTask+0x8c>)
 8008bbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bbe:	4b0f      	ldr	r3, [pc, #60]	; (8008bfc <xTimerCreateTimerTask+0x8c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	613b      	str	r3, [r7, #16]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200018e8 	.word	0x200018e8
 8008bf4:	08009d98 	.word	0x08009d98
 8008bf8:	08008d35 	.word	0x08008d35
 8008bfc:	200018ec 	.word	0x200018ec

08008c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	; 0x28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c2e:	4b1a      	ldr	r3, [pc, #104]	; (8008c98 <xTimerGenericCommand+0x98>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d02a      	beq.n	8008c8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b05      	cmp	r3, #5
 8008c46:	dc18      	bgt.n	8008c7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c48:	f7ff fdb4 	bl	80087b4 <xTaskGetSchedulerState>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d109      	bne.n	8008c66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c52:	4b11      	ldr	r3, [pc, #68]	; (8008c98 <xTimerGenericCommand+0x98>)
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	f107 0110 	add.w	r1, r7, #16
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	f7fe f8f3 	bl	8006e48 <xQueueGenericSend>
 8008c62:	6278      	str	r0, [r7, #36]	; 0x24
 8008c64:	e012      	b.n	8008c8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <xTimerGenericCommand+0x98>)
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	f107 0110 	add.w	r1, r7, #16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7fe f8e9 	bl	8006e48 <xQueueGenericSend>
 8008c76:	6278      	str	r0, [r7, #36]	; 0x24
 8008c78:	e008      	b.n	8008c8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c7a:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <xTimerGenericCommand+0x98>)
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f107 0110 	add.w	r1, r7, #16
 8008c82:	2300      	movs	r3, #0
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	f7fe f9dd 	bl	8007044 <xQueueGenericSendFromISR>
 8008c8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	; 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200018e8 	.word	0x200018e8

08008c9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca6:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <prvProcessExpiredTimer+0x94>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd ff2d 	bl	8006b14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d022      	beq.n	8008d0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	18d1      	adds	r1, r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	6978      	ldr	r0, [r7, #20]
 8008cd6:	f000 f8d1 	bl	8008e7c <prvInsertTimerInActiveList>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01f      	beq.n	8008d20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f7ff ff88 	bl	8008c00 <xTimerGenericCommand>
 8008cf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d113      	bne.n	8008d20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60fb      	str	r3, [r7, #12]
}
 8008d0a:	bf00      	nop
 8008d0c:	e7fe      	b.n	8008d0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d14:	f023 0301 	bic.w	r3, r3, #1
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	6978      	ldr	r0, [r7, #20]
 8008d26:	4798      	blx	r3
}
 8008d28:	bf00      	nop
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	200018e0 	.word	0x200018e0

08008d34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d3c:	f107 0308 	add.w	r3, r7, #8
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 f857 	bl	8008df4 <prvGetNextExpireTime>
 8008d46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f803 	bl	8008d58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d52:	f000 f8d5 	bl	8008f00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d56:	e7f1      	b.n	8008d3c <prvTimerTask+0x8>

08008d58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d62:	f7ff f92b 	bl	8007fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f866 	bl	8008e3c <prvSampleTimeNow>
 8008d70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d130      	bne.n	8008dda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <prvProcessTimerOrBlockTask+0x3c>
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d806      	bhi.n	8008d94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d86:	f7ff f927 	bl	8007fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d8a:	68f9      	ldr	r1, [r7, #12]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff85 	bl	8008c9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d92:	e024      	b.n	8008dde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <prvProcessTimerOrBlockTask+0x90>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <prvProcessTimerOrBlockTask+0x50>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <prvProcessTimerOrBlockTask+0x52>
 8008da8:	2300      	movs	r3, #0
 8008daa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008dac:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <prvProcessTimerOrBlockTask+0x94>)
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	4619      	mov	r1, r3
 8008dba:	f7fe fe8b 	bl	8007ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dbe:	f7ff f90b 	bl	8007fd8 <xTaskResumeAll>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <prvProcessTimerOrBlockTask+0x98>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
}
 8008dd8:	e001      	b.n	8008dde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008dda:	f7ff f8fd 	bl	8007fd8 <xTaskResumeAll>
}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	200018e4 	.word	0x200018e4
 8008dec:	200018e8 	.word	0x200018e8
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <prvGetNextExpireTime+0x44>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <prvGetNextExpireTime+0x16>
 8008e06:	2201      	movs	r2, #1
 8008e08:	e000      	b.n	8008e0c <prvGetNextExpireTime+0x18>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e18:	4b07      	ldr	r3, [pc, #28]	; (8008e38 <prvGetNextExpireTime+0x44>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	e001      	b.n	8008e28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e28:	68fb      	ldr	r3, [r7, #12]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	200018e0 	.word	0x200018e0

08008e3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e44:	f7ff f966 	bl	8008114 <xTaskGetTickCount>
 8008e48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <prvSampleTimeNow+0x3c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d205      	bcs.n	8008e60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e54:	f000 f936 	bl	80090c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e002      	b.n	8008e66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e66:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <prvSampleTimeNow+0x3c>)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	200018f0 	.word	0x200018f0

08008e7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d812      	bhi.n	8008ec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	1ad2      	subs	r2, r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e01b      	b.n	8008eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <prvInsertTimerInActiveList+0x7c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	f7fd fdee 	bl	8006aa2 <vListInsert>
 8008ec6:	e012      	b.n	8008eee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d206      	bcs.n	8008ede <prvInsertTimerInActiveList+0x62>
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	e007      	b.n	8008eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <prvInsertTimerInActiveList+0x80>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	f7fd fdda 	bl	8006aa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eee:	697b      	ldr	r3, [r7, #20]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200018e4 	.word	0x200018e4
 8008efc:	200018e0 	.word	0x200018e0

08008f00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f06:	e0ca      	b.n	800909e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da18      	bge.n	8008f40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f0e:	1d3b      	adds	r3, r7, #4
 8008f10:	3304      	adds	r3, #4
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	61fb      	str	r3, [r7, #28]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	6850      	ldr	r0, [r2, #4]
 8008f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f3a:	6892      	ldr	r2, [r2, #8]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f2c0 80aa 	blt.w	800909c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fd fddb 	bl	8006b14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f5e:	463b      	mov	r3, r7
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff ff6b 	bl	8008e3c <prvSampleTimeNow>
 8008f66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	f200 8097 	bhi.w	800909e <prvProcessReceivedCommands+0x19e>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <prvProcessReceivedCommands+0x78>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fa1 	.word	0x08008fa1
 8008f80:	08008fa1 	.word	0x08008fa1
 8008f84:	08009015 	.word	0x08009015
 8008f88:	08009029 	.word	0x08009029
 8008f8c:	08009073 	.word	0x08009073
 8008f90:	08008fa1 	.word	0x08008fa1
 8008f94:	08008fa1 	.word	0x08008fa1
 8008f98:	08009015 	.word	0x08009015
 8008f9c:	08009029 	.word	0x08009029
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	18d1      	adds	r1, r2, r3
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc0:	f7ff ff5c 	bl	8008e7c <prvInsertTimerInActiveList>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d069      	beq.n	800909e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	6a1b      	ldr	r3, [r3, #32]
 8008fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd8:	f003 0304 	and.w	r3, r3, #4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d05e      	beq.n	800909e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	441a      	add	r2, r3
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2300      	movs	r3, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ff2:	f7ff fe05 	bl	8008c00 <xTimerGenericCommand>
 8008ff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d14f      	bne.n	800909e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	61bb      	str	r3, [r7, #24]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800901a:	f023 0301 	bic.w	r3, r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009026:	e03a      	b.n	800909e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	b2da      	uxtb	r2, r3
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	617b      	str	r3, [r7, #20]
}
 800905a:	bf00      	nop
 800905c:	e7fe      	b.n	800905c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	18d1      	adds	r1, r2, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906c:	f7ff ff06 	bl	8008e7c <prvInsertTimerInActiveList>
					break;
 8009070:	e015      	b.n	800909e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009082:	f000 fbdd 	bl	8009840 <vPortFree>
 8009086:	e00a      	b.n	800909e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800909a:	e000      	b.n	800909e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800909c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800909e:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <prvProcessReceivedCommands+0x1c0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	1d39      	adds	r1, r7, #4
 80090a4:	2200      	movs	r2, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe f8f4 	bl	8007294 <xQueueReceive>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f47f af2a 	bne.w	8008f08 <prvProcessReceivedCommands+0x8>
	}
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3730      	adds	r7, #48	; 0x30
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200018e8 	.word	0x200018e8

080090c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090ca:	e048      	b.n	800915e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090cc:	4b2d      	ldr	r3, [pc, #180]	; (8009184 <prvSwitchTimerLists+0xc0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b2b      	ldr	r3, [pc, #172]	; (8009184 <prvSwitchTimerLists+0xc0>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fd fd15 	bl	8006b14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d02e      	beq.n	800915e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4413      	add	r3, r2
 8009108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	429a      	cmp	r2, r3
 8009110:	d90e      	bls.n	8009130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800911e:	4b19      	ldr	r3, [pc, #100]	; (8009184 <prvSwitchTimerLists+0xc0>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fd fcba 	bl	8006aa2 <vListInsert>
 800912e:	e016      	b.n	800915e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009130:	2300      	movs	r3, #0
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	2100      	movs	r1, #0
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fd60 	bl	8008c00 <xTimerGenericCommand>
 8009140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	603b      	str	r3, [r7, #0]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <prvSwitchTimerLists+0xc0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1b1      	bne.n	80090cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <prvSwitchTimerLists+0xc0>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <prvSwitchTimerLists+0xc4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a04      	ldr	r2, [pc, #16]	; (8009184 <prvSwitchTimerLists+0xc0>)
 8009174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009176:	4a04      	ldr	r2, [pc, #16]	; (8009188 <prvSwitchTimerLists+0xc4>)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	6013      	str	r3, [r2, #0]
}
 800917c:	bf00      	nop
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	200018e0 	.word	0x200018e0
 8009188:	200018e4 	.word	0x200018e4

0800918c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009192:	f000 f967 	bl	8009464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <prvCheckForValidListAndQueue+0x60>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d120      	bne.n	80091e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800919e:	4814      	ldr	r0, [pc, #80]	; (80091f0 <prvCheckForValidListAndQueue+0x64>)
 80091a0:	f7fd fc2e 	bl	8006a00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091a4:	4813      	ldr	r0, [pc, #76]	; (80091f4 <prvCheckForValidListAndQueue+0x68>)
 80091a6:	f7fd fc2b 	bl	8006a00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091aa:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <prvCheckForValidListAndQueue+0x6c>)
 80091ac:	4a10      	ldr	r2, [pc, #64]	; (80091f0 <prvCheckForValidListAndQueue+0x64>)
 80091ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091b0:	4b12      	ldr	r3, [pc, #72]	; (80091fc <prvCheckForValidListAndQueue+0x70>)
 80091b2:	4a10      	ldr	r2, [pc, #64]	; (80091f4 <prvCheckForValidListAndQueue+0x68>)
 80091b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091b6:	2300      	movs	r3, #0
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	4b11      	ldr	r3, [pc, #68]	; (8009200 <prvCheckForValidListAndQueue+0x74>)
 80091bc:	4a11      	ldr	r2, [pc, #68]	; (8009204 <prvCheckForValidListAndQueue+0x78>)
 80091be:	2110      	movs	r1, #16
 80091c0:	200a      	movs	r0, #10
 80091c2:	f7fd fd39 	bl	8006c38 <xQueueGenericCreateStatic>
 80091c6:	4603      	mov	r3, r0
 80091c8:	4a08      	ldr	r2, [pc, #32]	; (80091ec <prvCheckForValidListAndQueue+0x60>)
 80091ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091cc:	4b07      	ldr	r3, [pc, #28]	; (80091ec <prvCheckForValidListAndQueue+0x60>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091d4:	4b05      	ldr	r3, [pc, #20]	; (80091ec <prvCheckForValidListAndQueue+0x60>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	490b      	ldr	r1, [pc, #44]	; (8009208 <prvCheckForValidListAndQueue+0x7c>)
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fe fc50 	bl	8007a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091e0:	f000 f970 	bl	80094c4 <vPortExitCritical>
}
 80091e4:	bf00      	nop
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200018e8 	.word	0x200018e8
 80091f0:	200018b8 	.word	0x200018b8
 80091f4:	200018cc 	.word	0x200018cc
 80091f8:	200018e0 	.word	0x200018e0
 80091fc:	200018e4 	.word	0x200018e4
 8009200:	20001994 	.word	0x20001994
 8009204:	200018f4 	.word	0x200018f4
 8009208:	08009da0 	.word	0x08009da0

0800920c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3b04      	subs	r3, #4
 800921c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3b04      	subs	r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3b04      	subs	r3, #4
 800923a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800923c:	4a0c      	ldr	r2, [pc, #48]	; (8009270 <pxPortInitialiseStack+0x64>)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3b14      	subs	r3, #20
 8009246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3b04      	subs	r3, #4
 8009252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f06f 0202 	mvn.w	r2, #2
 800925a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3b20      	subs	r3, #32
 8009260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009262:	68fb      	ldr	r3, [r7, #12]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	08009275 	.word	0x08009275

08009274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <prvTaskExitError+0x54>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d00a      	beq.n	800929e <prvTaskExitError+0x2a>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	60fb      	str	r3, [r7, #12]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <prvTaskExitError+0x28>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60bb      	str	r3, [r7, #8]
}
 80092b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092b2:	bf00      	nop
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0fc      	beq.n	80092b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20000664 	.word	0x20000664
 80092cc:	00000000 	.word	0x00000000

080092d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092d0:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <pxCurrentTCBConst2>)
 80092d2:	6819      	ldr	r1, [r3, #0]
 80092d4:	6808      	ldr	r0, [r1, #0]
 80092d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092da:	f380 8809 	msr	PSP, r0
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f04f 0000 	mov.w	r0, #0
 80092e6:	f380 8811 	msr	BASEPRI, r0
 80092ea:	4770      	bx	lr
 80092ec:	f3af 8000 	nop.w

080092f0 <pxCurrentTCBConst2>:
 80092f0:	200013b0 	.word	0x200013b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092f8:	4808      	ldr	r0, [pc, #32]	; (800931c <prvPortStartFirstTask+0x24>)
 80092fa:	6800      	ldr	r0, [r0, #0]
 80092fc:	6800      	ldr	r0, [r0, #0]
 80092fe:	f380 8808 	msr	MSP, r0
 8009302:	f04f 0000 	mov.w	r0, #0
 8009306:	f380 8814 	msr	CONTROL, r0
 800930a:	b662      	cpsie	i
 800930c:	b661      	cpsie	f
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	df00      	svc	0
 8009318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800931a:	bf00      	nop
 800931c:	e000ed08 	.word	0xe000ed08

08009320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009326:	4b46      	ldr	r3, [pc, #280]	; (8009440 <xPortStartScheduler+0x120>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a46      	ldr	r2, [pc, #280]	; (8009444 <xPortStartScheduler+0x124>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d10a      	bne.n	8009346 <xPortStartScheduler+0x26>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	613b      	str	r3, [r7, #16]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009346:	4b3e      	ldr	r3, [pc, #248]	; (8009440 <xPortStartScheduler+0x120>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a3f      	ldr	r2, [pc, #252]	; (8009448 <xPortStartScheduler+0x128>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d10a      	bne.n	8009366 <xPortStartScheduler+0x46>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	60fb      	str	r3, [r7, #12]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009366:	4b39      	ldr	r3, [pc, #228]	; (800944c <xPortStartScheduler+0x12c>)
 8009368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	22ff      	movs	r2, #255	; 0xff
 8009376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009388:	b2da      	uxtb	r2, r3
 800938a:	4b31      	ldr	r3, [pc, #196]	; (8009450 <xPortStartScheduler+0x130>)
 800938c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800938e:	4b31      	ldr	r3, [pc, #196]	; (8009454 <xPortStartScheduler+0x134>)
 8009390:	2207      	movs	r2, #7
 8009392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009394:	e009      	b.n	80093aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <xPortStartScheduler+0x134>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3b01      	subs	r3, #1
 800939c:	4a2d      	ldr	r2, [pc, #180]	; (8009454 <xPortStartScheduler+0x134>)
 800939e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d0ef      	beq.n	8009396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093b6:	4b27      	ldr	r3, [pc, #156]	; (8009454 <xPortStartScheduler+0x134>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f1c3 0307 	rsb	r3, r3, #7
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d00a      	beq.n	80093d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80093c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	60bb      	str	r3, [r7, #8]
}
 80093d4:	bf00      	nop
 80093d6:	e7fe      	b.n	80093d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093d8:	4b1e      	ldr	r3, [pc, #120]	; (8009454 <xPortStartScheduler+0x134>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <xPortStartScheduler+0x134>)
 80093e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <xPortStartScheduler+0x134>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093ea:	4a1a      	ldr	r2, [pc, #104]	; (8009454 <xPortStartScheduler+0x134>)
 80093ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093f6:	4b18      	ldr	r3, [pc, #96]	; (8009458 <xPortStartScheduler+0x138>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a17      	ldr	r2, [pc, #92]	; (8009458 <xPortStartScheduler+0x138>)
 80093fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <xPortStartScheduler+0x138>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a14      	ldr	r2, [pc, #80]	; (8009458 <xPortStartScheduler+0x138>)
 8009408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800940c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800940e:	f000 f8dd 	bl	80095cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009412:	4b12      	ldr	r3, [pc, #72]	; (800945c <xPortStartScheduler+0x13c>)
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009418:	f000 f8fc 	bl	8009614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <xPortStartScheduler+0x140>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0f      	ldr	r2, [pc, #60]	; (8009460 <xPortStartScheduler+0x140>)
 8009422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009428:	f7ff ff66 	bl	80092f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800942c:	f7fe ff3c 	bl	80082a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009430:	f7ff ff20 	bl	8009274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	e000ed00 	.word	0xe000ed00
 8009444:	410fc271 	.word	0x410fc271
 8009448:	410fc270 	.word	0x410fc270
 800944c:	e000e400 	.word	0xe000e400
 8009450:	200019e4 	.word	0x200019e4
 8009454:	200019e8 	.word	0x200019e8
 8009458:	e000ed20 	.word	0xe000ed20
 800945c:	20000664 	.word	0x20000664
 8009460:	e000ef34 	.word	0xe000ef34

08009464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	607b      	str	r3, [r7, #4]
}
 800947c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <vPortEnterCritical+0x58>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	4a0d      	ldr	r2, [pc, #52]	; (80094bc <vPortEnterCritical+0x58>)
 8009486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <vPortEnterCritical+0x58>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d10f      	bne.n	80094b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <vPortEnterCritical+0x5c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	603b      	str	r3, [r7, #0]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <vPortEnterCritical+0x4a>
	}
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000664 	.word	0x20000664
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094ca:	4b12      	ldr	r3, [pc, #72]	; (8009514 <vPortExitCritical+0x50>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <vPortExitCritical+0x24>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	607b      	str	r3, [r7, #4]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094e8:	4b0a      	ldr	r3, [pc, #40]	; (8009514 <vPortExitCritical+0x50>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4a09      	ldr	r2, [pc, #36]	; (8009514 <vPortExitCritical+0x50>)
 80094f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094f2:	4b08      	ldr	r3, [pc, #32]	; (8009514 <vPortExitCritical+0x50>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d105      	bne.n	8009506 <vPortExitCritical+0x42>
 80094fa:	2300      	movs	r3, #0
 80094fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	f383 8811 	msr	BASEPRI, r3
}
 8009504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	20000664 	.word	0x20000664
	...

08009520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009520:	f3ef 8009 	mrs	r0, PSP
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	4b15      	ldr	r3, [pc, #84]	; (8009580 <pxCurrentTCBConst>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	f01e 0f10 	tst.w	lr, #16
 8009530:	bf08      	it	eq
 8009532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953a:	6010      	str	r0, [r2, #0]
 800953c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009544:	f380 8811 	msr	BASEPRI, r0
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f7fe feaa 	bl	80082a8 <vTaskSwitchContext>
 8009554:	f04f 0000 	mov.w	r0, #0
 8009558:	f380 8811 	msr	BASEPRI, r0
 800955c:	bc09      	pop	{r0, r3}
 800955e:	6819      	ldr	r1, [r3, #0]
 8009560:	6808      	ldr	r0, [r1, #0]
 8009562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009566:	f01e 0f10 	tst.w	lr, #16
 800956a:	bf08      	it	eq
 800956c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009570:	f380 8809 	msr	PSP, r0
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	f3af 8000 	nop.w

08009580 <pxCurrentTCBConst>:
 8009580:	200013b0 	.word	0x200013b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	607b      	str	r3, [r7, #4]
}
 80095a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095a2:	f7fe fdc7 	bl	8008134 <xTaskIncrementTick>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <xPortSysTickHandler+0x40>)
 80095ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	2300      	movs	r3, #0
 80095b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f383 8811 	msr	BASEPRI, r3
}
 80095be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	e000ed04 	.word	0xe000ed04

080095cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <vPortSetupTimerInterrupt+0x34>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <vPortSetupTimerInterrupt+0x38>)
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095dc:	4b0a      	ldr	r3, [pc, #40]	; (8009608 <vPortSetupTimerInterrupt+0x3c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a0a      	ldr	r2, [pc, #40]	; (800960c <vPortSetupTimerInterrupt+0x40>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	099b      	lsrs	r3, r3, #6
 80095e8:	4a09      	ldr	r2, [pc, #36]	; (8009610 <vPortSetupTimerInterrupt+0x44>)
 80095ea:	3b01      	subs	r3, #1
 80095ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ee:	4b04      	ldr	r3, [pc, #16]	; (8009600 <vPortSetupTimerInterrupt+0x34>)
 80095f0:	2207      	movs	r2, #7
 80095f2:	601a      	str	r2, [r3, #0]
}
 80095f4:	bf00      	nop
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	e000e010 	.word	0xe000e010
 8009604:	e000e018 	.word	0xe000e018
 8009608:	20000658 	.word	0x20000658
 800960c:	10624dd3 	.word	0x10624dd3
 8009610:	e000e014 	.word	0xe000e014

08009614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009624 <vPortEnableVFP+0x10>
 8009618:	6801      	ldr	r1, [r0, #0]
 800961a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800961e:	6001      	str	r1, [r0, #0]
 8009620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009622:	bf00      	nop
 8009624:	e000ed88 	.word	0xe000ed88

08009628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800962e:	f3ef 8305 	mrs	r3, IPSR
 8009632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b0f      	cmp	r3, #15
 8009638:	d914      	bls.n	8009664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800963a:	4a17      	ldr	r2, [pc, #92]	; (8009698 <vPortValidateInterruptPriority+0x70>)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009644:	4b15      	ldr	r3, [pc, #84]	; (800969c <vPortValidateInterruptPriority+0x74>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	7afa      	ldrb	r2, [r7, #11]
 800964a:	429a      	cmp	r2, r3
 800964c:	d20a      	bcs.n	8009664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009664:	4b0e      	ldr	r3, [pc, #56]	; (80096a0 <vPortValidateInterruptPriority+0x78>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <vPortValidateInterruptPriority+0x7c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d90a      	bls.n	800968a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	603b      	str	r3, [r7, #0]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <vPortValidateInterruptPriority+0x60>
	}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	e000e3f0 	.word	0xe000e3f0
 800969c:	200019e4 	.word	0x200019e4
 80096a0:	e000ed0c 	.word	0xe000ed0c
 80096a4:	200019e8 	.word	0x200019e8

080096a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08a      	sub	sp, #40	; 0x28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096b0:	2300      	movs	r3, #0
 80096b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096b4:	f7fe fc82 	bl	8007fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096b8:	4b5b      	ldr	r3, [pc, #364]	; (8009828 <pvPortMalloc+0x180>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096c0:	f000 f920 	bl	8009904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096c4:	4b59      	ldr	r3, [pc, #356]	; (800982c <pvPortMalloc+0x184>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4013      	ands	r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f040 8093 	bne.w	80097f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d01d      	beq.n	8009714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80096d8:	2208      	movs	r2, #8
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4413      	add	r3, r2
 80096de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d014      	beq.n	8009714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f023 0307 	bic.w	r3, r3, #7
 80096f0:	3308      	adds	r3, #8
 80096f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <pvPortMalloc+0x6c>
	__asm volatile
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	617b      	str	r3, [r7, #20]
}
 8009710:	bf00      	nop
 8009712:	e7fe      	b.n	8009712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d06e      	beq.n	80097f8 <pvPortMalloc+0x150>
 800971a:	4b45      	ldr	r3, [pc, #276]	; (8009830 <pvPortMalloc+0x188>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d869      	bhi.n	80097f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009724:	4b43      	ldr	r3, [pc, #268]	; (8009834 <pvPortMalloc+0x18c>)
 8009726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009728:	4b42      	ldr	r3, [pc, #264]	; (8009834 <pvPortMalloc+0x18c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800972e:	e004      	b.n	800973a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	429a      	cmp	r2, r3
 8009742:	d903      	bls.n	800974c <pvPortMalloc+0xa4>
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1f1      	bne.n	8009730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800974c:	4b36      	ldr	r3, [pc, #216]	; (8009828 <pvPortMalloc+0x180>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009752:	429a      	cmp	r2, r3
 8009754:	d050      	beq.n	80097f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2208      	movs	r2, #8
 800975c:	4413      	add	r3, r2
 800975e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	2308      	movs	r3, #8
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	429a      	cmp	r2, r3
 8009776:	d91f      	bls.n	80097b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	f003 0307 	and.w	r3, r3, #7
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <pvPortMalloc+0xf8>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	613b      	str	r3, [r7, #16]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	1ad2      	subs	r2, r2, r3
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097b2:	69b8      	ldr	r0, [r7, #24]
 80097b4:	f000 f908 	bl	80099c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097b8:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <pvPortMalloc+0x188>)
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	4a1b      	ldr	r2, [pc, #108]	; (8009830 <pvPortMalloc+0x188>)
 80097c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097c6:	4b1a      	ldr	r3, [pc, #104]	; (8009830 <pvPortMalloc+0x188>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <pvPortMalloc+0x190>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d203      	bcs.n	80097da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097d2:	4b17      	ldr	r3, [pc, #92]	; (8009830 <pvPortMalloc+0x188>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a18      	ldr	r2, [pc, #96]	; (8009838 <pvPortMalloc+0x190>)
 80097d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <pvPortMalloc+0x184>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	431a      	orrs	r2, r3
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097ee:	4b13      	ldr	r3, [pc, #76]	; (800983c <pvPortMalloc+0x194>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	4a11      	ldr	r2, [pc, #68]	; (800983c <pvPortMalloc+0x194>)
 80097f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097f8:	f7fe fbee 	bl	8007fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f003 0307 	and.w	r3, r3, #7
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00a      	beq.n	800981c <pvPortMalloc+0x174>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60fb      	str	r3, [r7, #12]
}
 8009818:	bf00      	nop
 800981a:	e7fe      	b.n	800981a <pvPortMalloc+0x172>
	return pvReturn;
 800981c:	69fb      	ldr	r3, [r7, #28]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20006814 	.word	0x20006814
 800982c:	20006828 	.word	0x20006828
 8009830:	20006818 	.word	0x20006818
 8009834:	2000680c 	.word	0x2000680c
 8009838:	2000681c 	.word	0x2000681c
 800983c:	20006820 	.word	0x20006820

08009840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d04d      	beq.n	80098ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009852:	2308      	movs	r3, #8
 8009854:	425b      	negs	r3, r3
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4413      	add	r3, r2
 800985a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	4b24      	ldr	r3, [pc, #144]	; (80098f8 <vPortFree+0xb8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4013      	ands	r3, r2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <vPortFree+0x44>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <vPortFree+0x62>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60bb      	str	r3, [r7, #8]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <vPortFree+0xb8>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d01e      	beq.n	80098ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d11a      	bne.n	80098ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <vPortFree+0xb8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	43db      	mvns	r3, r3
 80098c2:	401a      	ands	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098c8:	f7fe fb78 	bl	8007fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <vPortFree+0xbc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <vPortFree+0xbc>)
 80098d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098da:	6938      	ldr	r0, [r7, #16]
 80098dc:	f000 f874 	bl	80099c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <vPortFree+0xc0>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	3301      	adds	r3, #1
 80098e6:	4a06      	ldr	r2, [pc, #24]	; (8009900 <vPortFree+0xc0>)
 80098e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098ea:	f7fe fb75 	bl	8007fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ee:	bf00      	nop
 80098f0:	3718      	adds	r7, #24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20006828 	.word	0x20006828
 80098fc:	20006818 	.word	0x20006818
 8009900:	20006824 	.word	0x20006824

08009904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800990a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800990e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009910:	4b27      	ldr	r3, [pc, #156]	; (80099b0 <prvHeapInit+0xac>)
 8009912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00c      	beq.n	8009938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3307      	adds	r3, #7
 8009922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <prvHeapInit+0xac>)
 8009934:	4413      	add	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800993c:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <prvHeapInit+0xb0>)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009942:	4b1c      	ldr	r3, [pc, #112]	; (80099b4 <prvHeapInit+0xb0>)
 8009944:	2200      	movs	r2, #0
 8009946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	4413      	add	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009950:	2208      	movs	r2, #8
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4a15      	ldr	r2, [pc, #84]	; (80099b8 <prvHeapInit+0xb4>)
 8009964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <prvHeapInit+0xb4>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2200      	movs	r2, #0
 800996c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <prvHeapInit+0xb4>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	1ad2      	subs	r2, r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009984:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <prvHeapInit+0xb4>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <prvHeapInit+0xb8>)
 8009992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a09      	ldr	r2, [pc, #36]	; (80099c0 <prvHeapInit+0xbc>)
 800999a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <prvHeapInit+0xc0>)
 800999e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	200019ec 	.word	0x200019ec
 80099b4:	2000680c 	.word	0x2000680c
 80099b8:	20006814 	.word	0x20006814
 80099bc:	2000681c 	.word	0x2000681c
 80099c0:	20006818 	.word	0x20006818
 80099c4:	20006828 	.word	0x20006828

080099c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099d0:	4b28      	ldr	r3, [pc, #160]	; (8009a74 <prvInsertBlockIntoFreeList+0xac>)
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	e002      	b.n	80099dc <prvInsertBlockIntoFreeList+0x14>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d8f7      	bhi.n	80099d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4413      	add	r3, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d108      	bne.n	8009a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	685a      	ldr	r2, [r3, #4]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	441a      	add	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d118      	bne.n	8009a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <prvInsertBlockIntoFreeList+0xb0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d00d      	beq.n	8009a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	441a      	add	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	601a      	str	r2, [r3, #0]
 8009a44:	e008      	b.n	8009a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <prvInsertBlockIntoFreeList+0xb0>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	e003      	b.n	8009a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d002      	beq.n	8009a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a66:	bf00      	nop
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	2000680c 	.word	0x2000680c
 8009a78:	20006814 	.word	0x20006814

08009a7c <__libc_init_array>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4d0d      	ldr	r5, [pc, #52]	; (8009ab4 <__libc_init_array+0x38>)
 8009a80:	4c0d      	ldr	r4, [pc, #52]	; (8009ab8 <__libc_init_array+0x3c>)
 8009a82:	1b64      	subs	r4, r4, r5
 8009a84:	10a4      	asrs	r4, r4, #2
 8009a86:	2600      	movs	r6, #0
 8009a88:	42a6      	cmp	r6, r4
 8009a8a:	d109      	bne.n	8009aa0 <__libc_init_array+0x24>
 8009a8c:	4d0b      	ldr	r5, [pc, #44]	; (8009abc <__libc_init_array+0x40>)
 8009a8e:	4c0c      	ldr	r4, [pc, #48]	; (8009ac0 <__libc_init_array+0x44>)
 8009a90:	f000 f82e 	bl	8009af0 <_init>
 8009a94:	1b64      	subs	r4, r4, r5
 8009a96:	10a4      	asrs	r4, r4, #2
 8009a98:	2600      	movs	r6, #0
 8009a9a:	42a6      	cmp	r6, r4
 8009a9c:	d105      	bne.n	8009aaa <__libc_init_array+0x2e>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa4:	4798      	blx	r3
 8009aa6:	3601      	adds	r6, #1
 8009aa8:	e7ee      	b.n	8009a88 <__libc_init_array+0xc>
 8009aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aae:	4798      	blx	r3
 8009ab0:	3601      	adds	r6, #1
 8009ab2:	e7f2      	b.n	8009a9a <__libc_init_array+0x1e>
 8009ab4:	08009e1c 	.word	0x08009e1c
 8009ab8:	08009e1c 	.word	0x08009e1c
 8009abc:	08009e1c 	.word	0x08009e1c
 8009ac0:	08009e20 	.word	0x08009e20

08009ac4 <memcpy>:
 8009ac4:	440a      	add	r2, r1
 8009ac6:	4291      	cmp	r1, r2
 8009ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009acc:	d100      	bne.n	8009ad0 <memcpy+0xc>
 8009ace:	4770      	bx	lr
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ada:	4291      	cmp	r1, r2
 8009adc:	d1f9      	bne.n	8009ad2 <memcpy+0xe>
 8009ade:	bd10      	pop	{r4, pc}

08009ae0 <memset>:
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <_init>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	bf00      	nop
 8009af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af6:	bc08      	pop	{r3}
 8009af8:	469e      	mov	lr, r3
 8009afa:	4770      	bx	lr

08009afc <_fini>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	bf00      	nop
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr
