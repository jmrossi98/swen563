
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  000206c0  2**0
                  CONTENTS
  4 .ARM          00000000  080026c8  080026c8  000206c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c8  080026c8  000206c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200006c0  08002d90  000206c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08002d90  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c51  00000000  00000000  000206f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d76  00000000  00000000  00025341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  000260b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000348  00000000  00000000  00026488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df9c  00000000  00000000  000267d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e42  00000000  00000000  0004476c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e35b8  00000000  00000000  000485ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012bb66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001164  00000000  00000000  0012bbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006c0 	.word	0x200006c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023ec 	.word	0x080023ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006c4 	.word	0x200006c4
 80001cc:	080023ec 	.word	0x080023ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED_Init>:
// User LEDs: 
//   LD4 Red = PB2    LD5 Green = PE8
// Note: The Green LED is yellow on my board.
//       PE8 is also the TIM1_CH1N for ADC Triggers.
//******************************************************************************************
void LED_Init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOEEN;
 8000284:	4b27      	ldr	r3, [pc, #156]	; (8000324 <LED_Init+0xa4>)
 8000286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000288:	4a26      	ldr	r2, [pc, #152]	; (8000324 <LED_Init+0xa4>)
 800028a:	f043 0312 	orr.w	r3, r3, #18
 800028e:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// LD4 Red = PB2
	///////////////////////////////////////////////////////////////////////////////////////////////
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOB->MODER = ~(3U<<(2*2));  
 8000290:	4b25      	ldr	r3, [pc, #148]	; (8000328 <LED_Init+0xa8>)
 8000292:	f06f 0230 	mvn.w	r2, #48	; 0x30
 8000296:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 1U<<(2*2);      //  Output(01)
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <LED_Init+0xa8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <LED_Init+0xa8>)
 800029e:	f043 0310 	orr.w	r3, r3, #16
 80002a2:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOB->OSPEEDR &= ~(3U<<(2*2));
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <LED_Init+0xa8>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a1f      	ldr	r2, [pc, #124]	; (8000328 <LED_Init+0xa8>)
 80002aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002ae:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=   3U<<(2*2);  // High speed
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <LED_Init+0xa8>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <LED_Init+0xa8>)
 80002b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002ba:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOB->OTYPER &= ~(1U<<2);       // Push-pull
 80002bc:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <LED_Init+0xa8>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a19      	ldr	r2, [pc, #100]	; (8000328 <LED_Init+0xa8>)
 80002c2:	f023 0304 	bic.w	r3, r3, #4
 80002c6:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOB->PUPDR   &= ~(3U<<(2*2));  // No pull-up, no pull-down
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <LED_Init+0xa8>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a16      	ldr	r2, [pc, #88]	; (8000328 <LED_Init+0xa8>)
 80002ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002d2:	60d3      	str	r3, [r2, #12]
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// LD5 Green = PE8
	///////////////////////////////////////////////////////////////////////////////////////////////
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOE->MODER = ~(3U<<(2*8));  
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <LED_Init+0xac>)
 80002d6:	f46f 3240 	mvn.w	r2, #196608	; 0x30000
 80002da:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 1U<<(2*8);      //  Output(01)
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <LED_Init+0xac>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <LED_Init+0xac>)
 80002e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002e6:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOE->OSPEEDR &= ~(3U<<(2*8));
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <LED_Init+0xac>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a0f      	ldr	r2, [pc, #60]	; (800032c <LED_Init+0xac>)
 80002ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002f2:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |=   3U<<(2*8);  // High speed
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <LED_Init+0xac>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a0c      	ldr	r2, [pc, #48]	; (800032c <LED_Init+0xac>)
 80002fa:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002fe:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOE->OTYPER &= ~(1U<<8);       // Push-pull
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <LED_Init+0xac>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <LED_Init+0xac>)
 8000306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800030a:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOE->PUPDR   &= ~(3U<<(2*8));  // No pull-up, no pull-down
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <LED_Init+0xac>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <LED_Init+0xac>)
 8000312:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000316:	60d3      	str	r3, [r2, #12]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000400 	.word	0x48000400
 800032c:	48001000 	.word	0x48001000

08000330 <Red_LED_On>:

//******************************************************************************************
// Turn Red LED On
//******************************************************************************************
void Red_LED_On(void){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_ODR_2;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <Red_LED_On+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <Red_LED_On+0x1c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6153      	str	r3, [r2, #20]
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <Red_LED_Off>:

//******************************************************************************************
// Turn Red LED Off
//******************************************************************************************
void Red_LED_Off(void){
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~GPIO_ODR_ODR_2;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <Red_LED_Off+0x1c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <Red_LED_Off+0x1c>)
 800035a:	f023 0304 	bic.w	r3, r3, #4
 800035e:	6153      	str	r3, [r2, #20]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	48000400 	.word	0x48000400

08000370 <Green_LED_On>:
}

//******************************************************************************************
// Turn Green LED On
//******************************************************************************************
void Green_LED_On(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
	GPIOE->ODR |= GPIO_ODR_ODR_8;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <Green_LED_On+0x1c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <Green_LED_On+0x1c>)
 800037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037e:	6153      	str	r3, [r2, #20]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	48001000 	.word	0x48001000

08000390 <Green_LED_Off>:

//******************************************************************************************
// Turn Green LED Off
//******************************************************************************************
void Green_LED_Off(void){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	GPIOE->ODR &= ~GPIO_ODR_ODR_8;
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <Green_LED_Off+0x1c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <Green_LED_Off+0x1c>)
 800039a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800039e:	6153      	str	r3, [r2, #20]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	48001000 	.word	0x48001000

080003b0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80003b6:	4b6b      	ldr	r3, [pc, #428]	; (8000564 <System_Clock_Init+0x1b4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a6a      	ldr	r2, [pc, #424]	; (8000564 <System_Clock_Init+0x1b4>)
 80003bc:	f023 0307 	bic.w	r3, r3, #7
 80003c0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80003c2:	4b68      	ldr	r3, [pc, #416]	; (8000564 <System_Clock_Init+0x1b4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a67      	ldr	r2, [pc, #412]	; (8000564 <System_Clock_Init+0x1b4>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80003ce:	4b66      	ldr	r3, [pc, #408]	; (8000568 <System_Clock_Init+0x1b8>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a65      	ldr	r2, [pc, #404]	; (8000568 <System_Clock_Init+0x1b8>)
 80003d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80003da:	bf00      	nop
 80003dc:	4b62      	ldr	r3, [pc, #392]	; (8000568 <System_Clock_Init+0x1b8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d0f9      	beq.n	80003dc <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80003e8:	2310      	movs	r3, #16
 80003ea:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80003ec:	4b5e      	ldr	r3, [pc, #376]	; (8000568 <System_Clock_Init+0x1b8>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4a5d      	ldr	r2, [pc, #372]	; (8000568 <System_Clock_Init+0x1b8>)
 80003f2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80003f6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80003f8:	4b5b      	ldr	r3, [pc, #364]	; (8000568 <System_Clock_Init+0x1b8>)
 80003fa:	685a      	ldr	r2, [r3, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	061b      	lsls	r3, r3, #24
 8000400:	4959      	ldr	r1, [pc, #356]	; (8000568 <System_Clock_Init+0x1b8>)
 8000402:	4313      	orrs	r3, r2
 8000404:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000406:	4b58      	ldr	r3, [pc, #352]	; (8000568 <System_Clock_Init+0x1b8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a57      	ldr	r2, [pc, #348]	; (8000568 <System_Clock_Init+0x1b8>)
 800040c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000410:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000412:	bf00      	nop
 8000414:	4b54      	ldr	r3, [pc, #336]	; (8000568 <System_Clock_Init+0x1b8>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800041c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000420:	d0f8      	beq.n	8000414 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000422:	4b51      	ldr	r3, [pc, #324]	; (8000568 <System_Clock_Init+0x1b8>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	4a50      	ldr	r2, [pc, #320]	; (8000568 <System_Clock_Init+0x1b8>)
 8000428:	f023 0303 	bic.w	r3, r3, #3
 800042c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800042e:	4b4e      	ldr	r3, [pc, #312]	; (8000568 <System_Clock_Init+0x1b8>)
 8000430:	68db      	ldr	r3, [r3, #12]
 8000432:	4a4d      	ldr	r2, [pc, #308]	; (8000568 <System_Clock_Init+0x1b8>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800043a:	4b4b      	ldr	r3, [pc, #300]	; (8000568 <System_Clock_Init+0x1b8>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000442:	4a49      	ldr	r2, [pc, #292]	; (8000568 <System_Clock_Init+0x1b8>)
 8000444:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000448:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800044a:	4b47      	ldr	r3, [pc, #284]	; (8000568 <System_Clock_Init+0x1b8>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000452:	4a45      	ldr	r2, [pc, #276]	; (8000568 <System_Clock_Init+0x1b8>)
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800045a:	4b43      	ldr	r3, [pc, #268]	; (8000568 <System_Clock_Init+0x1b8>)
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	4a42      	ldr	r2, [pc, #264]	; (8000568 <System_Clock_Init+0x1b8>)
 8000460:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000464:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000466:	4b40      	ldr	r3, [pc, #256]	; (8000568 <System_Clock_Init+0x1b8>)
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	4a3f      	ldr	r2, [pc, #252]	; (8000568 <System_Clock_Init+0x1b8>)
 800046c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000470:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000472:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <System_Clock_Init+0x1b8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a3c      	ldr	r2, [pc, #240]	; (8000568 <System_Clock_Init+0x1b8>)
 8000478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800047c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800047e:	bf00      	nop
 8000480:	4b39      	ldr	r3, [pc, #228]	; (8000568 <System_Clock_Init+0x1b8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <System_Clock_Init+0x1b8>)
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	4a35      	ldr	r2, [pc, #212]	; (8000568 <System_Clock_Init+0x1b8>)
 8000492:	f023 0303 	bic.w	r3, r3, #3
 8000496:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000498:	4b33      	ldr	r3, [pc, #204]	; (8000568 <System_Clock_Init+0x1b8>)
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	4a32      	ldr	r2, [pc, #200]	; (8000568 <System_Clock_Init+0x1b8>)
 800049e:	f043 0303 	orr.w	r3, r3, #3
 80004a2:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80004a4:	bf00      	nop
 80004a6:	4b30      	ldr	r3, [pc, #192]	; (8000568 <System_Clock_Init+0x1b8>)
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	f003 030c 	and.w	r3, r3, #12
 80004ae:	2b0c      	cmp	r3, #12
 80004b0:	d1f9      	bne.n	80004a6 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <System_Clock_Init+0x1b8>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <System_Clock_Init+0x1b8>)
 80004b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <System_Clock_Init+0x1b8>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	4a29      	ldr	r2, [pc, #164]	; (8000568 <System_Clock_Init+0x1b8>)
 80004c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004c8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <System_Clock_Init+0x1b8>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	4a26      	ldr	r2, [pc, #152]	; (8000568 <System_Clock_Init+0x1b8>)
 80004d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80004d4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <System_Clock_Init+0x1b8>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <System_Clock_Init+0x1b8>)
 80004dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80004e0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80004e2:	bf00      	nop
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <System_Clock_Init+0x1b8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80004f0:	d0f8      	beq.n	80004e4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <System_Clock_Init+0x1b8>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <System_Clock_Init+0x1b8>)
 80004f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80004fc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <System_Clock_Init+0x1b8>)
 8000500:	691b      	ldr	r3, [r3, #16]
 8000502:	4a19      	ldr	r2, [pc, #100]	; (8000568 <System_Clock_Init+0x1b8>)
 8000504:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000508:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <System_Clock_Init+0x1b8>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <System_Clock_Init+0x1b8>)
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <System_Clock_Init+0x1b8>)
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <System_Clock_Init+0x1b8>)
 800051c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000520:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <System_Clock_Init+0x1b8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a10      	ldr	r2, [pc, #64]	; (8000568 <System_Clock_Init+0x1b8>)
 8000528:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800052c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800052e:	bf00      	nop
 8000530:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <System_Clock_Init+0x1b8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0f9      	beq.n	8000530 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <System_Clock_Init+0x1b8>)
 800053e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <System_Clock_Init+0x1b8>)
 8000544:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <System_Clock_Init+0x1b8>)
 800054e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <System_Clock_Init+0x1b8>)
 8000552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000556:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40022000 	.word	0x40022000
 8000568:	40021000 	.word	0x40021000

0800056c <UART2_Init>:
// ===================================================
// PA.0 = UART4_TX (AF8)   |  PA.1 = UART4_RX (AF8)      
// PB.6 = USART1_TX (AF7)  |  PB.7 = USART1_RX (AF7) 
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void UART2_Init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <UART2_Init+0x40>)
 8000572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <UART2_Init+0x40>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <UART2_Init+0x40>)
 800057e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <UART2_Init+0x40>)
 8000584:	f023 030c 	bic.w	r3, r3, #12
 8000588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <UART2_Init+0x40>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a06      	ldr	r2, [pc, #24]	; (80005ac <UART2_Init+0x40>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 800059c:	f000 f80a 	bl	80005b4 <UART2_GPIO_Init>
	USART_Init(USART2);
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <UART2_Init+0x44>)
 80005a2:	f000 f843 	bl	800062c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40004400 	.word	0x40004400

080005b4 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIODEN;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <UART2_GPIO_Init+0x70>)
 80005ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <UART2_GPIO_Init+0x70>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PD5 = USART2_TX (AF7)
	// PD6 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOD->MODER   &= ~(0xF << (2*5));	// Clear bits
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005ca:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80005ce:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=   0xA << (2*5);      		
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005d6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80005da:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0]  |=   0x77<< (4*5);       	
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a11      	ldr	r2, [pc, #68]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005e2:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 80005e6:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOD->OSPEEDR |=   0xF<<(2*5); 					 	
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005ee:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 80005f2:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOD->PUPDR   &= ~(0xF<<(2*5));
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <UART2_GPIO_Init+0x74>)
 80005fa:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80005fe:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR   |=   0x5<<(2*5);    				
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <UART2_GPIO_Init+0x74>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a08      	ldr	r2, [pc, #32]	; (8000628 <UART2_GPIO_Init+0x74>)
 8000606:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800060a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOD->OTYPER  &=  ~(0x3<<5) ;       	
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <UART2_GPIO_Init+0x74>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <UART2_GPIO_Init+0x74>)
 8000612:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000616:	6053      	str	r3, [r2, #4]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	48000c00 	.word	0x48000c00

0800062c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f023 0201 	bic.w	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f242 028d 	movw	r2, #8333	; 0x208d
 800066a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f043 020c 	orr.w	r2, r3, #12
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a2c      	ldr	r2, [pc, #176]	; (800072c <USART_Init+0x100>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d129      	bne.n	80006d4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f043 0220 	orr.w	r2, r3, #32
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f023 0210 	bic.w	r2, r3, #16
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f023 0201 	bic.w	r2, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <USART_Init+0x104>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d10b      	bne.n	80006f4 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <USART_Init+0x108>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <USART_Init+0x108>)
 80006ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006f2:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f043 0201 	orr.w	r2, r3, #1
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000700:	bf00      	nop
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d0f9      	beq.n	8000702 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800070e:	bf00      	nop
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f9      	beq.n	8000710 <USART_Init+0xe4>
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40004c00 	.word	0x40004c00
 8000730:	40004400 	.word	0x40004400
 8000734:	40013800 	.word	0x40013800

08000738 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000740:	bf00      	nop
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f9      	beq.n	8000742 <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000752:	b29b      	uxth	r3, r3
 8000754:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	e014      	b.n	800079e <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000774:	bf00      	nop
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b29a      	uxth	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000790:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000794:	f000 f818 	bl	80007c8 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8e6      	bhi.n	8000774 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80007a6:	bf00      	nop
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f9      	beq.n	80007a8 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	61da      	str	r2, [r3, #28]
}   
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2264      	movs	r2, #100	; 0x64
 80007d4:	fb02 f203 	mul.w	r2, r2, r3
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <USART_Delay+0x3c>)
 80007da:	fba3 1302 	umull	r1, r3, r3, r2
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	0852      	lsrs	r2, r2, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	089b      	lsrs	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f9      	bne.n	80007e8 <USART_Delay+0x20>
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	24924925 	.word	0x24924925

08000808 <USART_Read_No_Block>:
	} else if (USARTx->ISR & USART_ISR_NE){ 			// Noise Error Flag
		while(1);     
	}	
}

uint8_t USART_Read_No_Block (USART_TypeDef * USARTx) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if ((USARTx->ISR & USART_ISR_RXNE)) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	2b00      	cmp	r3, #0
 800081a:	d004      	beq.n	8000826 <USART_Read_No_Block+0x1e>
		// Reading USART_DR automatically clears the RXNE flag
		return ((uint8_t)(USARTx->RDR & 0xFF));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000820:	b29b      	uxth	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	e000      	b.n	8000828 <USART_Read_No_Block+0x20>
	}
	else {
		// If nothing to do, return null instead of waiting
		return '\0';
 8000826:	2300      	movs	r3, #0
	}
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <write_cmd>:
		MOV + 1,
		RECIPE_END
	}
};

void write_cmd(char *message){
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	466b      	mov	r3, sp
 800083e:	461d      	mov	r5, r3
  char buffer[strlen(message) + strlen("\r\n")];
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fcc5 	bl	80001d0 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	1c9c      	adds	r4, r3, #2
 800084a:	4623      	mov	r3, r4
 800084c:	3b01      	subs	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4620      	mov	r0, r4
 8000852:	f04f 0100 	mov.w	r1, #0
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	00cb      	lsls	r3, r1, #3
 8000860:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000864:	00c2      	lsls	r2, r0, #3
 8000866:	4620      	mov	r0, r4
 8000868:	f04f 0100 	mov.w	r1, #0
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	00cb      	lsls	r3, r1, #3
 8000876:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800087a:	00c2      	lsls	r2, r0, #3
 800087c:	1de3      	adds	r3, r4, #7
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	ebad 0d03 	sub.w	sp, sp, r3
 8000886:	466b      	mov	r3, sp
 8000888:	3300      	adds	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  strcpy(buffer, message);
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 f95b 	bl	8001b4c <strcpy>
  strcat(buffer, "\r\n");
 8000896:	68bc      	ldr	r4, [r7, #8]
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff fc99 	bl	80001d0 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	4423      	add	r3, r4
 80008a2:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <write_cmd+0xa4>)
 80008a4:	8811      	ldrh	r1, [r2, #0]
 80008a6:	7892      	ldrb	r2, [r2, #2]
 80008a8:	8019      	strh	r1, [r3, #0]
 80008aa:	709a      	strb	r2, [r3, #2]
  USART_Write(USART2, (uint8_t *)"\r\n", strlen("\r\n"));
 80008ac:	2202      	movs	r2, #2
 80008ae:	490a      	ldr	r1, [pc, #40]	; (80008d8 <write_cmd+0xa4>)
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <write_cmd+0xa8>)
 80008b2:	f7ff ff56 	bl	8000762 <USART_Write>
  USART_Write(USART2, (uint8_t *)buffer, strlen(buffer));
 80008b6:	68bc      	ldr	r4, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fc88 	bl	80001d0 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4621      	mov	r1, r4
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <write_cmd+0xa8>)
 80008c8:	f7ff ff4b 	bl	8000762 <USART_Write>
 80008cc:	46ad      	mov	sp, r5
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bdb0      	pop	{r4, r5, r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08002404 	.word	0x08002404
 80008dc:	40004400 	.word	0x40004400

080008e0 <usart_real_time_write>:

void usart_real_time_write(char data, int print_newline){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  char write_buffer[1] = {null};
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <usart_real_time_write+0x3c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
  write_buffer[0] = data;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	733b      	strb	r3, [r7, #12]
  USART_Write(USART2, (uint8_t *)write_buffer, sizeof(write_buffer));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2201      	movs	r2, #1
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <usart_real_time_write+0x40>)
 8000902:	f7ff ff2e 	bl	8000762 <USART_Write>
  if(print_newline){
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <usart_real_time_write+0x32>
    write_cmd("");
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <usart_real_time_write+0x44>)
 800090e:	f7ff ff91 	bl	8000834 <write_cmd>
  }
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200006dc 	.word	0x200006dc
 8000920:	40004400 	.word	0x40004400
 8000924:	08002408 	.word	0x08002408

08000928 <usart_write_data_string>:

void usart_write_data_string(char *message, ...){
 8000928:	b40f      	push	{r0, r1, r2, r3}
 800092a:	b580      	push	{r7, lr}
 800092c:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 8000930:	af00      	add	r7, sp, #0
  va_list data_points;
  va_start(data_points, message);
 8000932:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 8000936:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
  char buffer[2000];
  vsprintf(buffer, message, data_points);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	f8d7 27d4 	ldr.w	r2, [r7, #2004]	; 0x7d4
 8000940:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f939 	bl	8001bbc <vsiprintf>
  va_end(data_points);
  write_cmd(buffer);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff71 	bl	8000834 <write_cmd>
}
 8000952:	bf00      	nop
 8000954:	f507 67fb 	add.w	r7, r7, #2008	; 0x7d8
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095e:	b004      	add	sp, #16
 8000960:	4770      	bx	lr

08000962 <is_valid>:

int is_valid(char *input, char *valid_characters){
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
  if(!strpbrk(input, valid_characters)){
 800096c:	6839      	ldr	r1, [r7, #0]
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f001 f8f4 	bl	8001b5c <strpbrk>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <is_valid+0x1c>
    return 0;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <is_valid+0x1e>
  }
  return 1;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <check_for_continuation>:

int check_for_continuation(){
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	char input = null;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <check_for_continuation+0x80>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	70fb      	strb	r3, [r7, #3]
	int keep_going = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
	write_cmd("Skip next instruction? Press y or n");
 800099a:	481c      	ldr	r0, [pc, #112]	; (8000a0c <check_for_continuation+0x84>)
 800099c:	f7ff ff4a 	bl	8000834 <write_cmd>
	input = USART_Read(USART2);
 80009a0:	481b      	ldr	r0, [pc, #108]	; (8000a10 <check_for_continuation+0x88>)
 80009a2:	f7ff fec9 	bl	8000738 <USART_Read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	70fb      	strb	r3, [r7, #3]
	usart_real_time_write(input, 1);
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff96 	bl	80008e0 <usart_real_time_write>
	while(!is_valid(&input, "YyNn")){
 80009b4:	e011      	b.n	80009da <check_for_continuation+0x52>
		write_cmd("");
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <check_for_continuation+0x8c>)
 80009b8:	f7ff ff3c 	bl	8000834 <write_cmd>
		usart_write_data_string("Invalid input. Press y or n", input);
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	4619      	mov	r1, r3
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <check_for_continuation+0x90>)
 80009c2:	f7ff ffb1 	bl	8000928 <usart_write_data_string>
		input = USART_Read(USART2);
 80009c6:	4812      	ldr	r0, [pc, #72]	; (8000a10 <check_for_continuation+0x88>)
 80009c8:	f7ff feb6 	bl	8000738 <USART_Read>
 80009cc:	4603      	mov	r3, r0
 80009ce:	70fb      	strb	r3, [r7, #3]
		usart_real_time_write(input, 1);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff83 	bl	80008e0 <usart_real_time_write>
	while(!is_valid(&input, "YyNn")){
 80009da:	1cfb      	adds	r3, r7, #3
 80009dc:	490f      	ldr	r1, [pc, #60]	; (8000a1c <check_for_continuation+0x94>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffbf 	bl	8000962 <is_valid>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0e5      	beq.n	80009b6 <check_for_continuation+0x2e>
	}
	if(is_valid(&input, "Yy")){
 80009ea:	1cfb      	adds	r3, r7, #3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <check_for_continuation+0x98>)
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffb7 	bl	8000962 <is_valid>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <check_for_continuation+0x76>
		keep_going = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
	}
	return keep_going;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200006dc 	.word	0x200006dc
 8000a0c:	0800240c 	.word	0x0800240c
 8000a10:	40004400 	.word	0x40004400
 8000a14:	08002408 	.word	0x08002408
 8000a18:	08002430 	.word	0x08002430
 8000a1c:	0800244c 	.word	0x0800244c
 8000a20:	08002454 	.word	0x08002454

08000a24 <stop>:

int stop(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	int keep_going = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
	keep_going = check_for_continuation();
 8000a2e:	f7ff ffab 	bl	8000988 <check_for_continuation>
 8000a32:	6078      	str	r0, [r7, #4]
	if(!keep_going){
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <stop+0x1e>
		write_cmd("Exiting the program");
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <stop+0x28>)
 8000a3c:	f7ff fefa 	bl	8000834 <write_cmd>
		while(1);
 8000a40:	e7fe      	b.n	8000a40 <stop+0x1c>
	}
	return keep_going;
 8000a42:	687b      	ldr	r3, [r7, #4]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	08002458 	.word	0x08002458

08000a50 <delay>:

void delay(uint32_t delay_time) {
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	delay_time = (10000 * delay_time);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a5e:	fb02 f303 	mul.w	r3, r2, r3
 8000a62:	607b      	str	r3, [r7, #4]
	for(uint32_t index = 0; index < delay_time; index++);
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e002      	b.n	8000a70 <delay+0x20>
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d3f8      	bcc.n	8000a6a <delay+0x1a>
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <calculate_delay>:

uint16_t calculate_delay(position last_position, position new_position, int recipe){
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	603a      	str	r2, [r7, #0]
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
	uint16_t number_of_steps, delay = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	81fb      	strh	r3, [r7, #14]
	number_of_steps = abs(last_position - new_position);
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bfb8      	it	lt
 8000aa4:	425b      	neglt	r3, r3
 8000aa6:	81bb      	strh	r3, [r7, #12]
	if(recipe){
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <calculate_delay+0x3a>
		delay = (uint16_t)1000 * number_of_steps;
 8000aae:	89bb      	ldrh	r3, [r7, #12]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	0152      	lsls	r2, r2, #5
 8000ab4:	1ad2      	subs	r2, r2, r3
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	81fb      	strh	r3, [r7, #14]
 8000abe:	e00a      	b.n	8000ad6 <calculate_delay+0x50>
	}
	else {
		delay = (uint16_t)200 * number_of_steps;
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	0091      	lsls	r1, r2, #2
 8000acc:	461a      	mov	r2, r3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	81fb      	strh	r3, [r7, #14]
	}
	return delay;
 8000ad6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <start_timer>:

void start_timer(int servo_num){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d106      	bne.n	8000b00 <start_timer+0x1c>
		TIM3->CR1 |= 0x1;
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <start_timer+0x34>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <start_timer+0x34>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
	}
	else {
		TIM4->CR1 |= 0x1;
	}
}
 8000afe:	e005      	b.n	8000b0c <start_timer+0x28>
		TIM4->CR1 |= 0x1;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <start_timer+0x38>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <start_timer+0x38>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	40000800 	.word	0x40000800

08000b20 <stop_timer>:
	for(int servo_num = 0; servo_num < 2; servo_num++){
		start_timer(servo_num);
	}
}

void stop_timer(int servo_num){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d105      	bne.n	8000b3a <stop_timer+0x1a>
		TIM3->CR1 &= 0x0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <stop_timer+0x34>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <stop_timer+0x34>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
	}
	else {
		TIM4->CR1 &= 0x0E;
	}
}
 8000b38:	e005      	b.n	8000b46 <stop_timer+0x26>
		TIM4->CR1 &= 0x0E;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <stop_timer+0x38>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <stop_timer+0x38>)
 8000b40:	f003 030e 	and.w	r3, r3, #14
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40000400 	.word	0x40000400
 8000b58:	40000800 	.word	0x40000800

08000b5c <stop_timers>:

void stop_timers(){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	e005      	b.n	8000b74 <stop_timers+0x18>
		stop_timer(servo_num);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ffd9 	bl	8000b20 <stop_timer>
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	ddf6      	ble.n	8000b68 <stop_timers+0xc>
	}
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <get_current_time>:
	else {
		return (uint16_t)TIM4->CCR1;
	}
}

uint16_t get_current_time(int servo_num){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	if(servo_num == 0){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <get_current_time+0x16>
		return (uint16_t)TIM3->CNT;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <get_current_time+0x28>)
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	e002      	b.n	8000ba0 <get_current_time+0x1c>
	}
	else {
		return (uint16_t)TIM4->CNT;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <get_current_time+0x2c>)
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	b29b      	uxth	r3, r3
	}
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40000400 	.word	0x40000400
 8000bb0:	40000800 	.word	0x40000800

08000bb4 <move_motor>:

uint16_t move_motor(int motor_num, servo_data *motor, uint16_t next_pos, int recipe){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	80fb      	strh	r3, [r7, #6]
	position last_position;
	position new_position = (position)next_pos;
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	75fb      	strb	r3, [r7, #23]
	uint16_t current_time = get_current_time(motor_num);
 8000bc8:	68f8      	ldr	r0, [r7, #12]
 8000bca:	f7ff ffdb 	bl	8000b84 <get_current_time>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	82bb      	strh	r3, [r7, #20]
	uint16_t delay = calculate_delay(last_position, new_position, recipe);
 8000bd2:	7df9      	ldrb	r1, [r7, #23]
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff54 	bl	8000a86 <calculate_delay>
 8000bde:	4603      	mov	r3, r0
 8000be0:	823b      	strh	r3, [r7, #16]
	if(motor_num == 0){
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d107      	bne.n	8000bf8 <move_motor+0x44>
		TIM2->CCR1 = positions[new_position];
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <move_motor+0x80>)
 8000bec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf6:	e006      	b.n	8000c06 <move_motor+0x52>
	}
	else {
		TIM2->CCR2 = positions[new_position];
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <move_motor+0x80>)
 8000bfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c04:	639a      	str	r2, [r3, #56]	; 0x38
	}
	last_position = motor->position;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	74fb      	strb	r3, [r7, #19]
	motor->position = new_position;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	7dfa      	ldrb	r2, [r7, #23]
 8000c10:	705a      	strb	r2, [r3, #1]
	motor->next_pos = (position)next_pos;
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	711a      	strb	r2, [r3, #4]
	motor->last_start = current_time;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	8aba      	ldrh	r2, [r7, #20]
 8000c1e:	805a      	strh	r2, [r3, #2]
	motor->delay = delay;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	8a3a      	ldrh	r2, [r7, #16]
 8000c24:	80da      	strh	r2, [r3, #6]
	return motor->delay;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	88db      	ldrh	r3, [r3, #6]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000000 	.word	0x20000000

08000c38 <get_opcode>:

uint8_t get_opcode(uint8_t byte_register){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	return byte_register & 224;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f023 031f 	bic.w	r3, r3, #31
 8000c48:	b2db      	uxtb	r3, r3
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <get_parameter>:

uint8_t get_parameter(uint8_t byte_register){
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
	return byte_register & 31;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	b2db      	uxtb	r3, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <get_instruction>:

current_instruction get_instruction(uint8_t byte_register){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	current_instruction instruction_struct;
	instruction_struct.opcode = get_opcode(byte_register);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ffd9 	bl	8000c38 <get_opcode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	723b      	strb	r3, [r7, #8]
	instruction_struct.parameter = get_parameter(byte_register);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffe2 	bl	8000c56 <get_parameter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	727b      	strb	r3, [r7, #9]
	return instruction_struct;
 8000c96:	893b      	ldrh	r3, [r7, #8]
 8000c98:	81bb      	strh	r3, [r7, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	7b3a      	ldrb	r2, [r7, #12]
 8000c9e:	f362 0307 	bfi	r3, r2, #0, #8
 8000ca2:	7b7a      	ldrb	r2, [r7, #13]
 8000ca4:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <instruction_in_bounds>:

int instruction_in_bounds(current_instruction instruction){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	80b8      	strh	r0, [r7, #4]
	return (instruction.parameter <= one_hundred_and_sixty_degrees);
 8000cb8:	797b      	ldrb	r3, [r7, #5]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	bf94      	ite	ls
 8000cbe:	2301      	movls	r3, #1
 8000cc0:	2300      	movhi	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <increment_recipe>:

void increment_recipe(servo_data *motor){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if(motor->recipe_idx >= 3){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	dd03      	ble.n	8000ce8 <increment_recipe+0x18>
		motor->recipe_idx = 0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
	}
	else{
		motor->recipe_idx++;
	}
}
 8000ce6:	e004      	b.n	8000cf2 <increment_recipe+0x22>
		motor->recipe_idx++;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60da      	str	r2, [r3, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <reset_servo>:

void reset_servo(int index, servo_data *motor, int restart){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	if(!restart){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10d      	bne.n	8000d2e <reset_servo+0x2e>
		usart_write_data_string("Recipe %d complete on servo %d, performing reset...", motor->recipe_idx, index, index);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	68d9      	ldr	r1, [r3, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	4816      	ldr	r0, [pc, #88]	; (8000d74 <reset_servo+0x74>)
 8000d1c:	f7ff fe04 	bl	8000928 <usart_write_data_string>
		increment_recipe(motor);
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f7ff ffd5 	bl	8000cd0 <increment_recipe>
		motor->status = inactive;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e002      	b.n	8000d34 <reset_servo+0x34>
	}
	else {
		motor->recipe_idx = 0;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
	}
	move_motor(index, motor, zero_degrees, 1);
 8000d34:	2301      	movs	r3, #1
 8000d36:	2200      	movs	r2, #0
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff ff3a 	bl	8000bb4 <move_motor>
	motor->instr_idx = 0;
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
	motor->loop_cnt = 0;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
	motor->loop_idx = 0;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
	motor->is_in_loop = 0;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
	motor->next_pos = zero_degrees;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	711a      	strb	r2, [r3, #4]
	motor->delay = 0;
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2200      	movs	r2, #0
 8000d62:	80da      	strh	r2, [r3, #6]
	motor->recipe_status = idle;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	2200      	movs	r2, #0
 8000d68:	721a      	strb	r2, [r3, #8]
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	0800246c 	.word	0x0800246c

08000d78 <reset_all_servos>:

void reset_all_servos(int restart){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 8000d80:	e015      	b.n	8000dae <reset_all_servos+0x36>
		if((servos[servo_data_index].status == active) || restart){
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <reset_all_servos+0x48>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	015b      	lsls	r3, r3, #5
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d002      	beq.n	8000d96 <reset_all_servos+0x1e>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d008      	beq.n	8000da8 <reset_all_servos+0x30>
			reset_servo(servo_data_index, &servos[servo_data_index], restart);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <reset_all_servos+0x48>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4619      	mov	r1, r3
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff ffac 	bl	8000d00 <reset_servo>
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	dde6      	ble.n	8000d82 <reset_all_servos+0xa>
		}
	}
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200006ec 	.word	0x200006ec

08000dc4 <servo_ready>:

int servo_ready(int servo_num){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint16_t current_time = get_current_time(servo_num);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fed9 	bl	8000b84 <get_current_time>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	81fb      	strh	r3, [r7, #14]
	uint16_t last_start = servos[servo_num].last_start;
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <servo_ready+0x50>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	015b      	lsls	r3, r3, #5
 8000ddc:	4413      	add	r3, r2
 8000dde:	3302      	adds	r3, #2
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	81bb      	strh	r3, [r7, #12]
	uint16_t delay = servos[servo_num].delay;
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <servo_ready+0x50>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	015b      	lsls	r3, r3, #5
 8000dea:	4413      	add	r3, r2
 8000dec:	3306      	adds	r3, #6
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	817b      	strh	r3, [r7, #10]
	if(abs(current_time - last_start) > delay){
 8000df2:	89fa      	ldrh	r2, [r7, #14]
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000dfc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e00:	897b      	ldrh	r3, [r7, #10]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dd01      	ble.n	8000e0a <servo_ready+0x46>
		return 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <servo_ready+0x48>
	}
	else {
		return 0;
 8000e0a:	2300      	movs	r3, #0
	}
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200006ec 	.word	0x200006ec

08000e18 <some_servo_inactive>:

int some_servo_inactive(servo_data *servos){
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	int servo_inactive = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	e00c      	b.n	8000e44 <some_servo_inactive+0x2c>
		if(servos[servo_num].status == inactive){
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	015b      	lsls	r3, r3, #5
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <some_servo_inactive+0x26>
			servo_inactive = 1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
			break;
 8000e3c:	e005      	b.n	8000e4a <some_servo_inactive+0x32>
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	ddef      	ble.n	8000e2a <some_servo_inactive+0x12>
		}
	}
	return servo_inactive;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <both_servos_inactive_or_paused>:

int both_servos_inactive_or_paused(servo_data *servos){
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	int stop = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e013      	b.n	8000e92 <both_servos_inactive_or_paused+0x3a>
			if((servos[servo_num].status == inactive) || (servos[servo_num].status == paused)){
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	015b      	lsls	r3, r3, #5
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <both_servos_inactive_or_paused+0x2e>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	015b      	lsls	r3, r3, #5
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4413      	add	r3, r2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d102      	bne.n	8000e8c <both_servos_inactive_or_paused+0x34>
				stop += 1;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
	for(int servo_num = 0; servo_num < 2; servo_num++){
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	dde8      	ble.n	8000e6a <both_servos_inactive_or_paused+0x12>
			}
	}
	if(stop == 2){
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d101      	bne.n	8000ea2 <both_servos_inactive_or_paused+0x4a>
		return 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <both_servos_inactive_or_paused+0x4c>
	}
	else {
		return 0;
 8000ea2:	2300      	movs	r3, #0
	}
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <parse_cmd>:

int parse_cmd(char commands[2]){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	int move_command_entered = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
	int recipe_start = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
	int already_printed_warning = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
	int restart = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
	uint16_t next_pos;
	uint16_t current_delay_time = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	82fb      	strh	r3, [r7, #22]

	Green_LED_On();
 8000ecc:	f7ff fa50 	bl	8000370 <Green_LED_On>
	for(int index = 0; index < 2; index++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e101      	b.n	80010da <parse_cmd+0x22a>

		switch(commands[index]){
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	3b42      	subs	r3, #66	; 0x42
 8000ee0:	2b30      	cmp	r3, #48	; 0x30
 8000ee2:	f200 80e3 	bhi.w	80010ac <parse_cmd+0x1fc>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <parse_cmd+0x3c>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000fb1 	.word	0x08000fb1
 8000ef0:	08000fdf 	.word	0x08000fdf
 8000ef4:	080010ad 	.word	0x080010ad
 8000ef8:	080010ad 	.word	0x080010ad
 8000efc:	080010ad 	.word	0x080010ad
 8000f00:	080010ad 	.word	0x080010ad
 8000f04:	080010ad 	.word	0x080010ad
 8000f08:	080010ad 	.word	0x080010ad
 8000f0c:	080010ad 	.word	0x080010ad
 8000f10:	080010ad 	.word	0x080010ad
 8000f14:	08000fff 	.word	0x08000fff
 8000f18:	080010ad 	.word	0x080010ad
 8000f1c:	080010d3 	.word	0x080010d3
 8000f20:	080010ad 	.word	0x080010ad
 8000f24:	0800104d 	.word	0x0800104d
 8000f28:	080010ad 	.word	0x080010ad
 8000f2c:	0800105b 	.word	0x0800105b
 8000f30:	080010ad 	.word	0x080010ad
 8000f34:	080010ad 	.word	0x080010ad
 8000f38:	080010ad 	.word	0x080010ad
 8000f3c:	080010ad 	.word	0x080010ad
 8000f40:	080010ad 	.word	0x080010ad
 8000f44:	080010ad 	.word	0x080010ad
 8000f48:	080010ad 	.word	0x080010ad
 8000f4c:	080010ad 	.word	0x080010ad
 8000f50:	080010ad 	.word	0x080010ad
 8000f54:	080010ad 	.word	0x080010ad
 8000f58:	080010ad 	.word	0x080010ad
 8000f5c:	080010ad 	.word	0x080010ad
 8000f60:	080010ad 	.word	0x080010ad
 8000f64:	080010ad 	.word	0x080010ad
 8000f68:	080010ad 	.word	0x080010ad
 8000f6c:	08000fb1 	.word	0x08000fb1
 8000f70:	08000fdf 	.word	0x08000fdf
 8000f74:	080010ad 	.word	0x080010ad
 8000f78:	080010ad 	.word	0x080010ad
 8000f7c:	080010ad 	.word	0x080010ad
 8000f80:	080010ad 	.word	0x080010ad
 8000f84:	080010ad 	.word	0x080010ad
 8000f88:	080010ad 	.word	0x080010ad
 8000f8c:	080010ad 	.word	0x080010ad
 8000f90:	080010ad 	.word	0x080010ad
 8000f94:	08000fff 	.word	0x08000fff
 8000f98:	080010ad 	.word	0x080010ad
 8000f9c:	080010d3 	.word	0x080010d3
 8000fa0:	080010ad 	.word	0x080010ad
 8000fa4:	0800104d 	.word	0x0800104d
 8000fa8:	080010ad 	.word	0x080010ad
 8000fac:	0800105b 	.word	0x0800105b
			case 'B':
			case 'b':
				reset_servo(index, &servos[index], 1);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	4a57      	ldr	r2, [pc, #348]	; (8001114 <parse_cmd+0x264>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4619      	mov	r1, r3
 8000fbc:	6938      	ldr	r0, [r7, #16]
 8000fbe:	f7ff fe9f 	bl	8000d00 <reset_servo>
				current_delay_time = 1000;
 8000fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc6:	82fb      	strh	r3, [r7, #22]
				servos[index].status = active;
 8000fc8:	4a52      	ldr	r2, [pc, #328]	; (8001114 <parse_cmd+0x264>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	015b      	lsls	r3, r3, #5
 8000fce:	4413      	add	r3, r2
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
				recipe_start = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
				restart = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
				break;
 8000fdc:	e07a      	b.n	80010d4 <parse_cmd+0x224>
			case 'C':
			case 'c':
				servos[index].status = active;
 8000fde:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <parse_cmd+0x264>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
				servos[index].recipe_status = idle;
 8000fea:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <parse_cmd+0x264>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
				recipe_start = 1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	623b      	str	r3, [r7, #32]
				break;
 8000ffc:	e06a      	b.n	80010d4 <parse_cmd+0x224>
			case 'L':
			case 'l':
				next_pos = servos[index].position - 1;
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <parse_cmd+0x264>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	015b      	lsls	r3, r3, #5
 8001004:	4413      	add	r3, r2
 8001006:	3301      	adds	r3, #1
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	3b01      	subs	r3, #1
 800100e:	81fb      	strh	r3, [r7, #14]
				if(servos[index].position != zero_degrees) {
 8001010:	4a40      	ldr	r2, [pc, #256]	; (8001114 <parse_cmd+0x264>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	4413      	add	r3, r2
 8001018:	3301      	adds	r3, #1
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00d      	beq.n	800103c <parse_cmd+0x18c>
					current_delay_time = move_motor(index, &servos[index], next_pos, 0);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	015b      	lsls	r3, r3, #5
 8001024:	4a3b      	ldr	r2, [pc, #236]	; (8001114 <parse_cmd+0x264>)
 8001026:	1899      	adds	r1, r3, r2
 8001028:	89fa      	ldrh	r2, [r7, #14]
 800102a:	2300      	movs	r3, #0
 800102c:	6938      	ldr	r0, [r7, #16]
 800102e:	f7ff fdc1 	bl	8000bb4 <move_motor>
 8001032:	4603      	mov	r3, r0
 8001034:	82fb      	strh	r3, [r7, #22]
					move_command_entered = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
				}
				else {
					write_cmd("");
					usart_write_data_string("Cannot move motor %d further left", index);
				}
				break;
 800103a:	e04b      	b.n	80010d4 <parse_cmd+0x224>
					write_cmd("");
 800103c:	4836      	ldr	r0, [pc, #216]	; (8001118 <parse_cmd+0x268>)
 800103e:	f7ff fbf9 	bl	8000834 <write_cmd>
					usart_write_data_string("Cannot move motor %d further left", index);
 8001042:	6939      	ldr	r1, [r7, #16]
 8001044:	4835      	ldr	r0, [pc, #212]	; (800111c <parse_cmd+0x26c>)
 8001046:	f7ff fc6f 	bl	8000928 <usart_write_data_string>
				break;
 800104a:	e043      	b.n	80010d4 <parse_cmd+0x224>
			case 'N':
			case 'n':
				break;
			case 'P':
			case 'p':
				servos[index].status = inactive;
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <parse_cmd+0x264>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	015b      	lsls	r3, r3, #5
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
				break;
 8001058:	e03c      	b.n	80010d4 <parse_cmd+0x224>
			case 'R':
			case 'r':
				next_pos = servos[index].position + 1;
 800105a:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <parse_cmd+0x264>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4413      	add	r3, r2
 8001062:	3301      	adds	r3, #1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	3301      	adds	r3, #1
 800106a:	81fb      	strh	r3, [r7, #14]
				if(servos[index].position != one_hundred_and_sixty_degrees) {
 800106c:	4a29      	ldr	r2, [pc, #164]	; (8001114 <parse_cmd+0x264>)
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	4413      	add	r3, r2
 8001074:	3301      	adds	r3, #1
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b05      	cmp	r3, #5
 800107a:	d00d      	beq.n	8001098 <parse_cmd+0x1e8>
					current_delay_time = move_motor(index, &servos[index], next_pos, 0);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	015b      	lsls	r3, r3, #5
 8001080:	4a24      	ldr	r2, [pc, #144]	; (8001114 <parse_cmd+0x264>)
 8001082:	1899      	adds	r1, r3, r2
 8001084:	89fa      	ldrh	r2, [r7, #14]
 8001086:	2300      	movs	r3, #0
 8001088:	6938      	ldr	r0, [r7, #16]
 800108a:	f7ff fd93 	bl	8000bb4 <move_motor>
 800108e:	4603      	mov	r3, r0
 8001090:	82fb      	strh	r3, [r7, #22]
					move_command_entered = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
				}
				else {
					write_cmd("");
					usart_write_data_string("Cannot move motor %d further right", index, next_pos);
				}
				break;
 8001096:	e01d      	b.n	80010d4 <parse_cmd+0x224>
					write_cmd("");
 8001098:	481f      	ldr	r0, [pc, #124]	; (8001118 <parse_cmd+0x268>)
 800109a:	f7ff fbcb 	bl	8000834 <write_cmd>
					usart_write_data_string("Cannot move motor %d further right", index, next_pos);
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	461a      	mov	r2, r3
 80010a2:	6939      	ldr	r1, [r7, #16]
 80010a4:	481e      	ldr	r0, [pc, #120]	; (8001120 <parse_cmd+0x270>)
 80010a6:	f7ff fc3f 	bl	8000928 <usart_write_data_string>
				break;
 80010aa:	e013      	b.n	80010d4 <parse_cmd+0x224>
			default:
				if(!already_printed_warning){
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d110      	bne.n	80010d4 <parse_cmd+0x224>
					write_cmd("");
 80010b2:	4819      	ldr	r0, [pc, #100]	; (8001118 <parse_cmd+0x268>)
 80010b4:	f7ff fbbe 	bl	8000834 <write_cmd>
					usart_write_data_string("Invalid command", commands);
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <parse_cmd+0x274>)
 80010bc:	f7ff fc34 	bl	8000928 <usart_write_data_string>
					already_printed_warning = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
					recipe_start = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
					restart = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
					move_command_entered = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	e000      	b.n	80010d4 <parse_cmd+0x224>
				break;
 80010d2:	bf00      	nop
	for(int index = 0; index < 2; index++){
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3301      	adds	r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f77f aefa 	ble.w	8000ed6 <parse_cmd+0x26>
				}
		}
	}
	Green_LED_Off();
 80010e2:	f7ff f955 	bl	8000390 <Green_LED_Off>
	if(move_command_entered || restart){
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <parse_cmd+0x242>
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <parse_cmd+0x25a>
		Green_LED_Off();
 80010f2:	f7ff f94d 	bl	8000390 <Green_LED_Off>
		Red_LED_On();
 80010f6:	f7ff f91b 	bl	8000330 <Red_LED_On>
		delay(current_delay_time);
 80010fa:	8afb      	ldrh	r3, [r7, #22]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fca7 	bl	8000a50 <delay>
		Red_LED_Off();
 8001102:	f7ff f925 	bl	8000350 <Red_LED_Off>
		Green_LED_On();
 8001106:	f7ff f933 	bl	8000370 <Green_LED_On>
	}
	return recipe_start;
 800110a:	6a3b      	ldr	r3, [r7, #32]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200006ec 	.word	0x200006ec
 8001118:	08002408 	.word	0x08002408
 800111c:	080024a0 	.word	0x080024a0
 8001120:	080024c4 	.word	0x080024c4
 8001124:	080024e8 	.word	0x080024e8

08001128 <run_recipe>:

void run_recipe(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
	Green_LED_On();
 800112e:	f7ff f91f 	bl	8000370 <Green_LED_On>
	Red_LED_Off();
 8001132:	f7ff f90d 	bl	8000350 <Red_LED_Off>
	write_cmd("Running recipes...");
 8001136:	48ba      	ldr	r0, [pc, #744]	; (8001420 <run_recipe+0x2f8>)
 8001138:	f7ff fb7c 	bl	8000834 <write_cmd>
	int recipe_ended = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
	int keep_going = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
	int servos_paused = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
	char pause = null;
 8001148:	4bb6      	ldr	r3, [pc, #728]	; (8001424 <run_recipe+0x2fc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	717b      	strb	r3, [r7, #5]

	while(1){
		if ((recipe_ended == 2) || (servos_paused == 2) || ((servos_paused == 1) && (recipe_ended == 1)) || ((servos_paused == 1) && (some_servo_inactive(servos))) || (both_servos_inactive_or_paused(servos))){
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f000 8235 	beq.w	80015c2 <run_recipe+0x49a>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b02      	cmp	r3, #2
 800115c:	f000 8231 	beq.w	80015c2 <run_recipe+0x49a>
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d103      	bne.n	800116e <run_recipe+0x46>
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b01      	cmp	r3, #1
 800116a:	f000 822a 	beq.w	80015c2 <run_recipe+0x49a>
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <run_recipe+0x5a>
 8001174:	48ac      	ldr	r0, [pc, #688]	; (8001428 <run_recipe+0x300>)
 8001176:	f7ff fe4f 	bl	8000e18 <some_servo_inactive>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	f040 8220 	bne.w	80015c2 <run_recipe+0x49a>
 8001182:	48a9      	ldr	r0, [pc, #676]	; (8001428 <run_recipe+0x300>)
 8001184:	f7ff fe68 	bl	8000e58 <both_servos_inactive_or_paused>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 8219 	bne.w	80015c2 <run_recipe+0x49a>
			break;
		}
		for(int servo_index = 0; servo_index < 2; servo_index++){
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	e210      	b.n	80015b8 <run_recipe+0x490>
			if(servos[servo_index].status == active){
 8001196:	4aa4      	ldr	r2, [pc, #656]	; (8001428 <run_recipe+0x300>)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 8206 	bne.w	80015b2 <run_recipe+0x48a>
				pause = USART_Read_No_Block(USART2);
 80011a6:	48a1      	ldr	r0, [pc, #644]	; (800142c <run_recipe+0x304>)
 80011a8:	f7ff fb2e 	bl	8000808 <USART_Read_No_Block>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	717b      	strb	r3, [r7, #5]
				if(is_valid(&pause, "Pp")){
 80011b2:	1d7b      	adds	r3, r7, #5
 80011b4:	499e      	ldr	r1, [pc, #632]	; (8001430 <run_recipe+0x308>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fbd3 	bl	8000962 <is_valid>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d016      	beq.n	80011f0 <run_recipe+0xc8>
					Green_LED_Off();
 80011c2:	f7ff f8e5 	bl	8000390 <Green_LED_Off>
					Red_LED_Off();
 80011c6:	f7ff f8c3 	bl	8000350 <Red_LED_Off>

					usart_real_time_write(pause, 1);
 80011ca:	797b      	ldrb	r3, [r7, #5]
 80011cc:	2101      	movs	r1, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fb86 	bl	80008e0 <usart_real_time_write>
					usart_write_data_string("Pausing servo %d ...", servo_index);
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	4897      	ldr	r0, [pc, #604]	; (8001434 <run_recipe+0x30c>)
 80011d8:	f7ff fba6 	bl	8000928 <usart_write_data_string>
					servos[servo_index].status = paused;
 80011dc:	4a92      	ldr	r2, [pc, #584]	; (8001428 <run_recipe+0x300>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4413      	add	r3, r2
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
					servos_paused += 1;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	3301      	adds	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	e7af      	b.n	8001150 <run_recipe+0x28>
					break;
				}
				current_instruction instruction = get_instruction(recipes[servos[servo_index].recipe_idx][servos[servo_index].instr_idx]);
 80011f0:	4a8d      	ldr	r2, [pc, #564]	; (8001428 <run_recipe+0x300>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	015b      	lsls	r3, r3, #5
 80011f6:	4413      	add	r3, r2
 80011f8:	330c      	adds	r3, #12
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	498a      	ldr	r1, [pc, #552]	; (8001428 <run_recipe+0x300>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	440b      	add	r3, r1
 8001204:	3310      	adds	r3, #16
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	498b      	ldr	r1, [pc, #556]	; (8001438 <run_recipe+0x310>)
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	fb00 f202 	mul.w	r2, r0, r2
 8001210:	4413      	add	r3, r2
 8001212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd2b 	bl	8000c74 <get_instruction>
 800121e:	4603      	mov	r3, r0
 8001220:	803b      	strh	r3, [r7, #0]
				switch(instruction.opcode){
 8001222:	783b      	ldrb	r3, [r7, #0]
 8001224:	2ba0      	cmp	r3, #160	; 0xa0
 8001226:	f000 8136 	beq.w	8001496 <run_recipe+0x36e>
 800122a:	2ba0      	cmp	r3, #160	; 0xa0
 800122c:	f300 819d 	bgt.w	800156a <run_recipe+0x442>
 8001230:	2b80      	cmp	r3, #128	; 0x80
 8001232:	f000 80ca 	beq.w	80013ca <run_recipe+0x2a2>
 8001236:	2b80      	cmp	r3, #128	; 0x80
 8001238:	f300 8197 	bgt.w	800156a <run_recipe+0x442>
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	d06e      	beq.n	800131e <run_recipe+0x1f6>
 8001240:	2b40      	cmp	r3, #64	; 0x40
 8001242:	f300 8192 	bgt.w	800156a <run_recipe+0x442>
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8182 	beq.w	8001550 <run_recipe+0x428>
 800124c:	2b20      	cmp	r3, #32
 800124e:	f040 818c 	bne.w	800156a <run_recipe+0x442>
				case MOV:
					if(instruction_in_bounds(instruction)){
 8001252:	6838      	ldr	r0, [r7, #0]
 8001254:	f7ff fd2c 	bl	8000cb0 <instruction_in_bounds>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d043      	beq.n	80012e6 <run_recipe+0x1be>
						if(servos[servo_index].recipe_status == idle){
 800125e:	4a72      	ldr	r2, [pc, #456]	; (8001428 <run_recipe+0x300>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	015b      	lsls	r3, r3, #5
 8001264:	4413      	add	r3, r2
 8001266:	3308      	adds	r3, #8
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d113      	bne.n	8001296 <run_recipe+0x16e>
							start_timer(servo_index);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fc38 	bl	8000ae4 <start_timer>
							move_motor(servo_index, &servos[servo_index], instruction.parameter, 1);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4a6b      	ldr	r2, [pc, #428]	; (8001428 <run_recipe+0x300>)
 800127a:	1899      	adds	r1, r3, r2
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	b29a      	uxth	r2, r3
 8001280:	2301      	movs	r3, #1
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fc96 	bl	8000bb4 <move_motor>
							servos[servo_index].recipe_status = running;
 8001288:	4a67      	ldr	r2, [pc, #412]	; (8001428 <run_recipe+0x300>)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	4413      	add	r3, r2
 8001290:	3308      	adds	r3, #8
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
						}
						if(servos[servo_index].recipe_status == running){
 8001296:	4a64      	ldr	r2, [pc, #400]	; (8001428 <run_recipe+0x300>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	015b      	lsls	r3, r3, #5
 800129c:	4413      	add	r3, r2
 800129e:	3308      	adds	r3, #8
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	f040 817c 	bne.w	80015a0 <run_recipe+0x478>
							if(servo_ready(servo_index)){
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f7ff fd8b 	bl	8000dc4 <servo_ready>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8175 	beq.w	80015a0 <run_recipe+0x478>
								stop_timer(servo_index);
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fc32 	bl	8000b20 <stop_timer>
								servos[servo_index].recipe_status = idle;
 80012bc:	4a5a      	ldr	r2, [pc, #360]	; (8001428 <run_recipe+0x300>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	015b      	lsls	r3, r3, #5
 80012c2:	4413      	add	r3, r2
 80012c4:	3308      	adds	r3, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
								servos[servo_index].instr_idx++;
 80012ca:	4a57      	ldr	r2, [pc, #348]	; (8001428 <run_recipe+0x300>)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	4413      	add	r3, r2
 80012d2:	3310      	adds	r3, #16
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	4953      	ldr	r1, [pc, #332]	; (8001428 <run_recipe+0x300>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	015b      	lsls	r3, r3, #5
 80012de:	440b      	add	r3, r1
 80012e0:	3310      	adds	r3, #16
 80012e2:	601a      	str	r2, [r3, #0]
						keep_going = stop();
						if(keep_going){
							servos[servo_index].instr_idx++;
						}
					}
					break;
 80012e4:	e15c      	b.n	80015a0 <run_recipe+0x478>
						Green_LED_Off();
 80012e6:	f7ff f853 	bl	8000390 <Green_LED_Off>
						Red_LED_On();
 80012ea:	f7ff f821 	bl	8000330 <Red_LED_On>
						write_cmd("ERROR: Input out of bounds");
 80012ee:	4853      	ldr	r0, [pc, #332]	; (800143c <run_recipe+0x314>)
 80012f0:	f7ff faa0 	bl	8000834 <write_cmd>
						keep_going = stop();
 80012f4:	f7ff fb96 	bl	8000a24 <stop>
 80012f8:	60b8      	str	r0, [r7, #8]
						if(keep_going){
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 814f 	beq.w	80015a0 <run_recipe+0x478>
							servos[servo_index].instr_idx++;
 8001302:	4a49      	ldr	r2, [pc, #292]	; (8001428 <run_recipe+0x300>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	4413      	add	r3, r2
 800130a:	3310      	adds	r3, #16
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	4945      	ldr	r1, [pc, #276]	; (8001428 <run_recipe+0x300>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	015b      	lsls	r3, r3, #5
 8001316:	440b      	add	r3, r1
 8001318:	3310      	adds	r3, #16
 800131a:	601a      	str	r2, [r3, #0]
					break;
 800131c:	e140      	b.n	80015a0 <run_recipe+0x478>
				case WAIT:
					if(servos[servo_index].recipe_status == idle){
 800131e:	4a42      	ldr	r2, [pc, #264]	; (8001428 <run_recipe+0x300>)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	015b      	lsls	r3, r3, #5
 8001324:	4413      	add	r3, r2
 8001326:	3308      	adds	r3, #8
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d125      	bne.n	800137a <run_recipe+0x252>
						servos[servo_index].delay = (uint16_t)1000 * instruction.parameter;
 800132e:	787b      	ldrb	r3, [r7, #1]
 8001330:	b29b      	uxth	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	0152      	lsls	r2, r2, #5
 8001336:	1ad2      	subs	r2, r2, r3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	b299      	uxth	r1, r3
 8001340:	4a39      	ldr	r2, [pc, #228]	; (8001428 <run_recipe+0x300>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	4413      	add	r3, r2
 8001348:	3306      	adds	r3, #6
 800134a:	460a      	mov	r2, r1
 800134c:	801a      	strh	r2, [r3, #0]
						servos[servo_index].recipe_status = running;
 800134e:	4a36      	ldr	r2, [pc, #216]	; (8001428 <run_recipe+0x300>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	015b      	lsls	r3, r3, #5
 8001354:	4413      	add	r3, r2
 8001356:	3308      	adds	r3, #8
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
						start_timer(servo_index);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff fbc1 	bl	8000ae4 <start_timer>
						uint16_t current_time = get_current_time(servo_index);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff fc0e 	bl	8000b84 <get_current_time>
 8001368:	4603      	mov	r3, r0
 800136a:	80fb      	strh	r3, [r7, #6]
						servos[servo_index].last_start = current_time;
 800136c:	4a2e      	ldr	r2, [pc, #184]	; (8001428 <run_recipe+0x300>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	015b      	lsls	r3, r3, #5
 8001372:	4413      	add	r3, r2
 8001374:	3302      	adds	r3, #2
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	801a      	strh	r2, [r3, #0]
					}
					if(servos[servo_index].recipe_status == running){
 800137a:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <run_recipe+0x300>)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	015b      	lsls	r3, r3, #5
 8001380:	4413      	add	r3, r2
 8001382:	3308      	adds	r3, #8
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	f040 810c 	bne.w	80015a4 <run_recipe+0x47c>
						if(servo_ready(servo_index)){
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fd19 	bl	8000dc4 <servo_ready>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8105 	beq.w	80015a4 <run_recipe+0x47c>
							stop_timer(servo_index);
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fbc0 	bl	8000b20 <stop_timer>
							servos[servo_index].recipe_status = idle;
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <run_recipe+0x300>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	4413      	add	r3, r2
 80013a8:	3308      	adds	r3, #8
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
							servos[servo_index].instr_idx++;
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <run_recipe+0x300>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	015b      	lsls	r3, r3, #5
 80013b4:	4413      	add	r3, r2
 80013b6:	3310      	adds	r3, #16
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	491a      	ldr	r1, [pc, #104]	; (8001428 <run_recipe+0x300>)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	015b      	lsls	r3, r3, #5
 80013c2:	440b      	add	r3, r1
 80013c4:	3310      	adds	r3, #16
 80013c6:	601a      	str	r2, [r3, #0]
						}
					}
					break;
 80013c8:	e0ec      	b.n	80015a4 <run_recipe+0x47c>
				case LOOP:
					if(servos[servo_index].is_in_loop == 1){
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <run_recipe+0x300>)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	015b      	lsls	r3, r3, #5
 80013d0:	4413      	add	r3, r2
 80013d2:	3318      	adds	r3, #24
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d134      	bne.n	8001444 <run_recipe+0x31c>
						Green_LED_On();
 80013da:	f7fe ffc9 	bl	8000370 <Green_LED_On>
						Red_LED_On();
 80013de:	f7fe ffa7 	bl	8000330 <Red_LED_On>
						write_cmd("ERROR: Input creates nested loops");
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <run_recipe+0x318>)
 80013e4:	f7ff fa26 	bl	8000834 <write_cmd>
						keep_going = stop();
 80013e8:	f7ff fb1c 	bl	8000a24 <stop>
 80013ec:	60b8      	str	r0, [r7, #8]
						if(keep_going){
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80d9 	beq.w	80015a8 <run_recipe+0x480>
							servos[servo_index].instr_idx++;
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <run_recipe+0x300>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4413      	add	r3, r2
 80013fe:	3310      	adds	r3, #16
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	4908      	ldr	r1, [pc, #32]	; (8001428 <run_recipe+0x300>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	015b      	lsls	r3, r3, #5
 800140a:	440b      	add	r3, r1
 800140c:	3310      	adds	r3, #16
 800140e:	601a      	str	r2, [r3, #0]
							servos[servo_index].is_in_loop = 0;
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <run_recipe+0x300>)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	015b      	lsls	r3, r3, #5
 8001416:	4413      	add	r3, r2
 8001418:	3318      	adds	r3, #24
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
						servos[servo_index].instr_idx++;
						servos[servo_index].is_in_loop = 1;
						servos[servo_index].loop_idx = servos[servo_index].instr_idx;
						servos[servo_index].loop_cnt = instruction.parameter - 1;
					}
					break;
 800141e:	e0c3      	b.n	80015a8 <run_recipe+0x480>
 8001420:	080024f8 	.word	0x080024f8
 8001424:	200006dc 	.word	0x200006dc
 8001428:	200006ec 	.word	0x200006ec
 800142c:	40004400 	.word	0x40004400
 8001430:	0800250c 	.word	0x0800250c
 8001434:	08002510 	.word	0x08002510
 8001438:	20000018 	.word	0x20000018
 800143c:	08002528 	.word	0x08002528
 8001440:	08002544 	.word	0x08002544
						servos[servo_index].instr_idx++;
 8001444:	4a67      	ldr	r2, [pc, #412]	; (80015e4 <run_recipe+0x4bc>)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	015b      	lsls	r3, r3, #5
 800144a:	4413      	add	r3, r2
 800144c:	3310      	adds	r3, #16
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	4964      	ldr	r1, [pc, #400]	; (80015e4 <run_recipe+0x4bc>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	440b      	add	r3, r1
 800145a:	3310      	adds	r3, #16
 800145c:	601a      	str	r2, [r3, #0]
						servos[servo_index].is_in_loop = 1;
 800145e:	4a61      	ldr	r2, [pc, #388]	; (80015e4 <run_recipe+0x4bc>)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	4413      	add	r3, r2
 8001466:	3318      	adds	r3, #24
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
						servos[servo_index].loop_idx = servos[servo_index].instr_idx;
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <run_recipe+0x4bc>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	015b      	lsls	r3, r3, #5
 8001472:	4413      	add	r3, r2
 8001474:	3310      	adds	r3, #16
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	495a      	ldr	r1, [pc, #360]	; (80015e4 <run_recipe+0x4bc>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	440b      	add	r3, r1
 8001480:	331c      	adds	r3, #28
 8001482:	601a      	str	r2, [r3, #0]
						servos[servo_index].loop_cnt = instruction.parameter - 1;
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	4956      	ldr	r1, [pc, #344]	; (80015e4 <run_recipe+0x4bc>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	015b      	lsls	r3, r3, #5
 800148e:	440b      	add	r3, r1
 8001490:	3314      	adds	r3, #20
 8001492:	601a      	str	r2, [r3, #0]
					break;
 8001494:	e088      	b.n	80015a8 <run_recipe+0x480>
				case END_LOOP:
					if(servos[servo_index].is_in_loop != 1){
 8001496:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <run_recipe+0x4bc>)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	015b      	lsls	r3, r3, #5
 800149c:	4413      	add	r3, r2
 800149e:	3318      	adds	r3, #24
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d01d      	beq.n	80014e2 <run_recipe+0x3ba>
						write_cmd("ERROR: Input creates nested loops");
 80014a6:	4850      	ldr	r0, [pc, #320]	; (80015e8 <run_recipe+0x4c0>)
 80014a8:	f7ff f9c4 	bl	8000834 <write_cmd>
						keep_going = stop();
 80014ac:	f7ff faba 	bl	8000a24 <stop>
 80014b0:	60b8      	str	r0, [r7, #8]
						if(keep_going){
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d079      	beq.n	80015ac <run_recipe+0x484>
							servos[servo_index].instr_idx++;
 80014b8:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <run_recipe+0x4bc>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	015b      	lsls	r3, r3, #5
 80014be:	4413      	add	r3, r2
 80014c0:	3310      	adds	r3, #16
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4947      	ldr	r1, [pc, #284]	; (80015e4 <run_recipe+0x4bc>)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	015b      	lsls	r3, r3, #5
 80014cc:	440b      	add	r3, r1
 80014ce:	3310      	adds	r3, #16
 80014d0:	601a      	str	r2, [r3, #0]
							servos[servo_index].is_in_loop = 0;
 80014d2:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <run_recipe+0x4bc>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	015b      	lsls	r3, r3, #5
 80014d8:	4413      	add	r3, r2
 80014da:	3318      	adds	r3, #24
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
						else {
							servos[servo_index].instr_idx = servos[servo_index].loop_idx;
							servos[servo_index].loop_cnt--;
						}
					}
					break;
 80014e0:	e064      	b.n	80015ac <run_recipe+0x484>
						if(servos[servo_index].loop_cnt < 0){
 80014e2:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <run_recipe+0x4bc>)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	4413      	add	r3, r2
 80014ea:	3314      	adds	r3, #20
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da14      	bge.n	800151c <run_recipe+0x3f4>
							servos[servo_index].is_in_loop = 0;
 80014f2:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <run_recipe+0x4bc>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	015b      	lsls	r3, r3, #5
 80014f8:	4413      	add	r3, r2
 80014fa:	3318      	adds	r3, #24
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
							servos[servo_index].instr_idx++;
 8001500:	4a38      	ldr	r2, [pc, #224]	; (80015e4 <run_recipe+0x4bc>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	4413      	add	r3, r2
 8001508:	3310      	adds	r3, #16
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	4935      	ldr	r1, [pc, #212]	; (80015e4 <run_recipe+0x4bc>)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	440b      	add	r3, r1
 8001516:	3310      	adds	r3, #16
 8001518:	601a      	str	r2, [r3, #0]
					break;
 800151a:	e047      	b.n	80015ac <run_recipe+0x484>
							servos[servo_index].instr_idx = servos[servo_index].loop_idx;
 800151c:	4a31      	ldr	r2, [pc, #196]	; (80015e4 <run_recipe+0x4bc>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	4413      	add	r3, r2
 8001524:	331c      	adds	r3, #28
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	492e      	ldr	r1, [pc, #184]	; (80015e4 <run_recipe+0x4bc>)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	440b      	add	r3, r1
 8001530:	3310      	adds	r3, #16
 8001532:	601a      	str	r2, [r3, #0]
							servos[servo_index].loop_cnt--;
 8001534:	4a2b      	ldr	r2, [pc, #172]	; (80015e4 <run_recipe+0x4bc>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	015b      	lsls	r3, r3, #5
 800153a:	4413      	add	r3, r2
 800153c:	3314      	adds	r3, #20
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	1e5a      	subs	r2, r3, #1
 8001542:	4928      	ldr	r1, [pc, #160]	; (80015e4 <run_recipe+0x4bc>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	440b      	add	r3, r1
 800154a:	3314      	adds	r3, #20
 800154c:	601a      	str	r2, [r3, #0]
					break;
 800154e:	e02d      	b.n	80015ac <run_recipe+0x484>
				case RECIPE_END:
					recipe_ended += 1;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
					reset_servo(servo_index, &servos[servo_index], 0);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	015b      	lsls	r3, r3, #5
 800155a:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <run_recipe+0x4bc>)
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fbcc 	bl	8000d00 <reset_servo>
					break;
 8001568:	e023      	b.n	80015b2 <run_recipe+0x48a>
				default:
					Green_LED_Off();
 800156a:	f7fe ff11 	bl	8000390 <Green_LED_Off>
					Red_LED_On();
 800156e:	f7fe fedf 	bl	8000330 <Red_LED_On>
					write_cmd("ERROR: Invalid recipe");
 8001572:	481e      	ldr	r0, [pc, #120]	; (80015ec <run_recipe+0x4c4>)
 8001574:	f7ff f95e 	bl	8000834 <write_cmd>
					keep_going = stop();
 8001578:	f7ff fa54 	bl	8000a24 <stop>
 800157c:	60b8      	str	r0, [r7, #8]
					if(keep_going){
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d015      	beq.n	80015b0 <run_recipe+0x488>
						servos[servo_index].instr_idx++;
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <run_recipe+0x4bc>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	015b      	lsls	r3, r3, #5
 800158a:	4413      	add	r3, r2
 800158c:	3310      	adds	r3, #16
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	4914      	ldr	r1, [pc, #80]	; (80015e4 <run_recipe+0x4bc>)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	440b      	add	r3, r1
 800159a:	3310      	adds	r3, #16
 800159c:	601a      	str	r2, [r3, #0]
					}
					break;
 800159e:	e007      	b.n	80015b0 <run_recipe+0x488>
					break;
 80015a0:	bf00      	nop
 80015a2:	e006      	b.n	80015b2 <run_recipe+0x48a>
					break;
 80015a4:	bf00      	nop
 80015a6:	e004      	b.n	80015b2 <run_recipe+0x48a>
					break;
 80015a8:	bf00      	nop
 80015aa:	e002      	b.n	80015b2 <run_recipe+0x48a>
					break;
 80015ac:	bf00      	nop
 80015ae:	e000      	b.n	80015b2 <run_recipe+0x48a>
					break;
 80015b0:	bf00      	nop
		for(int servo_index = 0; servo_index < 2; servo_index++){
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f77f adeb 	ble.w	8001196 <run_recipe+0x6e>
		if ((recipe_ended == 2) || (servos_paused == 2) || ((servos_paused == 1) && (recipe_ended == 1)) || ((servos_paused == 1) && (some_servo_inactive(servos))) || (both_servos_inactive_or_paused(servos))){
 80015c0:	e5c6      	b.n	8001150 <run_recipe+0x28>
				}
			}
		}
	}
	Green_LED_Off();
 80015c2:	f7fe fee5 	bl	8000390 <Green_LED_Off>
	reset_all_servos(0);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fbd6 	bl	8000d78 <reset_all_servos>
	if(servos_paused == 2){
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d102      	bne.n	80015d8 <run_recipe+0x4b0>
		write_cmd("Recipe finished");
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <run_recipe+0x4c8>)
 80015d4:	f7ff f92e 	bl	8000834 <write_cmd>
	}
	stop_timers();
 80015d8:	f7ff fac0 	bl	8000b5c <stop_timers>
}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200006ec 	.word	0x200006ec
 80015e8:	08002544 	.word	0x08002544
 80015ec:	08002568 	.word	0x08002568
 80015f0:	08002580 	.word	0x08002580

080015f4 <get_cmd>:

int get_cmd(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
	int index = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
	int first = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
	int recipe_start = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
	char input = null;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <get_cmd+0xb4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	70fb      	strb	r3, [r7, #3]
	char command_buffer[2 + 1] = {null, null, null};
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <get_cmd+0xb4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	703b      	strb	r3, [r7, #0]
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <get_cmd+0xb4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	707b      	strb	r3, [r7, #1]
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <get_cmd+0xb4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	70bb      	strb	r3, [r7, #2]
	write_cmd("");
 8001626:	4821      	ldr	r0, [pc, #132]	; (80016ac <get_cmd+0xb8>)
 8001628:	f7ff f904 	bl	8000834 <write_cmd>
	write_cmd("Enter a command:");
 800162c:	4820      	ldr	r0, [pc, #128]	; (80016b0 <get_cmd+0xbc>)
 800162e:	f7ff f901 	bl	8000834 <write_cmd>

	input = USART_Read(USART2);
 8001632:	4820      	ldr	r0, [pc, #128]	; (80016b4 <get_cmd+0xc0>)
 8001634:	f7ff f880 	bl	8000738 <USART_Read>
 8001638:	4603      	mov	r3, r0
 800163a:	70fb      	strb	r3, [r7, #3]
	while(input != 13){
 800163c:	e024      	b.n	8001688 <get_cmd+0x94>
		if(is_valid(&input, "Xx")){
 800163e:	1cfb      	adds	r3, r7, #3
 8001640:	491d      	ldr	r1, [pc, #116]	; (80016b8 <get_cmd+0xc4>)
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f98d 	bl	8000962 <is_valid>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <get_cmd+0x68>
			usart_real_time_write(input, 1);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2101      	movs	r1, #1
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f944 	bl	80008e0 <usart_real_time_write>

			return recipe_start;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	e020      	b.n	800169e <get_cmd+0xaa>
		}
		else {
			if(index >= 2){
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	dc16      	bgt.n	8001690 <get_cmd+0x9c>
				break;
			}
			command_buffer[index] = input;
 8001662:	78f9      	ldrb	r1, [r7, #3]
 8001664:	463a      	mov	r2, r7
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	460a      	mov	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
			index++;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
			usart_real_time_write(input, 0);
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f931 	bl	80008e0 <usart_real_time_write>
		}
		input = USART_Read(USART2);
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <get_cmd+0xc0>)
 8001680:	f7ff f85a 	bl	8000738 <USART_Read>
 8001684:	4603      	mov	r3, r0
 8001686:	70fb      	strb	r3, [r7, #3]
	while(input != 13){
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	2b0d      	cmp	r3, #13
 800168c:	d1d7      	bne.n	800163e <get_cmd+0x4a>
 800168e:	e000      	b.n	8001692 <get_cmd+0x9e>
				break;
 8001690:	bf00      	nop
	}
	recipe_start = parse_cmd(command_buffer);
 8001692:	463b      	mov	r3, r7
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fc0b 	bl	8000eb0 <parse_cmd>
 800169a:	6078      	str	r0, [r7, #4]
	return recipe_start;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200006dc 	.word	0x200006dc
 80016ac:	08002408 	.word	0x08002408
 80016b0:	08002590 	.word	0x08002590
 80016b4:	40004400 	.word	0x40004400
 80016b8:	080025a4 	.word	0x080025a4

080016bc <additional_init>:

void additional_init(void) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

	RCC->AHB2ENR = RCC_AHB2ENR_GPIOAEN;
 80016c2:	4b7e      	ldr	r3, [pc, #504]	; (80018bc <additional_init+0x200>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	64da      	str	r2, [r3, #76]	; 0x4c
	GPIOA->MODER &= ~(0xFF);
 80016c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0xA;
 80016d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016e2:	f043 030a 	orr.w	r3, r3, #10
 80016e6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x11;
 80016e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016f2:	f043 0311 	orr.w	r3, r3, #17
 80016f6:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <additional_init+0x200>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a6f      	ldr	r2, [pc, #444]	; (80018bc <additional_init+0x200>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->PSC = 8000;
 8001704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001708:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CCMR1 &= ~(0x00000303);
 800170e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171c:	f023 0303 	bic.w	r3, r3, #3
 8001720:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= 0x00006868;
 8001722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172c:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 8001730:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8001734:	6193      	str	r3, [r2, #24]
	TIM2->CR1 |= 0x00000080;
 8001736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6013      	str	r3, [r2, #0]
	TIM2->CCER |= 0x00000011;
 8001746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001750:	f043 0311 	orr.w	r3, r3, #17
 8001754:	6213      	str	r3, [r2, #32]
	TIM2->ARR = 200;
 8001756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175a:	22c8      	movs	r2, #200	; 0xc8
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCR1 = positions[zero_degrees];
 800175e:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <additional_init+0x204>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = positions[zero_degrees];
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <additional_init+0x204>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->EGR = TIM_EGR_UG;
 8001772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001776:	2201      	movs	r2, #1
 8001778:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 0x1;
 800177a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

	// Enable TIM3 and TIM4
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <additional_init+0x200>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <additional_init+0x200>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6593      	str	r3, [r2, #88]	; 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 800178e:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <additional_init+0x200>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <additional_init+0x200>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6593      	str	r3, [r2, #88]	; 0x58

	// Configure TIM3
	TIM3->PSC = 8000;            // Load prescale
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <additional_init+0x208>)
 800179c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->EGR |= TIM_EGR_UG;
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <additional_init+0x208>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <additional_init+0x208>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6153      	str	r3, [r2, #20]
	TIM3->CCER &= ~(0xFFFFFFFF); // Clear register
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <additional_init+0x208>)
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <additional_init+0x208>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
	TIM3->CCMR1 |= 0x1;          // Set to input mode
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <additional_init+0x208>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a41      	ldr	r2, [pc, #260]	; (80018c4 <additional_init+0x208>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= 0x1;           // Enable capture
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <additional_init+0x208>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <additional_init+0x208>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]

	// Configure TIM4
	TIM4->PSC = 8000;            // Load prescale
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <additional_init+0x20c>)
 80017d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->EGR |= TIM_EGR_UG;
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <additional_init+0x20c>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4a3a      	ldr	r2, [pc, #232]	; (80018c8 <additional_init+0x20c>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6153      	str	r3, [r2, #20]
	TIM4->CCER &= ~(0xFFFFFFFF); // Clear register
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <additional_init+0x20c>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <additional_init+0x20c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
	TIM4->CCMR1 |= 0x1;          // Set to input mode
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <additional_init+0x20c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <additional_init+0x20c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
	TIM4->CCER|= 0x1;            // Enable capture
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <additional_init+0x20c>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <additional_init+0x20c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]

	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 8001806:	e04e      	b.n	80018a6 <additional_init+0x1ea>
		servos[servo_data_index].status = inactive;
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <additional_init+0x210>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	4413      	add	r3, r2
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].position = zero_degrees;
 8001814:	4a2d      	ldr	r2, [pc, #180]	; (80018cc <additional_init+0x210>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	4413      	add	r3, r2
 800181c:	3301      	adds	r3, #1
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].last_start = 0;
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <additional_init+0x210>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	015b      	lsls	r3, r3, #5
 8001828:	4413      	add	r3, r2
 800182a:	3302      	adds	r3, #2
 800182c:	2200      	movs	r2, #0
 800182e:	801a      	strh	r2, [r3, #0]
		servos[servo_data_index].next_pos = zero_degrees;
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <additional_init+0x210>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	4413      	add	r3, r2
 8001838:	3304      	adds	r3, #4
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].delay = 0;
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <additional_init+0x210>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4413      	add	r3, r2
 8001846:	3306      	adds	r3, #6
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
		servos[servo_data_index].recipe_status = idle;
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <additional_init+0x210>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	015b      	lsls	r3, r3, #5
 8001852:	4413      	add	r3, r2
 8001854:	3308      	adds	r3, #8
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
		servos[servo_data_index].recipe_idx = 0;
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <additional_init+0x210>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	4413      	add	r3, r2
 8001862:	330c      	adds	r3, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].instr_idx = 0;
 8001868:	4a18      	ldr	r2, [pc, #96]	; (80018cc <additional_init+0x210>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	015b      	lsls	r3, r3, #5
 800186e:	4413      	add	r3, r2
 8001870:	3310      	adds	r3, #16
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].loop_cnt = 0;
 8001876:	4a15      	ldr	r2, [pc, #84]	; (80018cc <additional_init+0x210>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	4413      	add	r3, r2
 800187e:	3314      	adds	r3, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].is_in_loop = 0;
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <additional_init+0x210>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	4413      	add	r3, r2
 800188c:	3318      	adds	r3, #24
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
		servos[servo_data_index].loop_idx = 0;
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <additional_init+0x210>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	4413      	add	r3, r2
 800189a:	331c      	adds	r3, #28
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
	for(int servo_data_index; servo_data_index < 2; servo_data_index++){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3301      	adds	r3, #1
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	ddad      	ble.n	8001808 <additional_init+0x14c>
	}
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	20000000 	.word	0x20000000
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40000800 	.word	0x40000800
 80018cc:	200006ec 	.word	0x200006ec

080018d0 <main>:

int main(void){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

	System_Clock_Init();
 80018d6:	f7fe fd6b 	bl	80003b0 <System_Clock_Init>
	UART2_Init();
 80018da:	f7fe fe47 	bl	800056c <UART2_Init>
	additional_init();
 80018de:	f7ff feed 	bl	80016bc <additional_init>
	LED_Init();
 80018e2:	f7fe fccd 	bl	8000280 <LED_Init>

	write_cmd("Enter a two letter command to control each servo motor...");
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <main+0x60>)
 80018e8:	f7fe ffa4 	bl	8000834 <write_cmd>
	write_cmd("Valid letters are:");
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <main+0x64>)
 80018ee:	f7fe ffa1 	bl	8000834 <write_cmd>
	write_cmd("    --p: Pause recipe");
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <main+0x68>)
 80018f4:	f7fe ff9e 	bl	8000834 <write_cmd>
	write_cmd("    --c: Continue recipe");
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <main+0x6c>)
 80018fa:	f7fe ff9b 	bl	8000834 <write_cmd>
	write_cmd("    --r: Move servo to right");
 80018fe:	4810      	ldr	r0, [pc, #64]	; (8001940 <main+0x70>)
 8001900:	f7fe ff98 	bl	8000834 <write_cmd>
	write_cmd("    --l: Move servo to left");
 8001904:	480f      	ldr	r0, [pc, #60]	; (8001944 <main+0x74>)
 8001906:	f7fe ff95 	bl	8000834 <write_cmd>
	write_cmd("    --n: Do nothing");
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <main+0x78>)
 800190c:	f7fe ff92 	bl	8000834 <write_cmd>
	write_cmd("    --b: Start recipe");
 8001910:	480e      	ldr	r0, [pc, #56]	; (800194c <main+0x7c>)
 8001912:	f7fe ff8f 	bl	8000834 <write_cmd>

	int recipe_start = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
	while(1){
		recipe_start = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
		recipe_start = get_cmd();
 800191e:	f7ff fe69 	bl	80015f4 <get_cmd>
 8001922:	6078      	str	r0, [r7, #4]
		if(recipe_start){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f7      	beq.n	800191a <main+0x4a>
			run_recipe();
 800192a:	f7ff fbfd 	bl	8001128 <run_recipe>
		recipe_start = 0;
 800192e:	e7f4      	b.n	800191a <main+0x4a>
 8001930:	080025a8 	.word	0x080025a8
 8001934:	080025e4 	.word	0x080025e4
 8001938:	080025f8 	.word	0x080025f8
 800193c:	08002610 	.word	0x08002610
 8001940:	0800262c 	.word	0x0800262c
 8001944:	0800264c 	.word	0x0800264c
 8001948:	08002668 	.word	0x08002668
 800194c:	0800267c 	.word	0x0800267c

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f898 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f000 f890 	bl	8001af8 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20018000 	.word	0x20018000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	200006e0 	.word	0x200006e0
 8001a0c:	20000740 	.word	0x20000740

08001a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <SystemInit+0x64>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <SystemInit+0x64>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <SystemInit+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <SystemInit+0x68>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <SystemInit+0x68>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <SystemInit+0x68>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <SystemInit+0x68>)
 8001a3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <SystemInit+0x68>)
 8001a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <SystemInit+0x68>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <SystemInit+0x68>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <SystemInit+0x68>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SystemInit+0x64>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a66:	609a      	str	r2, [r3, #8]
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00
 8001a78:	40021000 	.word	0x40021000

08001a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a80:	f7ff ffc6 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a86:	e003      	b.n	8001a90 <LoopCopyDataInit>

08001a88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a8e:	3104      	adds	r1, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a90:	480a      	ldr	r0, [pc, #40]	; (8001abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a98:	d3f6      	bcc.n	8001a88 <CopyDataInit>
	ldr	r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a9c:	e002      	b.n	8001aa4 <LoopFillZerobss>

08001a9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aa0:	f842 3b04 	str.w	r3, [r2], #4

08001aa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8001aa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aa8:	d3f9      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f000 f82b 	bl	8001b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aae:	f7ff ff0f 	bl	80018d0 <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ab8:	080026d0 	.word	0x080026d0
	ldr	r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ac0:	200006c0 	.word	0x200006c0
	ldr	r2, =_sbss
 8001ac4:	200006c0 	.word	0x200006c0
	ldr	r3, = _ebss
 8001ac8:	20000740 	.word	0x20000740

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000658 	.word	0x20000658
 8001af4:	2000072c 	.word	0x2000072c

08001af8 <__errno>:
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <__errno+0x8>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000065c 	.word	0x2000065c

08001b04 <__libc_init_array>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	4d0d      	ldr	r5, [pc, #52]	; (8001b3c <__libc_init_array+0x38>)
 8001b08:	4c0d      	ldr	r4, [pc, #52]	; (8001b40 <__libc_init_array+0x3c>)
 8001b0a:	1b64      	subs	r4, r4, r5
 8001b0c:	10a4      	asrs	r4, r4, #2
 8001b0e:	2600      	movs	r6, #0
 8001b10:	42a6      	cmp	r6, r4
 8001b12:	d109      	bne.n	8001b28 <__libc_init_array+0x24>
 8001b14:	4d0b      	ldr	r5, [pc, #44]	; (8001b44 <__libc_init_array+0x40>)
 8001b16:	4c0c      	ldr	r4, [pc, #48]	; (8001b48 <__libc_init_array+0x44>)
 8001b18:	f000 fc68 	bl	80023ec <_init>
 8001b1c:	1b64      	subs	r4, r4, r5
 8001b1e:	10a4      	asrs	r4, r4, #2
 8001b20:	2600      	movs	r6, #0
 8001b22:	42a6      	cmp	r6, r4
 8001b24:	d105      	bne.n	8001b32 <__libc_init_array+0x2e>
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b2c:	4798      	blx	r3
 8001b2e:	3601      	adds	r6, #1
 8001b30:	e7ee      	b.n	8001b10 <__libc_init_array+0xc>
 8001b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b36:	4798      	blx	r3
 8001b38:	3601      	adds	r6, #1
 8001b3a:	e7f2      	b.n	8001b22 <__libc_init_array+0x1e>
 8001b3c:	080026c8 	.word	0x080026c8
 8001b40:	080026c8 	.word	0x080026c8
 8001b44:	080026c8 	.word	0x080026c8
 8001b48:	080026cc 	.word	0x080026cc

08001b4c <strcpy>:
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b52:	f803 2b01 	strb.w	r2, [r3], #1
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d1f9      	bne.n	8001b4e <strcpy+0x2>
 8001b5a:	4770      	bx	lr

08001b5c <strpbrk>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	7803      	ldrb	r3, [r0, #0]
 8001b60:	b1a3      	cbz	r3, 8001b8c <strpbrk+0x30>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001b6c:	b14d      	cbz	r5, 8001b82 <strpbrk+0x26>
 8001b6e:	460a      	mov	r2, r1
 8001b70:	e001      	b.n	8001b76 <strpbrk+0x1a>
 8001b72:	42ae      	cmp	r6, r5
 8001b74:	d009      	beq.n	8001b8a <strpbrk+0x2e>
 8001b76:	4614      	mov	r4, r2
 8001b78:	f812 6b01 	ldrb.w	r6, [r2], #1
 8001b7c:	2e00      	cmp	r6, #0
 8001b7e:	d1f8      	bne.n	8001b72 <strpbrk+0x16>
 8001b80:	e7f1      	b.n	8001b66 <strpbrk+0xa>
 8001b82:	7823      	ldrb	r3, [r4, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf08      	it	eq
 8001b88:	2000      	moveq	r0, #0
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	e7fc      	b.n	8001b8a <strpbrk+0x2e>

08001b90 <_vsiprintf_r>:
 8001b90:	b500      	push	{lr}
 8001b92:	b09b      	sub	sp, #108	; 0x6c
 8001b94:	9100      	str	r1, [sp, #0]
 8001b96:	9104      	str	r1, [sp, #16]
 8001b98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b9c:	9105      	str	r1, [sp, #20]
 8001b9e:	9102      	str	r1, [sp, #8]
 8001ba0:	4905      	ldr	r1, [pc, #20]	; (8001bb8 <_vsiprintf_r+0x28>)
 8001ba2:	9103      	str	r1, [sp, #12]
 8001ba4:	4669      	mov	r1, sp
 8001ba6:	f000 f86f 	bl	8001c88 <_svfiprintf_r>
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	b01b      	add	sp, #108	; 0x6c
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	ffff0208 	.word	0xffff0208

08001bbc <vsiprintf>:
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	460a      	mov	r2, r1
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4802      	ldr	r0, [pc, #8]	; (8001bcc <vsiprintf+0x10>)
 8001bc4:	6800      	ldr	r0, [r0, #0]
 8001bc6:	f7ff bfe3 	b.w	8001b90 <_vsiprintf_r>
 8001bca:	bf00      	nop
 8001bcc:	2000065c 	.word	0x2000065c

08001bd0 <__ssputs_r>:
 8001bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd4:	688e      	ldr	r6, [r1, #8]
 8001bd6:	429e      	cmp	r6, r3
 8001bd8:	4682      	mov	sl, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	4690      	mov	r8, r2
 8001bde:	461f      	mov	r7, r3
 8001be0:	d838      	bhi.n	8001c54 <__ssputs_r+0x84>
 8001be2:	898a      	ldrh	r2, [r1, #12]
 8001be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001be8:	d032      	beq.n	8001c50 <__ssputs_r+0x80>
 8001bea:	6825      	ldr	r5, [r4, #0]
 8001bec:	6909      	ldr	r1, [r1, #16]
 8001bee:	eba5 0901 	sub.w	r9, r5, r1
 8001bf2:	6965      	ldr	r5, [r4, #20]
 8001bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	444b      	add	r3, r9
 8001c00:	106d      	asrs	r5, r5, #1
 8001c02:	429d      	cmp	r5, r3
 8001c04:	bf38      	it	cc
 8001c06:	461d      	movcc	r5, r3
 8001c08:	0553      	lsls	r3, r2, #21
 8001c0a:	d531      	bpl.n	8001c70 <__ssputs_r+0xa0>
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f000 fb47 	bl	80022a0 <_malloc_r>
 8001c12:	4606      	mov	r6, r0
 8001c14:	b950      	cbnz	r0, 8001c2c <__ssputs_r+0x5c>
 8001c16:	230c      	movs	r3, #12
 8001c18:	f8ca 3000 	str.w	r3, [sl]
 8001c1c:	89a3      	ldrh	r3, [r4, #12]
 8001c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c22:	81a3      	strh	r3, [r4, #12]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c2c:	6921      	ldr	r1, [r4, #16]
 8001c2e:	464a      	mov	r2, r9
 8001c30:	f000 fabe 	bl	80021b0 <memcpy>
 8001c34:	89a3      	ldrh	r3, [r4, #12]
 8001c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3e:	81a3      	strh	r3, [r4, #12]
 8001c40:	6126      	str	r6, [r4, #16]
 8001c42:	6165      	str	r5, [r4, #20]
 8001c44:	444e      	add	r6, r9
 8001c46:	eba5 0509 	sub.w	r5, r5, r9
 8001c4a:	6026      	str	r6, [r4, #0]
 8001c4c:	60a5      	str	r5, [r4, #8]
 8001c4e:	463e      	mov	r6, r7
 8001c50:	42be      	cmp	r6, r7
 8001c52:	d900      	bls.n	8001c56 <__ssputs_r+0x86>
 8001c54:	463e      	mov	r6, r7
 8001c56:	4632      	mov	r2, r6
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	4641      	mov	r1, r8
 8001c5c:	f000 fab6 	bl	80021cc <memmove>
 8001c60:	68a3      	ldr	r3, [r4, #8]
 8001c62:	6822      	ldr	r2, [r4, #0]
 8001c64:	1b9b      	subs	r3, r3, r6
 8001c66:	4432      	add	r2, r6
 8001c68:	60a3      	str	r3, [r4, #8]
 8001c6a:	6022      	str	r2, [r4, #0]
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	e7db      	b.n	8001c28 <__ssputs_r+0x58>
 8001c70:	462a      	mov	r2, r5
 8001c72:	f000 fb6f 	bl	8002354 <_realloc_r>
 8001c76:	4606      	mov	r6, r0
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d1e1      	bne.n	8001c40 <__ssputs_r+0x70>
 8001c7c:	6921      	ldr	r1, [r4, #16]
 8001c7e:	4650      	mov	r0, sl
 8001c80:	f000 fabe 	bl	8002200 <_free_r>
 8001c84:	e7c7      	b.n	8001c16 <__ssputs_r+0x46>
	...

08001c88 <_svfiprintf_r>:
 8001c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	898b      	ldrh	r3, [r1, #12]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	b09d      	sub	sp, #116	; 0x74
 8001c94:	4607      	mov	r7, r0
 8001c96:	460d      	mov	r5, r1
 8001c98:	4614      	mov	r4, r2
 8001c9a:	d50e      	bpl.n	8001cba <_svfiprintf_r+0x32>
 8001c9c:	690b      	ldr	r3, [r1, #16]
 8001c9e:	b963      	cbnz	r3, 8001cba <_svfiprintf_r+0x32>
 8001ca0:	2140      	movs	r1, #64	; 0x40
 8001ca2:	f000 fafd 	bl	80022a0 <_malloc_r>
 8001ca6:	6028      	str	r0, [r5, #0]
 8001ca8:	6128      	str	r0, [r5, #16]
 8001caa:	b920      	cbnz	r0, 8001cb6 <_svfiprintf_r+0x2e>
 8001cac:	230c      	movs	r3, #12
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	e0d1      	b.n	8001e5a <_svfiprintf_r+0x1d2>
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	616b      	str	r3, [r5, #20]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cc8:	2330      	movs	r3, #48	; 0x30
 8001cca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001e74 <_svfiprintf_r+0x1ec>
 8001cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cd2:	f04f 0901 	mov.w	r9, #1
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	469a      	mov	sl, r3
 8001cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cde:	b10a      	cbz	r2, 8001ce4 <_svfiprintf_r+0x5c>
 8001ce0:	2a25      	cmp	r2, #37	; 0x25
 8001ce2:	d1f9      	bne.n	8001cd8 <_svfiprintf_r+0x50>
 8001ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8001ce8:	d00b      	beq.n	8001d02 <_svfiprintf_r+0x7a>
 8001cea:	465b      	mov	r3, fp
 8001cec:	4622      	mov	r2, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4638      	mov	r0, r7
 8001cf2:	f7ff ff6d 	bl	8001bd0 <__ssputs_r>
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	f000 80aa 	beq.w	8001e50 <_svfiprintf_r+0x1c8>
 8001cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cfe:	445a      	add	r2, fp
 8001d00:	9209      	str	r2, [sp, #36]	; 0x24
 8001d02:	f89a 3000 	ldrb.w	r3, [sl]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a2 	beq.w	8001e50 <_svfiprintf_r+0x1c8>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d16:	f10a 0a01 	add.w	sl, sl, #1
 8001d1a:	9304      	str	r3, [sp, #16]
 8001d1c:	9307      	str	r3, [sp, #28]
 8001d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d22:	931a      	str	r3, [sp, #104]	; 0x68
 8001d24:	4654      	mov	r4, sl
 8001d26:	2205      	movs	r2, #5
 8001d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d2c:	4851      	ldr	r0, [pc, #324]	; (8001e74 <_svfiprintf_r+0x1ec>)
 8001d2e:	f7fe fa57 	bl	80001e0 <memchr>
 8001d32:	9a04      	ldr	r2, [sp, #16]
 8001d34:	b9d8      	cbnz	r0, 8001d6e <_svfiprintf_r+0xe6>
 8001d36:	06d0      	lsls	r0, r2, #27
 8001d38:	bf44      	itt	mi
 8001d3a:	2320      	movmi	r3, #32
 8001d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d40:	0711      	lsls	r1, r2, #28
 8001d42:	bf44      	itt	mi
 8001d44:	232b      	movmi	r3, #43	; 0x2b
 8001d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d50:	d015      	beq.n	8001d7e <_svfiprintf_r+0xf6>
 8001d52:	9a07      	ldr	r2, [sp, #28]
 8001d54:	4654      	mov	r4, sl
 8001d56:	2000      	movs	r0, #0
 8001d58:	f04f 0c0a 	mov.w	ip, #10
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d62:	3b30      	subs	r3, #48	; 0x30
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d94e      	bls.n	8001e06 <_svfiprintf_r+0x17e>
 8001d68:	b1b0      	cbz	r0, 8001d98 <_svfiprintf_r+0x110>
 8001d6a:	9207      	str	r2, [sp, #28]
 8001d6c:	e014      	b.n	8001d98 <_svfiprintf_r+0x110>
 8001d6e:	eba0 0308 	sub.w	r3, r0, r8
 8001d72:	fa09 f303 	lsl.w	r3, r9, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	9304      	str	r3, [sp, #16]
 8001d7a:	46a2      	mov	sl, r4
 8001d7c:	e7d2      	b.n	8001d24 <_svfiprintf_r+0x9c>
 8001d7e:	9b03      	ldr	r3, [sp, #12]
 8001d80:	1d19      	adds	r1, r3, #4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bfbb      	ittet	lt
 8001d8a:	425b      	neglt	r3, r3
 8001d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8001d90:	9307      	strge	r3, [sp, #28]
 8001d92:	9307      	strlt	r3, [sp, #28]
 8001d94:	bfb8      	it	lt
 8001d96:	9204      	strlt	r2, [sp, #16]
 8001d98:	7823      	ldrb	r3, [r4, #0]
 8001d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d9c:	d10c      	bne.n	8001db8 <_svfiprintf_r+0x130>
 8001d9e:	7863      	ldrb	r3, [r4, #1]
 8001da0:	2b2a      	cmp	r3, #42	; 0x2a
 8001da2:	d135      	bne.n	8001e10 <_svfiprintf_r+0x188>
 8001da4:	9b03      	ldr	r3, [sp, #12]
 8001da6:	1d1a      	adds	r2, r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	9203      	str	r2, [sp, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bfb8      	it	lt
 8001db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8001db4:	3402      	adds	r4, #2
 8001db6:	9305      	str	r3, [sp, #20]
 8001db8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001e84 <_svfiprintf_r+0x1fc>
 8001dbc:	7821      	ldrb	r1, [r4, #0]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	4650      	mov	r0, sl
 8001dc2:	f7fe fa0d 	bl	80001e0 <memchr>
 8001dc6:	b140      	cbz	r0, 8001dda <_svfiprintf_r+0x152>
 8001dc8:	2340      	movs	r3, #64	; 0x40
 8001dca:	eba0 000a 	sub.w	r0, r0, sl
 8001dce:	fa03 f000 	lsl.w	r0, r3, r0
 8001dd2:	9b04      	ldr	r3, [sp, #16]
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	3401      	adds	r4, #1
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dde:	4826      	ldr	r0, [pc, #152]	; (8001e78 <_svfiprintf_r+0x1f0>)
 8001de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001de4:	2206      	movs	r2, #6
 8001de6:	f7fe f9fb 	bl	80001e0 <memchr>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d038      	beq.n	8001e60 <_svfiprintf_r+0x1d8>
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <_svfiprintf_r+0x1f4>)
 8001df0:	bb1b      	cbnz	r3, 8001e3a <_svfiprintf_r+0x1b2>
 8001df2:	9b03      	ldr	r3, [sp, #12]
 8001df4:	3307      	adds	r3, #7
 8001df6:	f023 0307 	bic.w	r3, r3, #7
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	9303      	str	r3, [sp, #12]
 8001dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e00:	4433      	add	r3, r6
 8001e02:	9309      	str	r3, [sp, #36]	; 0x24
 8001e04:	e767      	b.n	8001cd6 <_svfiprintf_r+0x4e>
 8001e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	e7a5      	b.n	8001d5c <_svfiprintf_r+0xd4>
 8001e10:	2300      	movs	r3, #0
 8001e12:	3401      	adds	r4, #1
 8001e14:	9305      	str	r3, [sp, #20]
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 0c0a 	mov.w	ip, #10
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e22:	3a30      	subs	r2, #48	; 0x30
 8001e24:	2a09      	cmp	r2, #9
 8001e26:	d903      	bls.n	8001e30 <_svfiprintf_r+0x1a8>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0c5      	beq.n	8001db8 <_svfiprintf_r+0x130>
 8001e2c:	9105      	str	r1, [sp, #20]
 8001e2e:	e7c3      	b.n	8001db8 <_svfiprintf_r+0x130>
 8001e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e34:	4604      	mov	r4, r0
 8001e36:	2301      	movs	r3, #1
 8001e38:	e7f0      	b.n	8001e1c <_svfiprintf_r+0x194>
 8001e3a:	ab03      	add	r3, sp, #12
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	462a      	mov	r2, r5
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <_svfiprintf_r+0x1f8>)
 8001e42:	a904      	add	r1, sp, #16
 8001e44:	4638      	mov	r0, r7
 8001e46:	f3af 8000 	nop.w
 8001e4a:	1c42      	adds	r2, r0, #1
 8001e4c:	4606      	mov	r6, r0
 8001e4e:	d1d6      	bne.n	8001dfe <_svfiprintf_r+0x176>
 8001e50:	89ab      	ldrh	r3, [r5, #12]
 8001e52:	065b      	lsls	r3, r3, #25
 8001e54:	f53f af2c 	bmi.w	8001cb0 <_svfiprintf_r+0x28>
 8001e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5a:	b01d      	add	sp, #116	; 0x74
 8001e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e60:	ab03      	add	r3, sp, #12
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	462a      	mov	r2, r5
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <_svfiprintf_r+0x1f8>)
 8001e68:	a904      	add	r1, sp, #16
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	f000 f87a 	bl	8001f64 <_printf_i>
 8001e70:	e7eb      	b.n	8001e4a <_svfiprintf_r+0x1c2>
 8001e72:	bf00      	nop
 8001e74:	08002692 	.word	0x08002692
 8001e78:	0800269c 	.word	0x0800269c
 8001e7c:	00000000 	.word	0x00000000
 8001e80:	08001bd1 	.word	0x08001bd1
 8001e84:	08002698 	.word	0x08002698

08001e88 <_printf_common>:
 8001e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e8c:	4616      	mov	r6, r2
 8001e8e:	4699      	mov	r9, r3
 8001e90:	688a      	ldr	r2, [r1, #8]
 8001e92:	690b      	ldr	r3, [r1, #16]
 8001e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	bfb8      	it	lt
 8001e9c:	4613      	movlt	r3, r2
 8001e9e:	6033      	str	r3, [r6, #0]
 8001ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ea4:	4607      	mov	r7, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	b10a      	cbz	r2, 8001eae <_printf_common+0x26>
 8001eaa:	3301      	adds	r3, #1
 8001eac:	6033      	str	r3, [r6, #0]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	0699      	lsls	r1, r3, #26
 8001eb2:	bf42      	ittt	mi
 8001eb4:	6833      	ldrmi	r3, [r6, #0]
 8001eb6:	3302      	addmi	r3, #2
 8001eb8:	6033      	strmi	r3, [r6, #0]
 8001eba:	6825      	ldr	r5, [r4, #0]
 8001ebc:	f015 0506 	ands.w	r5, r5, #6
 8001ec0:	d106      	bne.n	8001ed0 <_printf_common+0x48>
 8001ec2:	f104 0a19 	add.w	sl, r4, #25
 8001ec6:	68e3      	ldr	r3, [r4, #12]
 8001ec8:	6832      	ldr	r2, [r6, #0]
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	42ab      	cmp	r3, r5
 8001ece:	dc26      	bgt.n	8001f1e <_printf_common+0x96>
 8001ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ed4:	1e13      	subs	r3, r2, #0
 8001ed6:	6822      	ldr	r2, [r4, #0]
 8001ed8:	bf18      	it	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	0692      	lsls	r2, r2, #26
 8001ede:	d42b      	bmi.n	8001f38 <_printf_common+0xb0>
 8001ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ee4:	4649      	mov	r1, r9
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	47c0      	blx	r8
 8001eea:	3001      	adds	r0, #1
 8001eec:	d01e      	beq.n	8001f2c <_printf_common+0xa4>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	68e5      	ldr	r5, [r4, #12]
 8001ef2:	6832      	ldr	r2, [r6, #0]
 8001ef4:	f003 0306 	and.w	r3, r3, #6
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	bf08      	it	eq
 8001efc:	1aad      	subeq	r5, r5, r2
 8001efe:	68a3      	ldr	r3, [r4, #8]
 8001f00:	6922      	ldr	r2, [r4, #16]
 8001f02:	bf0c      	ite	eq
 8001f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f08:	2500      	movne	r5, #0
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	bfc4      	itt	gt
 8001f0e:	1a9b      	subgt	r3, r3, r2
 8001f10:	18ed      	addgt	r5, r5, r3
 8001f12:	2600      	movs	r6, #0
 8001f14:	341a      	adds	r4, #26
 8001f16:	42b5      	cmp	r5, r6
 8001f18:	d11a      	bne.n	8001f50 <_printf_common+0xc8>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e008      	b.n	8001f30 <_printf_common+0xa8>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4652      	mov	r2, sl
 8001f22:	4649      	mov	r1, r9
 8001f24:	4638      	mov	r0, r7
 8001f26:	47c0      	blx	r8
 8001f28:	3001      	adds	r0, #1
 8001f2a:	d103      	bne.n	8001f34 <_printf_common+0xac>
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f34:	3501      	adds	r5, #1
 8001f36:	e7c6      	b.n	8001ec6 <_printf_common+0x3e>
 8001f38:	18e1      	adds	r1, r4, r3
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	2030      	movs	r0, #48	; 0x30
 8001f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f42:	4422      	add	r2, r4
 8001f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	e7c7      	b.n	8001ee0 <_printf_common+0x58>
 8001f50:	2301      	movs	r3, #1
 8001f52:	4622      	mov	r2, r4
 8001f54:	4649      	mov	r1, r9
 8001f56:	4638      	mov	r0, r7
 8001f58:	47c0      	blx	r8
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	d0e6      	beq.n	8001f2c <_printf_common+0xa4>
 8001f5e:	3601      	adds	r6, #1
 8001f60:	e7d9      	b.n	8001f16 <_printf_common+0x8e>
	...

08001f64 <_printf_i>:
 8001f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f68:	460c      	mov	r4, r1
 8001f6a:	4691      	mov	r9, r2
 8001f6c:	7e27      	ldrb	r7, [r4, #24]
 8001f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f70:	2f78      	cmp	r7, #120	; 0x78
 8001f72:	4680      	mov	r8, r0
 8001f74:	469a      	mov	sl, r3
 8001f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f7a:	d807      	bhi.n	8001f8c <_printf_i+0x28>
 8001f7c:	2f62      	cmp	r7, #98	; 0x62
 8001f7e:	d80a      	bhi.n	8001f96 <_printf_i+0x32>
 8001f80:	2f00      	cmp	r7, #0
 8001f82:	f000 80d8 	beq.w	8002136 <_printf_i+0x1d2>
 8001f86:	2f58      	cmp	r7, #88	; 0x58
 8001f88:	f000 80a3 	beq.w	80020d2 <_printf_i+0x16e>
 8001f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f94:	e03a      	b.n	800200c <_printf_i+0xa8>
 8001f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f9a:	2b15      	cmp	r3, #21
 8001f9c:	d8f6      	bhi.n	8001f8c <_printf_i+0x28>
 8001f9e:	a001      	add	r0, pc, #4	; (adr r0, 8001fa4 <_printf_i+0x40>)
 8001fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001fa4:	08001ffd 	.word	0x08001ffd
 8001fa8:	08002011 	.word	0x08002011
 8001fac:	08001f8d 	.word	0x08001f8d
 8001fb0:	08001f8d 	.word	0x08001f8d
 8001fb4:	08001f8d 	.word	0x08001f8d
 8001fb8:	08001f8d 	.word	0x08001f8d
 8001fbc:	08002011 	.word	0x08002011
 8001fc0:	08001f8d 	.word	0x08001f8d
 8001fc4:	08001f8d 	.word	0x08001f8d
 8001fc8:	08001f8d 	.word	0x08001f8d
 8001fcc:	08001f8d 	.word	0x08001f8d
 8001fd0:	0800211d 	.word	0x0800211d
 8001fd4:	08002041 	.word	0x08002041
 8001fd8:	080020ff 	.word	0x080020ff
 8001fdc:	08001f8d 	.word	0x08001f8d
 8001fe0:	08001f8d 	.word	0x08001f8d
 8001fe4:	0800213f 	.word	0x0800213f
 8001fe8:	08001f8d 	.word	0x08001f8d
 8001fec:	08002041 	.word	0x08002041
 8001ff0:	08001f8d 	.word	0x08001f8d
 8001ff4:	08001f8d 	.word	0x08001f8d
 8001ff8:	08002107 	.word	0x08002107
 8001ffc:	680b      	ldr	r3, [r1, #0]
 8001ffe:	1d1a      	adds	r2, r3, #4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	600a      	str	r2, [r1, #0]
 8002004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800200c:	2301      	movs	r3, #1
 800200e:	e0a3      	b.n	8002158 <_printf_i+0x1f4>
 8002010:	6825      	ldr	r5, [r4, #0]
 8002012:	6808      	ldr	r0, [r1, #0]
 8002014:	062e      	lsls	r6, r5, #24
 8002016:	f100 0304 	add.w	r3, r0, #4
 800201a:	d50a      	bpl.n	8002032 <_printf_i+0xce>
 800201c:	6805      	ldr	r5, [r0, #0]
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	2d00      	cmp	r5, #0
 8002022:	da03      	bge.n	800202c <_printf_i+0xc8>
 8002024:	232d      	movs	r3, #45	; 0x2d
 8002026:	426d      	negs	r5, r5
 8002028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <_printf_i+0x244>)
 800202e:	230a      	movs	r3, #10
 8002030:	e019      	b.n	8002066 <_printf_i+0x102>
 8002032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002036:	6805      	ldr	r5, [r0, #0]
 8002038:	600b      	str	r3, [r1, #0]
 800203a:	bf18      	it	ne
 800203c:	b22d      	sxthne	r5, r5
 800203e:	e7ef      	b.n	8002020 <_printf_i+0xbc>
 8002040:	680b      	ldr	r3, [r1, #0]
 8002042:	6825      	ldr	r5, [r4, #0]
 8002044:	1d18      	adds	r0, r3, #4
 8002046:	6008      	str	r0, [r1, #0]
 8002048:	0628      	lsls	r0, r5, #24
 800204a:	d501      	bpl.n	8002050 <_printf_i+0xec>
 800204c:	681d      	ldr	r5, [r3, #0]
 800204e:	e002      	b.n	8002056 <_printf_i+0xf2>
 8002050:	0669      	lsls	r1, r5, #25
 8002052:	d5fb      	bpl.n	800204c <_printf_i+0xe8>
 8002054:	881d      	ldrh	r5, [r3, #0]
 8002056:	4854      	ldr	r0, [pc, #336]	; (80021a8 <_printf_i+0x244>)
 8002058:	2f6f      	cmp	r7, #111	; 0x6f
 800205a:	bf0c      	ite	eq
 800205c:	2308      	moveq	r3, #8
 800205e:	230a      	movne	r3, #10
 8002060:	2100      	movs	r1, #0
 8002062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002066:	6866      	ldr	r6, [r4, #4]
 8002068:	60a6      	str	r6, [r4, #8]
 800206a:	2e00      	cmp	r6, #0
 800206c:	bfa2      	ittt	ge
 800206e:	6821      	ldrge	r1, [r4, #0]
 8002070:	f021 0104 	bicge.w	r1, r1, #4
 8002074:	6021      	strge	r1, [r4, #0]
 8002076:	b90d      	cbnz	r5, 800207c <_printf_i+0x118>
 8002078:	2e00      	cmp	r6, #0
 800207a:	d04d      	beq.n	8002118 <_printf_i+0x1b4>
 800207c:	4616      	mov	r6, r2
 800207e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002082:	fb03 5711 	mls	r7, r3, r1, r5
 8002086:	5dc7      	ldrb	r7, [r0, r7]
 8002088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800208c:	462f      	mov	r7, r5
 800208e:	42bb      	cmp	r3, r7
 8002090:	460d      	mov	r5, r1
 8002092:	d9f4      	bls.n	800207e <_printf_i+0x11a>
 8002094:	2b08      	cmp	r3, #8
 8002096:	d10b      	bne.n	80020b0 <_printf_i+0x14c>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	07df      	lsls	r7, r3, #31
 800209c:	d508      	bpl.n	80020b0 <_printf_i+0x14c>
 800209e:	6923      	ldr	r3, [r4, #16]
 80020a0:	6861      	ldr	r1, [r4, #4]
 80020a2:	4299      	cmp	r1, r3
 80020a4:	bfde      	ittt	le
 80020a6:	2330      	movle	r3, #48	; 0x30
 80020a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020b0:	1b92      	subs	r2, r2, r6
 80020b2:	6122      	str	r2, [r4, #16]
 80020b4:	f8cd a000 	str.w	sl, [sp]
 80020b8:	464b      	mov	r3, r9
 80020ba:	aa03      	add	r2, sp, #12
 80020bc:	4621      	mov	r1, r4
 80020be:	4640      	mov	r0, r8
 80020c0:	f7ff fee2 	bl	8001e88 <_printf_common>
 80020c4:	3001      	adds	r0, #1
 80020c6:	d14c      	bne.n	8002162 <_printf_i+0x1fe>
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	b004      	add	sp, #16
 80020ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d2:	4835      	ldr	r0, [pc, #212]	; (80021a8 <_printf_i+0x244>)
 80020d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	680e      	ldr	r6, [r1, #0]
 80020dc:	061f      	lsls	r7, r3, #24
 80020de:	f856 5b04 	ldr.w	r5, [r6], #4
 80020e2:	600e      	str	r6, [r1, #0]
 80020e4:	d514      	bpl.n	8002110 <_printf_i+0x1ac>
 80020e6:	07d9      	lsls	r1, r3, #31
 80020e8:	bf44      	itt	mi
 80020ea:	f043 0320 	orrmi.w	r3, r3, #32
 80020ee:	6023      	strmi	r3, [r4, #0]
 80020f0:	b91d      	cbnz	r5, 80020fa <_printf_i+0x196>
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	f023 0320 	bic.w	r3, r3, #32
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	2310      	movs	r3, #16
 80020fc:	e7b0      	b.n	8002060 <_printf_i+0xfc>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	2378      	movs	r3, #120	; 0x78
 8002108:	4828      	ldr	r0, [pc, #160]	; (80021ac <_printf_i+0x248>)
 800210a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800210e:	e7e3      	b.n	80020d8 <_printf_i+0x174>
 8002110:	065e      	lsls	r6, r3, #25
 8002112:	bf48      	it	mi
 8002114:	b2ad      	uxthmi	r5, r5
 8002116:	e7e6      	b.n	80020e6 <_printf_i+0x182>
 8002118:	4616      	mov	r6, r2
 800211a:	e7bb      	b.n	8002094 <_printf_i+0x130>
 800211c:	680b      	ldr	r3, [r1, #0]
 800211e:	6826      	ldr	r6, [r4, #0]
 8002120:	6960      	ldr	r0, [r4, #20]
 8002122:	1d1d      	adds	r5, r3, #4
 8002124:	600d      	str	r5, [r1, #0]
 8002126:	0635      	lsls	r5, r6, #24
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	d501      	bpl.n	8002130 <_printf_i+0x1cc>
 800212c:	6018      	str	r0, [r3, #0]
 800212e:	e002      	b.n	8002136 <_printf_i+0x1d2>
 8002130:	0671      	lsls	r1, r6, #25
 8002132:	d5fb      	bpl.n	800212c <_printf_i+0x1c8>
 8002134:	8018      	strh	r0, [r3, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	6123      	str	r3, [r4, #16]
 800213a:	4616      	mov	r6, r2
 800213c:	e7ba      	b.n	80020b4 <_printf_i+0x150>
 800213e:	680b      	ldr	r3, [r1, #0]
 8002140:	1d1a      	adds	r2, r3, #4
 8002142:	600a      	str	r2, [r1, #0]
 8002144:	681e      	ldr	r6, [r3, #0]
 8002146:	6862      	ldr	r2, [r4, #4]
 8002148:	2100      	movs	r1, #0
 800214a:	4630      	mov	r0, r6
 800214c:	f7fe f848 	bl	80001e0 <memchr>
 8002150:	b108      	cbz	r0, 8002156 <_printf_i+0x1f2>
 8002152:	1b80      	subs	r0, r0, r6
 8002154:	6060      	str	r0, [r4, #4]
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	6123      	str	r3, [r4, #16]
 800215a:	2300      	movs	r3, #0
 800215c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002160:	e7a8      	b.n	80020b4 <_printf_i+0x150>
 8002162:	6923      	ldr	r3, [r4, #16]
 8002164:	4632      	mov	r2, r6
 8002166:	4649      	mov	r1, r9
 8002168:	4640      	mov	r0, r8
 800216a:	47d0      	blx	sl
 800216c:	3001      	adds	r0, #1
 800216e:	d0ab      	beq.n	80020c8 <_printf_i+0x164>
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	079b      	lsls	r3, r3, #30
 8002174:	d413      	bmi.n	800219e <_printf_i+0x23a>
 8002176:	68e0      	ldr	r0, [r4, #12]
 8002178:	9b03      	ldr	r3, [sp, #12]
 800217a:	4298      	cmp	r0, r3
 800217c:	bfb8      	it	lt
 800217e:	4618      	movlt	r0, r3
 8002180:	e7a4      	b.n	80020cc <_printf_i+0x168>
 8002182:	2301      	movs	r3, #1
 8002184:	4632      	mov	r2, r6
 8002186:	4649      	mov	r1, r9
 8002188:	4640      	mov	r0, r8
 800218a:	47d0      	blx	sl
 800218c:	3001      	adds	r0, #1
 800218e:	d09b      	beq.n	80020c8 <_printf_i+0x164>
 8002190:	3501      	adds	r5, #1
 8002192:	68e3      	ldr	r3, [r4, #12]
 8002194:	9903      	ldr	r1, [sp, #12]
 8002196:	1a5b      	subs	r3, r3, r1
 8002198:	42ab      	cmp	r3, r5
 800219a:	dcf2      	bgt.n	8002182 <_printf_i+0x21e>
 800219c:	e7eb      	b.n	8002176 <_printf_i+0x212>
 800219e:	2500      	movs	r5, #0
 80021a0:	f104 0619 	add.w	r6, r4, #25
 80021a4:	e7f5      	b.n	8002192 <_printf_i+0x22e>
 80021a6:	bf00      	nop
 80021a8:	080026a3 	.word	0x080026a3
 80021ac:	080026b4 	.word	0x080026b4

080021b0 <memcpy>:
 80021b0:	440a      	add	r2, r1
 80021b2:	4291      	cmp	r1, r2
 80021b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80021b8:	d100      	bne.n	80021bc <memcpy+0xc>
 80021ba:	4770      	bx	lr
 80021bc:	b510      	push	{r4, lr}
 80021be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021c6:	4291      	cmp	r1, r2
 80021c8:	d1f9      	bne.n	80021be <memcpy+0xe>
 80021ca:	bd10      	pop	{r4, pc}

080021cc <memmove>:
 80021cc:	4288      	cmp	r0, r1
 80021ce:	b510      	push	{r4, lr}
 80021d0:	eb01 0402 	add.w	r4, r1, r2
 80021d4:	d902      	bls.n	80021dc <memmove+0x10>
 80021d6:	4284      	cmp	r4, r0
 80021d8:	4623      	mov	r3, r4
 80021da:	d807      	bhi.n	80021ec <memmove+0x20>
 80021dc:	1e43      	subs	r3, r0, #1
 80021de:	42a1      	cmp	r1, r4
 80021e0:	d008      	beq.n	80021f4 <memmove+0x28>
 80021e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021ea:	e7f8      	b.n	80021de <memmove+0x12>
 80021ec:	4402      	add	r2, r0
 80021ee:	4601      	mov	r1, r0
 80021f0:	428a      	cmp	r2, r1
 80021f2:	d100      	bne.n	80021f6 <memmove+0x2a>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021fe:	e7f7      	b.n	80021f0 <memmove+0x24>

08002200 <_free_r>:
 8002200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002202:	2900      	cmp	r1, #0
 8002204:	d048      	beq.n	8002298 <_free_r+0x98>
 8002206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800220a:	9001      	str	r0, [sp, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	f1a1 0404 	sub.w	r4, r1, #4
 8002212:	bfb8      	it	lt
 8002214:	18e4      	addlt	r4, r4, r3
 8002216:	f000 f8d3 	bl	80023c0 <__malloc_lock>
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <_free_r+0x9c>)
 800221c:	9801      	ldr	r0, [sp, #4]
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	4615      	mov	r5, r2
 8002222:	b933      	cbnz	r3, 8002232 <_free_r+0x32>
 8002224:	6063      	str	r3, [r4, #4]
 8002226:	6014      	str	r4, [r2, #0]
 8002228:	b003      	add	sp, #12
 800222a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800222e:	f000 b8cd 	b.w	80023cc <__malloc_unlock>
 8002232:	42a3      	cmp	r3, r4
 8002234:	d90b      	bls.n	800224e <_free_r+0x4e>
 8002236:	6821      	ldr	r1, [r4, #0]
 8002238:	1862      	adds	r2, r4, r1
 800223a:	4293      	cmp	r3, r2
 800223c:	bf04      	itt	eq
 800223e:	681a      	ldreq	r2, [r3, #0]
 8002240:	685b      	ldreq	r3, [r3, #4]
 8002242:	6063      	str	r3, [r4, #4]
 8002244:	bf04      	itt	eq
 8002246:	1852      	addeq	r2, r2, r1
 8002248:	6022      	streq	r2, [r4, #0]
 800224a:	602c      	str	r4, [r5, #0]
 800224c:	e7ec      	b.n	8002228 <_free_r+0x28>
 800224e:	461a      	mov	r2, r3
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b10b      	cbz	r3, 8002258 <_free_r+0x58>
 8002254:	42a3      	cmp	r3, r4
 8002256:	d9fa      	bls.n	800224e <_free_r+0x4e>
 8002258:	6811      	ldr	r1, [r2, #0]
 800225a:	1855      	adds	r5, r2, r1
 800225c:	42a5      	cmp	r5, r4
 800225e:	d10b      	bne.n	8002278 <_free_r+0x78>
 8002260:	6824      	ldr	r4, [r4, #0]
 8002262:	4421      	add	r1, r4
 8002264:	1854      	adds	r4, r2, r1
 8002266:	42a3      	cmp	r3, r4
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	d1dd      	bne.n	8002228 <_free_r+0x28>
 800226c:	681c      	ldr	r4, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	6053      	str	r3, [r2, #4]
 8002272:	4421      	add	r1, r4
 8002274:	6011      	str	r1, [r2, #0]
 8002276:	e7d7      	b.n	8002228 <_free_r+0x28>
 8002278:	d902      	bls.n	8002280 <_free_r+0x80>
 800227a:	230c      	movs	r3, #12
 800227c:	6003      	str	r3, [r0, #0]
 800227e:	e7d3      	b.n	8002228 <_free_r+0x28>
 8002280:	6825      	ldr	r5, [r4, #0]
 8002282:	1961      	adds	r1, r4, r5
 8002284:	428b      	cmp	r3, r1
 8002286:	bf04      	itt	eq
 8002288:	6819      	ldreq	r1, [r3, #0]
 800228a:	685b      	ldreq	r3, [r3, #4]
 800228c:	6063      	str	r3, [r4, #4]
 800228e:	bf04      	itt	eq
 8002290:	1949      	addeq	r1, r1, r5
 8002292:	6021      	streq	r1, [r4, #0]
 8002294:	6054      	str	r4, [r2, #4]
 8002296:	e7c7      	b.n	8002228 <_free_r+0x28>
 8002298:	b003      	add	sp, #12
 800229a:	bd30      	pop	{r4, r5, pc}
 800229c:	200006e4 	.word	0x200006e4

080022a0 <_malloc_r>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	1ccd      	adds	r5, r1, #3
 80022a4:	f025 0503 	bic.w	r5, r5, #3
 80022a8:	3508      	adds	r5, #8
 80022aa:	2d0c      	cmp	r5, #12
 80022ac:	bf38      	it	cc
 80022ae:	250c      	movcc	r5, #12
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	4606      	mov	r6, r0
 80022b4:	db01      	blt.n	80022ba <_malloc_r+0x1a>
 80022b6:	42a9      	cmp	r1, r5
 80022b8:	d903      	bls.n	80022c2 <_malloc_r+0x22>
 80022ba:	230c      	movs	r3, #12
 80022bc:	6033      	str	r3, [r6, #0]
 80022be:	2000      	movs	r0, #0
 80022c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c2:	f000 f87d 	bl	80023c0 <__malloc_lock>
 80022c6:	4921      	ldr	r1, [pc, #132]	; (800234c <_malloc_r+0xac>)
 80022c8:	680a      	ldr	r2, [r1, #0]
 80022ca:	4614      	mov	r4, r2
 80022cc:	b99c      	cbnz	r4, 80022f6 <_malloc_r+0x56>
 80022ce:	4f20      	ldr	r7, [pc, #128]	; (8002350 <_malloc_r+0xb0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b923      	cbnz	r3, 80022de <_malloc_r+0x3e>
 80022d4:	4621      	mov	r1, r4
 80022d6:	4630      	mov	r0, r6
 80022d8:	f000 f862 	bl	80023a0 <_sbrk_r>
 80022dc:	6038      	str	r0, [r7, #0]
 80022de:	4629      	mov	r1, r5
 80022e0:	4630      	mov	r0, r6
 80022e2:	f000 f85d 	bl	80023a0 <_sbrk_r>
 80022e6:	1c43      	adds	r3, r0, #1
 80022e8:	d123      	bne.n	8002332 <_malloc_r+0x92>
 80022ea:	230c      	movs	r3, #12
 80022ec:	6033      	str	r3, [r6, #0]
 80022ee:	4630      	mov	r0, r6
 80022f0:	f000 f86c 	bl	80023cc <__malloc_unlock>
 80022f4:	e7e3      	b.n	80022be <_malloc_r+0x1e>
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	1b5b      	subs	r3, r3, r5
 80022fa:	d417      	bmi.n	800232c <_malloc_r+0x8c>
 80022fc:	2b0b      	cmp	r3, #11
 80022fe:	d903      	bls.n	8002308 <_malloc_r+0x68>
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	441c      	add	r4, r3
 8002304:	6025      	str	r5, [r4, #0]
 8002306:	e004      	b.n	8002312 <_malloc_r+0x72>
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	42a2      	cmp	r2, r4
 800230c:	bf0c      	ite	eq
 800230e:	600b      	streq	r3, [r1, #0]
 8002310:	6053      	strne	r3, [r2, #4]
 8002312:	4630      	mov	r0, r6
 8002314:	f000 f85a 	bl	80023cc <__malloc_unlock>
 8002318:	f104 000b 	add.w	r0, r4, #11
 800231c:	1d23      	adds	r3, r4, #4
 800231e:	f020 0007 	bic.w	r0, r0, #7
 8002322:	1ac2      	subs	r2, r0, r3
 8002324:	d0cc      	beq.n	80022c0 <_malloc_r+0x20>
 8002326:	1a1b      	subs	r3, r3, r0
 8002328:	50a3      	str	r3, [r4, r2]
 800232a:	e7c9      	b.n	80022c0 <_malloc_r+0x20>
 800232c:	4622      	mov	r2, r4
 800232e:	6864      	ldr	r4, [r4, #4]
 8002330:	e7cc      	b.n	80022cc <_malloc_r+0x2c>
 8002332:	1cc4      	adds	r4, r0, #3
 8002334:	f024 0403 	bic.w	r4, r4, #3
 8002338:	42a0      	cmp	r0, r4
 800233a:	d0e3      	beq.n	8002304 <_malloc_r+0x64>
 800233c:	1a21      	subs	r1, r4, r0
 800233e:	4630      	mov	r0, r6
 8002340:	f000 f82e 	bl	80023a0 <_sbrk_r>
 8002344:	3001      	adds	r0, #1
 8002346:	d1dd      	bne.n	8002304 <_malloc_r+0x64>
 8002348:	e7cf      	b.n	80022ea <_malloc_r+0x4a>
 800234a:	bf00      	nop
 800234c:	200006e4 	.word	0x200006e4
 8002350:	200006e8 	.word	0x200006e8

08002354 <_realloc_r>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	4607      	mov	r7, r0
 8002358:	4614      	mov	r4, r2
 800235a:	460e      	mov	r6, r1
 800235c:	b921      	cbnz	r1, 8002368 <_realloc_r+0x14>
 800235e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002362:	4611      	mov	r1, r2
 8002364:	f7ff bf9c 	b.w	80022a0 <_malloc_r>
 8002368:	b922      	cbnz	r2, 8002374 <_realloc_r+0x20>
 800236a:	f7ff ff49 	bl	8002200 <_free_r>
 800236e:	4625      	mov	r5, r4
 8002370:	4628      	mov	r0, r5
 8002372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002374:	f000 f830 	bl	80023d8 <_malloc_usable_size_r>
 8002378:	42a0      	cmp	r0, r4
 800237a:	d20f      	bcs.n	800239c <_realloc_r+0x48>
 800237c:	4621      	mov	r1, r4
 800237e:	4638      	mov	r0, r7
 8002380:	f7ff ff8e 	bl	80022a0 <_malloc_r>
 8002384:	4605      	mov	r5, r0
 8002386:	2800      	cmp	r0, #0
 8002388:	d0f2      	beq.n	8002370 <_realloc_r+0x1c>
 800238a:	4631      	mov	r1, r6
 800238c:	4622      	mov	r2, r4
 800238e:	f7ff ff0f 	bl	80021b0 <memcpy>
 8002392:	4631      	mov	r1, r6
 8002394:	4638      	mov	r0, r7
 8002396:	f7ff ff33 	bl	8002200 <_free_r>
 800239a:	e7e9      	b.n	8002370 <_realloc_r+0x1c>
 800239c:	4635      	mov	r5, r6
 800239e:	e7e7      	b.n	8002370 <_realloc_r+0x1c>

080023a0 <_sbrk_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d06      	ldr	r5, [pc, #24]	; (80023bc <_sbrk_r+0x1c>)
 80023a4:	2300      	movs	r3, #0
 80023a6:	4604      	mov	r4, r0
 80023a8:	4608      	mov	r0, r1
 80023aa:	602b      	str	r3, [r5, #0]
 80023ac:	f7ff fafa 	bl	80019a4 <_sbrk>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_sbrk_r+0x1a>
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_sbrk_r+0x1a>
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	20000730 	.word	0x20000730

080023c0 <__malloc_lock>:
 80023c0:	4801      	ldr	r0, [pc, #4]	; (80023c8 <__malloc_lock+0x8>)
 80023c2:	f000 b811 	b.w	80023e8 <__retarget_lock_acquire_recursive>
 80023c6:	bf00      	nop
 80023c8:	20000738 	.word	0x20000738

080023cc <__malloc_unlock>:
 80023cc:	4801      	ldr	r0, [pc, #4]	; (80023d4 <__malloc_unlock+0x8>)
 80023ce:	f000 b80c 	b.w	80023ea <__retarget_lock_release_recursive>
 80023d2:	bf00      	nop
 80023d4:	20000738 	.word	0x20000738

080023d8 <_malloc_usable_size_r>:
 80023d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023dc:	1f18      	subs	r0, r3, #4
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bfbc      	itt	lt
 80023e2:	580b      	ldrlt	r3, [r1, r0]
 80023e4:	18c0      	addlt	r0, r0, r3
 80023e6:	4770      	bx	lr

080023e8 <__retarget_lock_acquire_recursive>:
 80023e8:	4770      	bx	lr

080023ea <__retarget_lock_release_recursive>:
 80023ea:	4770      	bx	lr

080023ec <_init>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr

080023f8 <_fini>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	bf00      	nop
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr
