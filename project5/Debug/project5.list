
project5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005704  08005704  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800570c  0800570c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800570c  0800570c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005710  08005710  00015710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200000a4  080057b8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080057b8  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012802  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028fa  00000000  00000000  000328d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286d2  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa5c  00000000  00000000  0005f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f116b  00000000  00000000  0006f016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  001601d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005528 	.word	0x08005528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08005528 	.word	0x08005528

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08e      	sub	sp, #56	; 0x38
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 f8e9 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f981 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 fa53 	bl	8000a20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 fa21 	bl	80009c0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800057e:	f000 f9e1 	bl	8000944 <MX_SPI2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	position_t current_pos;
	current_pos.line = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
	current_pos.col = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
	#define THRESHOLD 10000
	float velocity[3]; // storage for angular velocity measurements (x,y,z) from L3GD20
	float angle[3]; // storage for integrated angles
	assert(BSP_GYRO_Init() == HAL_OK);
 800058a:	f001 f85d 	bl	8001648 <BSP_GYRO_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d005      	beq.n	80005a0 <main+0x38>
 8000594:	4ba3      	ldr	r3, [pc, #652]	; (8000824 <main+0x2bc>)
 8000596:	4aa4      	ldr	r2, [pc, #656]	; (8000828 <main+0x2c0>)
 8000598:	2173      	movs	r1, #115	; 0x73
 800059a:	48a4      	ldr	r0, [pc, #656]	; (800082c <main+0x2c4>)
 800059c:	f003 ffd8 	bl	8004550 <__assert_func>
	int col = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
	int last_col = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
	int last_line = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
	int backwards = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	int forward = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_UART_Transmit(&huart2, (uint8_t *)"\e[H", 10, 10000);
 80005b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80005b8:	220a      	movs	r2, #10
 80005ba:	499d      	ldr	r1, [pc, #628]	; (8000830 <main+0x2c8>)
 80005bc:	489d      	ldr	r0, [pc, #628]	; (8000834 <main+0x2cc>)
 80005be:	f003 f8b6 	bl	800372e <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart2, (uint8_t *)"\e[1D", 10, 10000);
//		HAL_UART_Transmit(&huart2, (uint8_t *)"\e[1C", 10, 10000);
//	}
	while (1){
		// get a new reading
		BSP_GYRO_GetXYZ(velocity);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f8a8 	bl	800171c <BSP_GYRO_GetXYZ>

		// if motion on any axis exceeds a minimum threshold
		if(fabs(velocity[0])>THRESHOLD || fabs(velocity[1])>THRESHOLD || fabs(velocity[2])>THRESHOLD){
 80005cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80005d0:	eef0 7ae7 	vabs.f32	s15, s15
 80005d4:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8000838 <main+0x2d0>
 80005d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	dc16      	bgt.n	8000610 <main+0xa8>
 80005e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80005e6:	eef0 7ae7 	vabs.f32	s15, s15
 80005ea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8000838 <main+0x2d0>
 80005ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f6:	dc0b      	bgt.n	8000610 <main+0xa8>
 80005f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80005fc:	eef0 7ae7 	vabs.f32	s15, s15
 8000600:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000838 <main+0x2d0>
 8000604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060c:	f340 8108 	ble.w	8000820 <main+0x2b8>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\e[J", 5, 10000);
 8000610:	f242 7310 	movw	r3, #10000	; 0x2710
 8000614:	2205      	movs	r2, #5
 8000616:	4989      	ldr	r1, [pc, #548]	; (800083c <main+0x2d4>)
 8000618:	4886      	ldr	r0, [pc, #536]	; (8000834 <main+0x2cc>)
 800061a:	f003 f888 	bl	800372e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *)"\e[1J", 6, 10000);
 800061e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000622:	2206      	movs	r2, #6
 8000624:	4986      	ldr	r1, [pc, #536]	; (8000840 <main+0x2d8>)
 8000626:	4883      	ldr	r0, [pc, #524]	; (8000834 <main+0x2cc>)
 8000628:	f003 f881 	bl	800372e <HAL_UART_Transmit>

			// integrate motion if it exceeds threshold on THIS axis
			for(int ii=0; ii<3; ii++) { // for x, y, z...
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
 8000630:	e02d      	b.n	800068e <main+0x126>
				if(fabs(velocity[ii])>THRESHOLD)
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800063a:	4413      	add	r3, r2
 800063c:	3b2c      	subs	r3, #44	; 0x2c
 800063e:	edd3 7a00 	vldr	s15, [r3]
 8000642:	eef0 7ae7 	vabs.f32	s15, s15
 8000646:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000838 <main+0x2d0>
 800064a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000652:	dd19      	ble.n	8000688 <main+0x120>
				angle[ii] += velocity[ii]; // ... perform integration and print
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800065c:	4413      	add	r3, r2
 800065e:	3b38      	subs	r3, #56	; 0x38
 8000660:	ed93 7a00 	vldr	s14, [r3]
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800066c:	4413      	add	r3, r2
 800066e:	3b2c      	subs	r3, #44	; 0x2c
 8000670:	edd3 7a00 	vldr	s15, [r3]
 8000674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000680:	4413      	add	r3, r2
 8000682:	3b38      	subs	r3, #56	; 0x38
 8000684:	edc3 7a00 	vstr	s15, [r3]
			for(int ii=0; ii<3; ii++) { // for x, y, z...
 8000688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068a:	3301      	adds	r3, #1
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	2b02      	cmp	r3, #2
 8000692:	ddce      	ble.n	8000632 <main+0xca>
//			// print new result
//			sprintf(buffer, "%8d %8d %8d %8d %8d %8d \r\n",
//			(int)velocity[0], (int)velocity[1], (int)velocity[2],
//			(int)angle[0], (int)angle[1], (int)(angle[2]));

			if ((int)angle[1] > last_line){
 8000694:	edd7 7a01 	vldr	s15, [r7, #4]
 8000698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069c:	ee17 2a90 	vmov	r2, s15
 80006a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a2:	4293      	cmp	r3, r2
 80006a4:	da25      	bge.n	80006f2 <main+0x18a>
				current_pos.line += 1;
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	3301      	adds	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
//				char up_code[buff_size];
//				sprintf(up_code, "\e[%dA", (int)current_pos.line);
				HAL_UART_Transmit(&huart2, (uint8_t *)".\e[1A", 5, 10000);
 80006ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80006b0:	2205      	movs	r2, #5
 80006b2:	4964      	ldr	r1, [pc, #400]	; (8000844 <main+0x2dc>)
 80006b4:	485f      	ldr	r0, [pc, #380]	; (8000834 <main+0x2cc>)
 80006b6:	f003 f83a 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"o\e[1A", 5, 10000);
 80006ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80006be:	2205      	movs	r2, #5
 80006c0:	4961      	ldr	r1, [pc, #388]	; (8000848 <main+0x2e0>)
 80006c2:	485c      	ldr	r0, [pc, #368]	; (8000834 <main+0x2cc>)
 80006c4:	f003 f833 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"O\e[1A", 5, 10000);
 80006c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80006cc:	2205      	movs	r2, #5
 80006ce:	495f      	ldr	r1, [pc, #380]	; (800084c <main+0x2e4>)
 80006d0:	4858      	ldr	r0, [pc, #352]	; (8000834 <main+0x2cc>)
 80006d2:	f003 f82c 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\e[1A", 5, 10000);
 80006d6:	f242 7310 	movw	r3, #10000	; 0x2710
 80006da:	2205      	movs	r2, #5
 80006dc:	495c      	ldr	r1, [pc, #368]	; (8000850 <main+0x2e8>)
 80006de:	4855      	ldr	r0, [pc, #340]	; (8000834 <main+0x2cc>)
 80006e0:	f003 f825 	bl	800372e <HAL_UART_Transmit>
				last_line = (int)angle[1];
 80006e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80006e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ec:	ee17 3a90 	vmov	r3, s15
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			if ((int)angle[1] < last_line){
 80006f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fa:	ee17 2a90 	vmov	r2, s15
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	4293      	cmp	r3, r2
 8000702:	dd25      	ble.n	8000750 <main+0x1e8>
				current_pos.line = current_pos.line - 1;
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3b01      	subs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
//				char down_code[buff_size];
//				sprintf(down_code, "\e[%dB", (int)current_pos.line);
				HAL_UART_Transmit(&huart2, (uint8_t *)".\e[1B", 5, 10000);
 800070a:	f242 7310 	movw	r3, #10000	; 0x2710
 800070e:	2205      	movs	r2, #5
 8000710:	4950      	ldr	r1, [pc, #320]	; (8000854 <main+0x2ec>)
 8000712:	4848      	ldr	r0, [pc, #288]	; (8000834 <main+0x2cc>)
 8000714:	f003 f80b 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"o\e[1B", 5, 10000);
 8000718:	f242 7310 	movw	r3, #10000	; 0x2710
 800071c:	2205      	movs	r2, #5
 800071e:	494e      	ldr	r1, [pc, #312]	; (8000858 <main+0x2f0>)
 8000720:	4844      	ldr	r0, [pc, #272]	; (8000834 <main+0x2cc>)
 8000722:	f003 f804 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"O\e[1B", 5, 10000);
 8000726:	f242 7310 	movw	r3, #10000	; 0x2710
 800072a:	2205      	movs	r2, #5
 800072c:	494b      	ldr	r1, [pc, #300]	; (800085c <main+0x2f4>)
 800072e:	4841      	ldr	r0, [pc, #260]	; (8000834 <main+0x2cc>)
 8000730:	f002 fffd 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\e[1B", 5, 10000);
 8000734:	f242 7310 	movw	r3, #10000	; 0x2710
 8000738:	2205      	movs	r2, #5
 800073a:	4949      	ldr	r1, [pc, #292]	; (8000860 <main+0x2f8>)
 800073c:	483d      	ldr	r0, [pc, #244]	; (8000834 <main+0x2cc>)
 800073e:	f002 fff6 	bl	800372e <HAL_UART_Transmit>
				last_line = (int)angle[1];
 8000742:	edd7 7a01 	vldr	s15, [r7, #4]
 8000746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074a:	ee17 3a90 	vmov	r3, s15
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
			}
			if ((int)angle[0] < last_col){
 8000750:	edd7 7a00 	vldr	s15, [r7]
 8000754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000758:	ee17 2a90 	vmov	r2, s15
 800075c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075e:	4293      	cmp	r3, r2
 8000760:	dd0b      	ble.n	800077a <main+0x212>
				current_pos.col = current_pos.col - 1;
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b01      	subs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
//				char left_code[buff_size];
//				sprintf(left_code, "\e[%dD", (int)current_pos.col);
				backwards = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
				last_col = (int)angle[0];
 800076c:	edd7 7a00 	vldr	s15, [r7]
 8000770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000774:	ee17 3a90 	vmov	r3, s15
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if ((int)angle[0] > last_col){
 800077a:	edd7 7a00 	vldr	s15, [r7]
 800077e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000782:	ee17 2a90 	vmov	r2, s15
 8000786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000788:	4293      	cmp	r3, r2
 800078a:	da0b      	bge.n	80007a4 <main+0x23c>
				current_pos.col += 1;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	3301      	adds	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
//				char right_code[buff_size];
//				sprintf(right_code, "\e[%dC", (int)current_pos.col);
				forward = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
				last_col = (int)angle[0];
 8000796:	edd7 7a00 	vldr	s15, [r7]
 800079a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800079e:	ee17 3a90 	vmov	r3, s15
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if (backwards){
 80007a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d016      	beq.n	80007d8 <main+0x270>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\e[8D", 5, 10000);
 80007aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ae:	2205      	movs	r2, #5
 80007b0:	492c      	ldr	r1, [pc, #176]	; (8000864 <main+0x2fc>)
 80007b2:	4820      	ldr	r0, [pc, #128]	; (8000834 <main+0x2cc>)
 80007b4:	f002 ffbb 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"Oo.", 3, 10000);
 80007b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80007bc:	2203      	movs	r2, #3
 80007be:	492a      	ldr	r1, [pc, #168]	; (8000868 <main+0x300>)
 80007c0:	481c      	ldr	r0, [pc, #112]	; (8000834 <main+0x2cc>)
 80007c2:	f002 ffb4 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\e[4D", 5, 10000);
 80007c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ca:	2205      	movs	r2, #5
 80007cc:	4927      	ldr	r1, [pc, #156]	; (800086c <main+0x304>)
 80007ce:	4819      	ldr	r0, [pc, #100]	; (8000834 <main+0x2cc>)
 80007d0:	f002 ffad 	bl	800372e <HAL_UART_Transmit>
				backwards = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if (forward){
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00f      	beq.n	80007fe <main+0x296>
				HAL_UART_Transmit(&huart2, (uint8_t *)"\e[5C", 5, 10000);
 80007de:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e2:	2205      	movs	r2, #5
 80007e4:	4922      	ldr	r1, [pc, #136]	; (8000870 <main+0x308>)
 80007e6:	4813      	ldr	r0, [pc, #76]	; (8000834 <main+0x2cc>)
 80007e8:	f002 ffa1 	bl	800372e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)".oO", 3, 10000);
 80007ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80007f0:	2203      	movs	r2, #3
 80007f2:	4920      	ldr	r1, [pc, #128]	; (8000874 <main+0x30c>)
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x2cc>)
 80007f6:	f002 ff9a 	bl	800372e <HAL_UART_Transmit>
				forward = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
			}
			last_col = (int)angle[0];
 80007fe:	edd7 7a00 	vldr	s15, [r7]
 8000802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000806:	ee17 3a90 	vmov	r3, s15
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
			last_line = (int)angle[1];
 800080c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000814:	ee17 3a90 	vmov	r3, s15
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_Delay(50);
 800081a:	2032      	movs	r0, #50	; 0x32
 800081c:	f001 f806 	bl	800182c <HAL_Delay>
		BSP_GYRO_GetXYZ(velocity);
 8000820:	e6cf      	b.n	80005c2 <main+0x5a>
 8000822:	bf00      	nop
 8000824:	08005540 	.word	0x08005540
 8000828:	080055e0 	.word	0x080055e0
 800082c:	0800555c 	.word	0x0800555c
 8000830:	08005570 	.word	0x08005570
 8000834:	20000260 	.word	0x20000260
 8000838:	461c4000 	.word	0x461c4000
 800083c:	08005574 	.word	0x08005574
 8000840:	08005578 	.word	0x08005578
 8000844:	08005580 	.word	0x08005580
 8000848:	08005588 	.word	0x08005588
 800084c:	08005590 	.word	0x08005590
 8000850:	08005598 	.word	0x08005598
 8000854:	080055a0 	.word	0x080055a0
 8000858:	080055a8 	.word	0x080055a8
 800085c:	080055b0 	.word	0x080055b0
 8000860:	080055b8 	.word	0x080055b8
 8000864:	080055c0 	.word	0x080055c0
 8000868:	080055c8 	.word	0x080055c8
 800086c:	080055cc 	.word	0x080055cc
 8000870:	080055d4 	.word	0x080055d4
 8000874:	080055dc 	.word	0x080055dc

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0b8      	sub	sp, #224	; 0xe0
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f003 febc 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2288      	movs	r2, #136	; 0x88
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 feae 	bl	8004604 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a8:	2310      	movs	r3, #16
 80008aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb88 	bl	8001fe0 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008d6:	f000 f8d3 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 ff54 	bl	80027ac <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800090a:	f000 f8b9 	bl	8000a80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800090e:	2302      	movs	r3, #2
 8000910:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000912:	2300      	movs	r3, #0
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	4618      	mov	r0, r3
 800091a:	f002 f94d 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000924:	f000 f8ac 	bl	8000a80 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000928:	f44f 7000 	mov.w	r0, #512	; 0x200
 800092c:	f001 fb02 	bl	8001f34 <HAL_PWREx_ControlVoltageScaling>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000936:	f000 f8a3 	bl	8000a80 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	37e0      	adds	r7, #224	; 0xe0
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_SPI2_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_SPI2_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000954:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI2_Init+0x74>)
 800095e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000962:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_SPI2_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000976:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_SPI2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000992:	2207      	movs	r2, #7
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_SPI2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI2_Init+0x74>)
 800099e:	2208      	movs	r2, #8
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_SPI2_Init+0x74>)
 80009a4:	f002 fdc4 	bl	8003530 <HAL_SPI_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 f867 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000134 	.word	0x20000134
 80009bc:	40003800 	.word	0x40003800

080009c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART2_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART2_UART_Init+0x58>)
 8000a04:	f002 fe45 	bl	8003692 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 f837 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000260 	.word	0x20000260
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_GPIO_Init+0x58>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <MX_GPIO_Init+0x58>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x58>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0x5c>)
 8000a52:	f001 fa49 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_GPIO_Init+0x5c>)
 8000a6c:	f001 f892 	bl	8001b94 <HAL_GPIO_Init>

}
 8000a70:	bf00      	nop
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	48000c00 	.word	0x48000c00

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08a      	sub	sp, #40	; 0x28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_SPI_MspInit+0x7c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d127      	bne.n	8000b46 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_SPI_MspInit+0x80>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000b26:	231a      	movs	r3, #26
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b36:	2305      	movs	r3, #5
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <HAL_SPI_MspInit+0x84>)
 8000b42:	f001 f827 	bl	8001b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40003800 	.word	0x40003800
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000c00 	.word	0x48000c00

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_UART_MspInit+0x8c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d12f      	bne.n	8000bde <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_UART_MspInit+0x90>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bae:	2360      	movs	r3, #96	; 0x60
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_UART_MspInit+0x94>)
 8000bca:	f000 ffe3 	bl	8001b94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2026      	movs	r0, #38	; 0x26
 8000bd4:	f000 ff29 	bl	8001a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd8:	2026      	movs	r0, #38	; 0x26
 8000bda:	f000 ff42 	bl	8001a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000c00 	.word	0x48000c00

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 fdd4 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <USART2_IRQHandler+0x10>)
 8000c4e:	f002 fe03 	bl	8003858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000260 	.word	0x20000260

08000c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_kill>:

int _kill(int pid, int sig)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c76:	f003 fc89 	bl	800458c <__errno>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2216      	movs	r2, #22
 8000c7e:	601a      	str	r2, [r3, #0]
	return -1;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_exit>:

void _exit (int status)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ffe7 	bl	8000c6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c9e:	e7fe      	b.n	8000c9e <_exit+0x12>

08000ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb2:	f3af 8000 	nop.w
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <_read+0x12>
	}

return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf1      	blt.n	8000cec <_write+0x12>
	}
	return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_close>:

int _close(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_isatty>:

int _isatty(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f003 fbee 	bl	800458c <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20018000 	.word	0x20018000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200000c0 	.word	0x200000c0
 8000de4:	200002f8 	.word	0x200002f8

08000de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <SystemInit+0x5c>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <SystemInit+0x5c>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <SystemInit+0x60>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <SystemInit+0x60>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <SystemInit+0x60>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <SystemInit+0x60>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <SystemInit+0x60>)
 8000e14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <SystemInit+0x60>)
 8000e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <SystemInit+0x60>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <SystemInit+0x60>)
 8000e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SystemInit+0x60>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	40021000 	.word	0x40021000

08000e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e50:	f7ff ffca 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e54:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e56:	e003      	b.n	8000e60 <LoopCopyDataInit>

08000e58 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e5a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e5c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e5e:	3104      	adds	r1, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e64:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e66:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e68:	d3f6      	bcc.n	8000e58 <CopyDataInit>
	ldr	r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e6c:	e002      	b.n	8000e74 <LoopFillZerobss>

08000e6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e6e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e70:	f842 3b04 	str.w	r3, [r2], #4

08000e74 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <LoopForever+0x16>)
	cmp	r2, r3
 8000e76:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e78:	d3f9      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f003 fb9f 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7e:	f7ff fb73 	bl	8000568 <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e88:	08005714 	.word	0x08005714
	ldr	r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e90:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 8000e94:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8000e98:	200002f8 	.word	0x200002f8

08000e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC1_2_IRQHandler>

08000e9e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000eac:	f000 faac 	bl	8001408 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000eb6:	f107 030f 	add.w	r3, r7, #15
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fb42 	bl	8001548 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000ece:	f107 030f 	add.w	r3, r7, #15
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2123      	movs	r1, #35	; 0x23
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fb36 	bl	8001548 <GYRO_IO_Write>
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ef8:	f000 fa86 	bl	8001408 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	2201      	movs	r2, #1
 8000f00:	210f      	movs	r1, #15
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fb5c 	bl	80015c0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2124      	movs	r1, #36	; 0x24
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fb4e 	bl	80015c0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	2201      	movs	r2, #1
 8000f32:	2124      	movs	r1, #36	; 0x24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 fb07 	bl	8001548 <GYRO_IO_Write>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 faf2 	bl	8001548 <GYRO_IO_Write>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000f7e:	f107 030f 	add.w	r3, r7, #15
 8000f82:	2201      	movs	r2, #1
 8000f84:	2130      	movs	r1, #48	; 0x30
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fb1a 	bl	80015c0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f8c:	f107 030e 	add.w	r3, r7, #14
 8000f90:	2201      	movs	r2, #1
 8000f92:	2122      	movs	r1, #34	; 0x22
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fb13 	bl	80015c0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	121b      	asrs	r3, r3, #8
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	f023 0320 	bic.w	r3, r3, #32
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2130      	movs	r1, #48	; 0x30
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fab6 	bl	8001548 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000fdc:	f107 030e 	add.w	r3, r7, #14
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2122      	movs	r1, #34	; 0x22
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 faaf 	bl	8001548 <GYRO_IO_Write>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000ffc:	f107 030f 	add.w	r3, r7, #15
 8001000:	2201      	movs	r2, #1
 8001002:	2122      	movs	r1, #34	; 0x22
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fadb 	bl	80015c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10a      	bne.n	8001026 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e00c      	b.n	8001040 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d109      	bne.n	8001040 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f023 0308 	bic.w	r3, r3, #8
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001040:	f107 030f 	add.w	r3, r7, #15
 8001044:	2201      	movs	r2, #1
 8001046:	2122      	movs	r1, #34	; 0x22
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fa7d 	bl	8001548 <GYRO_IO_Write>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001060:	f107 030f 	add.w	r3, r7, #15
 8001064:	2201      	movs	r2, #1
 8001066:	2122      	movs	r1, #34	; 0x22
 8001068:	4618      	mov	r0, r3
 800106a:	f000 faa9 	bl	80015c0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800107a:	b2db      	uxtb	r3, r3
 800107c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e009      	b.n	8001098 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d106      	bne.n	8001098 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f023 0308 	bic.w	r3, r3, #8
 8001090:	b2db      	uxtb	r3, r3
 8001092:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001098:	f107 030f 	add.w	r3, r7, #15
 800109c:	2201      	movs	r2, #1
 800109e:	2122      	movs	r1, #34	; 0x22
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fa51 	bl	8001548 <GYRO_IO_Write>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010b8:	f107 030f 	add.w	r3, r7, #15
 80010bc:	2201      	movs	r2, #1
 80010be:	2121      	movs	r1, #33	; 0x21
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fa7d 	bl	80015c0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010da:	f107 030f 	add.w	r3, r7, #15
 80010de:	2201      	movs	r2, #1
 80010e0:	2121      	movs	r1, #33	; 0x21
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fa30 	bl	8001548 <GYRO_IO_Write>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80010fa:	f107 030f 	add.w	r3, r7, #15
 80010fe:	2201      	movs	r2, #1
 8001100:	2124      	movs	r1, #36	; 0x24
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fa5c 	bl	80015c0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f023 0310 	bic.w	r3, r3, #16
 800110e:	b2db      	uxtb	r3, r3
 8001110:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4313      	orrs	r3, r2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800111c:	f107 030f 	add.w	r3, r7, #15
 8001120:	2201      	movs	r2, #1
 8001122:	2124      	movs	r1, #36	; 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fa0f 	bl	8001548 <GYRO_IO_Write>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	2300      	movs	r3, #0
 8001142:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800115c:	f107 030f 	add.w	r3, r7, #15
 8001160:	2201      	movs	r2, #1
 8001162:	2123      	movs	r1, #35	; 0x23
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fa2b 	bl	80015c0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2206      	movs	r2, #6
 8001170:	2128      	movs	r1, #40	; 0x28
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa24 	bl	80015c0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d126      	bne.n	80011d0 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	e01f      	b.n	80011c8 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	3301      	adds	r3, #1
 800118e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001192:	4413      	add	r3, r2
 8001194:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001198:	b29b      	uxth	r3, r3
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29a      	uxth	r2, r3
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011a6:	440b      	add	r3, r1
 80011a8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011bc:	440b      	add	r3, r1
 80011be:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	3301      	adds	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	dddc      	ble.n	8001188 <L3GD20_ReadXYZAngRate+0x54>
 80011ce:	e025      	b.n	800121c <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	e01f      	b.n	8001216 <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011de:	4413      	add	r3, r2
 80011e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3301      	adds	r3, #1
 80011f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011f4:	440b      	add	r3, r1
 80011f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21a      	sxth	r2, r3
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800120a:	440b      	add	r3, r1
 800120c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	3301      	adds	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b02      	cmp	r3, #2
 800121a:	dddc      	ble.n	80011d6 <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001222:	2b20      	cmp	r3, #32
 8001224:	d00c      	beq.n	8001240 <L3GD20_ReadXYZAngRate+0x10c>
 8001226:	2b20      	cmp	r3, #32
 8001228:	dc0d      	bgt.n	8001246 <L3GD20_ReadXYZAngRate+0x112>
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <L3GD20_ReadXYZAngRate+0x100>
 800122e:	2b10      	cmp	r3, #16
 8001230:	d003      	beq.n	800123a <L3GD20_ReadXYZAngRate+0x106>
 8001232:	e008      	b.n	8001246 <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <L3GD20_ReadXYZAngRate+0x158>)
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001238:	e005      	b.n	8001246 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <L3GD20_ReadXYZAngRate+0x15c>)
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800123e:	e002      	b.n	8001246 <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <L3GD20_ReadXYZAngRate+0x160>)
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001244:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	e017      	b.n	800127c <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001254:	4413      	add	r3, r2
 8001256:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	3301      	adds	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b02      	cmp	r3, #2
 8001280:	dde4      	ble.n	800124c <L3GD20_ReadXYZAngRate+0x118>
  }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	410c0000 	.word	0x410c0000
 8001290:	418c0000 	.word	0x418c0000
 8001294:	428c0000 	.word	0x428c0000

08001298 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800129c:	481a      	ldr	r0, [pc, #104]	; (8001308 <SPIx_Init+0x70>)
 800129e:	f002 f9ea 	bl	8003676 <HAL_SPI_GetState>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d12c      	bne.n	8001302 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <SPIx_Init+0x70>)
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <SPIx_Init+0x74>)
 80012ac:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <SPIx_Init+0x70>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <SPIx_Init+0x70>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <SPIx_Init+0x70>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <SPIx_Init+0x70>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <SPIx_Init+0x70>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SPIx_Init+0x70>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <SPIx_Init+0x70>)
 80012d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012d8:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <SPIx_Init+0x70>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <SPIx_Init+0x70>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <SPIx_Init+0x70>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <SPIx_Init+0x70>)
 80012f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <SPIx_Init+0x70>)
 80012f8:	f000 f80a 	bl	8001310 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <SPIx_Init+0x70>)
 80012fe:	f002 f917 	bl	8003530 <HAL_SPI_Init>
  }
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000c4 	.word	0x200000c4
 800130c:	40003800 	.word	0x40003800

08001310 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <SPIx_MspInit+0x60>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <SPIx_MspInit+0x60>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001322:	6593      	str	r3, [r2, #88]	; 0x58
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <SPIx_MspInit+0x60>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <SPIx_MspInit+0x60>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <SPIx_MspInit+0x60>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <SPIx_MspInit+0x60>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001348:	231a      	movs	r3, #26
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001358:	2305      	movs	r3, #5
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4804      	ldr	r0, [pc, #16]	; (8001374 <SPIx_MspInit+0x64>)
 8001364:	f000 fc16 	bl	8001b94 <HAL_GPIO_Init>
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000
 8001374:	48000c00 	.word	0x48000c00

08001378 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <SPIx_WriteRead+0x8c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <SPIx_WriteRead+0x8c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001390:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001392:	bf00      	nop
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <SPIx_WriteRead+0x8c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d1f8      	bne.n	8001394 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	330c      	adds	r3, #12
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80013ac:	bf00      	nop
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d1f8      	bne.n	80013ae <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	330c      	adds	r3, #12
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80013c6:	bf00      	nop
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f8      	bne.n	80013c8 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80013d6:	bf00      	nop
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	2b80      	cmp	r3, #128	; 0x80
 80013e4:	d0f8      	beq.n	80013d8 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <SPIx_WriteRead+0x8c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f4:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200000c4 	.word	0x200000c4

08001408 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a48      	ldr	r2, [pc, #288]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <GYRO_IO_Init+0x12c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	483e      	ldr	r0, [pc, #248]	; (8001538 <GYRO_IO_Init+0x130>)
 800143e:	f000 fba9 	bl	8001b94 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	483c      	ldr	r0, [pc, #240]	; (8001538 <GYRO_IO_Init+0x130>)
 8001448:	f000 fd4e 	bl	8001ee8 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <GYRO_IO_Init+0x12c>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a38      	ldr	r2, [pc, #224]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <GYRO_IO_Init+0x12c>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4830      	ldr	r0, [pc, #192]	; (800153c <GYRO_IO_Init+0x134>)
 800147c:	f000 fb8a 	bl	8001b94 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8001480:	2201      	movs	r2, #1
 8001482:	2101      	movs	r1, #1
 8001484:	482d      	ldr	r0, [pc, #180]	; (800153c <GYRO_IO_Init+0x134>)
 8001486:	f000 fd2f 	bl	8001ee8 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <GYRO_IO_Init+0x12c>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4821      	ldr	r0, [pc, #132]	; (8001540 <GYRO_IO_Init+0x138>)
 80014ba:	f000 fb6b 	bl	8001b94 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80014be:	2201      	movs	r2, #1
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	481f      	ldr	r0, [pc, #124]	; (8001540 <GYRO_IO_Init+0x138>)
 80014c4:	f000 fd10 	bl	8001ee8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <GYRO_IO_Init+0x12c>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <GYRO_IO_Init+0x12c>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <GYRO_IO_Init+0x12c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 80014e0:	2304      	movs	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <GYRO_IO_Init+0x138>)
 80014f8:	f000 fb4c 	bl	8001b94 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <GYRO_IO_Init+0x12c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <GYRO_IO_Init+0x12c>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <GYRO_IO_Init+0x12c>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8001514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001518:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4808      	ldr	r0, [pc, #32]	; (8001544 <GYRO_IO_Init+0x13c>)
 8001522:	f000 fb37 	bl	8001b94 <HAL_GPIO_Init>

  SPIx_Init();
 8001526:	f7ff feb7 	bl	8001298 <SPIx_Init>

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48001000 	.word	0x48001000
 800153c:	48000800 	.word	0x48000800
 8001540:	48000c00 	.word	0x48000c00
 8001544:	48000400 	.word	0x48000400

08001548 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
 8001554:	4613      	mov	r3, r2
 8001556:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001558:	883b      	ldrh	r3, [r7, #0]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d903      	bls.n	8001566 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001564:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <GYRO_IO_Write+0x70>)
 800156c:	f000 fcbc 	bl	8001ee8 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <GYRO_IO_Write+0x74>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <GYRO_IO_Write+0x74>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 800157e:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fef8 	bl	8001378 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001588:	e00a      	b.n	80015a0 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fef2 	bl	8001378 <SPIx_WriteRead>
    NumByteToWrite--;
 8001594:	883b      	ldrh	r3, [r7, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f1      	bne.n	800158a <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <GYRO_IO_Write+0x70>)
 80015ac:	f000 fc9c 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	200000c4 	.word	0x200000c4

080015c0 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
 80015cc:	4613      	mov	r3, r2
 80015ce:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 80015d0:	883b      	ldrh	r3, [r7, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d904      	bls.n	80015e0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80015dc:	70fb      	strb	r3, [r7, #3]
 80015de:	e003      	b.n	80015e8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015e8:	2200      	movs	r2, #0
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	4814      	ldr	r0, [pc, #80]	; (8001640 <GYRO_IO_Read+0x80>)
 80015ee:	f000 fc7b 	bl	8001ee8 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <GYRO_IO_Read+0x84>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <GYRO_IO_Read+0x84>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001600:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff feb7 	bl	8001378 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800160a:	e00c      	b.n	8001626 <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff feb3 	bl	8001378 <SPIx_WriteRead>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800161a:	883b      	ldrh	r3, [r7, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001626:	883b      	ldrh	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ef      	bne.n	800160c <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800162c:	2201      	movs	r2, #1
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	4803      	ldr	r0, [pc, #12]	; (8001640 <GYRO_IO_Read+0x80>)
 8001632:	f000 fc59 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	48000c00 	.word	0x48000c00
 8001644:	200000c4 	.word	0x200000c4

08001648 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001652:	2300      	movs	r3, #0
 8001654:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8001656:	2300      	movs	r3, #0
 8001658:	703b      	strb	r3, [r7, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <BSP_GYRO_Init+0xcc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4798      	blx	r3
 8001664:	4603      	mov	r3, r0
 8001666:	2bd4      	cmp	r3, #212	; 0xd4
 8001668:	d005      	beq.n	8001676 <BSP_GYRO_Init+0x2e>
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <BSP_GYRO_Init+0xcc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4798      	blx	r3
 8001670:	4603      	mov	r3, r0
 8001672:	2bd5      	cmp	r3, #213	; 0xd5
 8001674:	d146      	bne.n	8001704 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <BSP_GYRO_Init+0xd0>)
 8001678:	4a26      	ldr	r2, [pc, #152]	; (8001714 <BSP_GYRO_Init+0xcc>)
 800167a:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 800167c:	2308      	movs	r3, #8
 800167e:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001680:	2300      	movs	r3, #0
 8001682:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001684:	2307      	movs	r3, #7
 8001686:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001688:	2330      	movs	r3, #48	; 0x30
 800168a:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800168c:	2300      	movs	r3, #0
 800168e:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001690:	2300      	movs	r3, #0
 8001692:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8001694:	2310      	movs	r3, #16
 8001696:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001698:	793a      	ldrb	r2, [r7, #4]
 800169a:	797b      	ldrb	r3, [r7, #5]
 800169c:	4313      	orrs	r3, r2
 800169e:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016a0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016ae:	7a3a      	ldrb	r2, [r7, #8]
 80016b0:	7a7b      	ldrb	r3, [r7, #9]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 80016b6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	b29b      	uxth	r3, r3
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	89bb      	ldrh	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <BSP_GYRO_Init+0xd0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	89ba      	ldrh	r2, [r7, #12]
 80016d0:	4610      	mov	r0, r2
 80016d2:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80016d8:	2300      	movs	r3, #0
 80016da:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016dc:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 80016de:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <BSP_GYRO_Init+0xd0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	89ba      	ldrh	r2, [r7, #12]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	4610      	mov	r0, r2
 80016f2:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <BSP_GYRO_Init+0xd0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	2010      	movs	r0, #16
 80016fc:	4798      	blx	r3

    ret = GYRO_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e001      	b.n	8001708 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000004 	.word	0x20000004
 8001718:	20000128 	.word	0x20000128

0800171c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <BSP_GYRO_GetXYZ+0x24>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <BSP_GYRO_GetXYZ+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000128 	.word	0x20000128

08001744 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174e:	2003      	movs	r0, #3
 8001750:	f000 f960 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001754:	2000      	movs	r0, #0
 8001756:	f000 f80d 	bl	8001774 <HAL_InitTick>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	e001      	b.n	800176a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001766:	f7ff f991 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176a:	79fb      	ldrb	r3, [r7, #7]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_InitTick+0x70>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_InitTick+0x6c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f96d 	bl	8001a7e <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d809      	bhi.n	80017c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f937 	bl	8001a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0x74>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e004      	b.n	80017d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e001      	b.n	80017d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000003c 	.word	0x2000003c
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000038 	.word	0x20000038

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000003c 	.word	0x2000003c
 8001810:	200002e4 	.word	0x200002e4

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200002e4 	.word	0x200002e4

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000003c 	.word	0x2000003c

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d008      	beq.n	8001ac0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e022      	b.n	8001b06 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020e 	bic.w	r2, r2, #14
 8001ace:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 021c 	and.w	r2, r3, #28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d005      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e029      	b.n	8001b8a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 020e 	bic.w	r2, r2, #14
 8001b44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f003 021c 	and.w	r2, r3, #28
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
    }
  }
  return status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba2:	e17f      	b.n	8001ea4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8171 	beq.w	8001e9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00b      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c12:	2201      	movs	r2, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d118      	bne.n	8001c7c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x128>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b12      	cmp	r3, #18
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	6939      	ldr	r1, [r7, #16]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80ac 	beq.w	8001e9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	4b5f      	ldr	r3, [pc, #380]	; (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	4a5e      	ldr	r2, [pc, #376]	; (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6613      	str	r3, [r2, #96]	; 0x60
 8001d52:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <HAL_GPIO_Init+0x330>)
 8001d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d5e:	4a5a      	ldr	r2, [pc, #360]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x242>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ecc <HAL_GPIO_Init+0x338>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x23e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <HAL_GPIO_Init+0x33c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x23a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a4d      	ldr	r2, [pc, #308]	; (8001ed4 <HAL_GPIO_Init+0x340>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x236>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4c      	ldr	r2, [pc, #304]	; (8001ed8 <HAL_GPIO_Init+0x344>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x232>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <HAL_GPIO_Init+0x348>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x22e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4a      	ldr	r2, [pc, #296]	; (8001ee0 <HAL_GPIO_Init+0x34c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x22a>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x244>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de8:	4937      	ldr	r1, [pc, #220]	; (8001ec8 <HAL_GPIO_Init+0x334>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e1a:	4a32      	ldr	r2, [pc, #200]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_GPIO_Init+0x350>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f47f ae78 	bne.w	8001ba4 <HAL_GPIO_Init+0x10>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	371c      	adds	r7, #28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000800 	.word	0x48000800
 8001ed4:	48000c00 	.word	0x48000c00
 8001ed8:	48001000 	.word	0x48001000
 8001edc:	48001400 	.word	0x48001400
 8001ee0:	48001800 	.word	0x48001800
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000

08001f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f42:	d130      	bne.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f50:	d038      	beq.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2232      	movs	r2, #50	; 0x32
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0c9b      	lsrs	r3, r3, #18
 8001f74:	3301      	adds	r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f78:	e002      	b.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8c:	d102      	bne.n	8001f94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f2      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d110      	bne.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e00f      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d007      	beq.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	431bde83 	.word	0x431bde83

08001fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e3d4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff2:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffc:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80e4 	beq.w	80021dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_RCC_OscConfig+0x4a>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b0c      	cmp	r3, #12
 800201e:	f040 808b 	bne.w	8002138 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	f040 8087 	bne.w	8002138 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800202a:	4b93      	ldr	r3, [pc, #588]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e3ac      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_RCC_OscConfig+0x7c>
 8002052:	4b89      	ldr	r3, [pc, #548]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205a:	e005      	b.n	8002068 <HAL_RCC_OscConfig+0x88>
 800205c:	4b86      	ldr	r3, [pc, #536]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002068:	4293      	cmp	r3, r2
 800206a:	d223      	bcs.n	80020b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fd41 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e38d      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4977      	ldr	r1, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	4972      	ldr	r1, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e025      	b.n	8002100 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b4:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	496a      	ldr	r1, [pc, #424]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d2:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fd01 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e34d      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002100:	f000 fc36 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b5c      	ldr	r3, [pc, #368]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	495a      	ldr	r1, [pc, #360]	; (800227c <HAL_RCC_OscConfig+0x29c>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	f003 031f 	and.w	r3, r3, #31
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x2a0>)
 800211e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x2a4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fb25 	bl	8001774 <HAL_InitTick>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d052      	beq.n	80021da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	e331      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d032      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214c:	f7ff fb62 	bl	8001814 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002154:	f7ff fb5e 	bl	8001814 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e31a      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a40      	ldr	r2, [pc, #256]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b3e      	ldr	r3, [pc, #248]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	493b      	ldr	r1, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	4936      	ldr	r1, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	e01a      	b.n	80021dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb2f 	bl	8001814 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ba:	f7ff fb2b 	bl	8001814 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e2e7      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x1da>
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d074      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x21a>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d10e      	bne.n	8002212 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d064      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d160      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e2c4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x24a>
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e01d      	b.n	8002266 <HAL_RCC_OscConfig+0x286>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x26e>
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800223a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x286>
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_RCC_OscConfig+0x298>)
 8002260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226e:	f7ff fad1 	bl	8001814 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002274:	e011      	b.n	800229a <HAL_RCC_OscConfig+0x2ba>
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000
 800227c:	080055e8 	.word	0x080055e8
 8002280:	20000000 	.word	0x20000000
 8002284:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fac4 	bl	8001814 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e280      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229a:	4baf      	ldr	r3, [pc, #700]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x2a8>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff fab4 	bl	8001814 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fab0 	bl	8001814 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e26c      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c2:	4ba5      	ldr	r3, [pc, #660]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2d0>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d060      	beq.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d005      	beq.n	80022f0 <HAL_RCC_OscConfig+0x310>
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d119      	bne.n	800231e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d116      	bne.n	800231e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f0:	4b99      	ldr	r3, [pc, #612]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_OscConfig+0x328>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e249      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b93      	ldr	r3, [pc, #588]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	4990      	ldr	r1, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231c:	e040      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d023      	beq.n	800236e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff fa6f 	bl	8001814 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fa6b 	bl	8001814 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e227      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b7f      	ldr	r3, [pc, #508]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	497c      	ldr	r1, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e018      	b.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a79      	ldr	r2, [pc, #484]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff fa4b 	bl	8001814 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff fa47 	bl	8001814 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e203      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d03c      	beq.n	8002426 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b4:	4b68      	ldr	r3, [pc, #416]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ba:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c4:	f7ff fa26 	bl	8001814 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023cc:	f7ff fa22 	bl	8001814 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1de      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCC_OscConfig+0x3ec>
 80023ec:	e01b      	b.n	8002426 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fe:	f7ff fa09 	bl	8001814 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7ff fa05 	bl	8001814 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1c1      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ef      	bne.n	8002406 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80a6 	beq.w	8002580 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b44      	ldr	r3, [pc, #272]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a43      	ldr	r2, [pc, #268]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002460:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002478:	f7ff f9cc 	bl	8001814 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7ff f9c8 	bl	8001814 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e184      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x57c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4d8>
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b6:	e024      	b.n	8002502 <HAL_RCC_OscConfig+0x522>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d110      	bne.n	80024e2 <HAL_RCC_OscConfig+0x502>
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e0:	e00f      	b.n	8002502 <HAL_RCC_OscConfig+0x522>
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 80024fa:	f023 0304 	bic.w	r3, r3, #4
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d016      	beq.n	8002538 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff f983 	bl	8001814 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7ff f97f 	bl	8001814 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e139      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ed      	beq.n	8002512 <HAL_RCC_OscConfig+0x532>
 8002536:	e01a      	b.n	800256e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff f96c 	bl	8001814 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253e:	e00f      	b.n	8002560 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff f968 	bl	8001814 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d906      	bls.n	8002560 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e122      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002560:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e8      	bne.n	8002540 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256e:	7ffb      	ldrb	r3, [r7, #31]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a8a      	ldr	r2, [pc, #552]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8108 	beq.w	800279a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	2b02      	cmp	r3, #2
 8002590:	f040 80d0 	bne.w	8002734 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002594:	4b83      	ldr	r3, [pc, #524]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d130      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d127      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11f      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025d4:	2a07      	cmp	r2, #7
 80025d6:	bf14      	ite	ne
 80025d8:	2201      	movne	r2, #1
 80025da:	2200      	moveq	r2, #0
 80025dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025de:	4293      	cmp	r3, r2
 80025e0:	d113      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d109      	bne.n	800260a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d06e      	beq.n	80026e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d069      	beq.n	80026e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002610:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b7      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a5c      	ldr	r2, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002636:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7ff f8ec 	bl	8001814 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f8e8 	bl	8001814 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0a4      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002652:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x7c8>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800266e:	3a01      	subs	r2, #1
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	4311      	orrs	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002678:	0212      	lsls	r2, r2, #8
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002680:	0852      	lsrs	r2, r2, #1
 8002682:	3a01      	subs	r2, #1
 8002684:	0552      	lsls	r2, r2, #21
 8002686:	4311      	orrs	r1, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800268c:	0852      	lsrs	r2, r2, #1
 800268e:	3a01      	subs	r2, #1
 8002690:	0652      	lsls	r2, r2, #25
 8002692:	4311      	orrs	r1, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002698:	0912      	lsrs	r2, r2, #4
 800269a:	0452      	lsls	r2, r2, #17
 800269c:	430a      	orrs	r2, r1
 800269e:	4941      	ldr	r1, [pc, #260]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3e      	ldr	r2, [pc, #248]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b0:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a3b      	ldr	r2, [pc, #236]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026bc:	f7ff f8aa 	bl	8001814 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f8a6 	bl	8001814 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e062      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e2:	e05a      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e059      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d152      	bne.n	800279a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800270c:	f7ff f882 	bl	8001814 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7ff f87e 	bl	8001814 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e03a      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x734>
 8002732:	e032      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b0c      	cmp	r3, #12
 8002738:	d02d      	beq.n	8002796 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002744:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002758:	f023 0303 	bic.w	r3, r3, #3
 800275c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 8002764:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff f851 	bl	8001814 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002776:	f7ff f84d 	bl	8001814 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e009      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_RCC_OscConfig+0x7c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x796>
 8002794:	e001      	b.n	800279a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f99d808c 	.word	0xf99d808c

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4961      	ldr	r1, [pc, #388]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b5f      	ldr	r3, [pc, #380]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b0      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d04c      	beq.n	8002896 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d121      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e09e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d107      	bne.n	800282c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281c:	4b50      	ldr	r3, [pc, #320]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d115      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e092      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e086      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e07e      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002854:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 0203 	bic.w	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	493f      	ldr	r1, [pc, #252]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002866:	f7fe ffd5 	bl	8001814 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	e00a      	b.n	8002884 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7fe ffd1 	bl	8001814 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e066      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002884:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 020c 	and.w	r2, r3, #12
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d1eb      	bne.n	800286e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a2:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	4924      	ldr	r1, [pc, #144]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_RCC_ClockConfig+0x1b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e036      	b.n	8002952 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4910      	ldr	r1, [pc, #64]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002922:	f000 f825 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490c      	ldr	r1, [pc, #48]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe ff14 	bl	8001774 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
 800294e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002950:	7afb      	ldrb	r3, [r7, #11]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	080055e8 	.word	0x080055e8
 8002968:	20000000 	.word	0x20000000
 800296c:	20000038 	.word	0x20000038

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d121      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11e      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80029f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d134      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xac>
 8002a14:	e005      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a18:	617b      	str	r3, [r7, #20]
      break;
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a1e:	617b      	str	r3, [r7, #20]
      break;
 8002a20:	e002      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	617b      	str	r3, [r7, #20]
      break;
 8002a26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	fb02 f203 	mul.w	r2, r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0e5b      	lsrs	r3, r3, #25
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a68:	69bb      	ldr	r3, [r7, #24]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08005600 	.word	0x08005600
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	007a1200 	.word	0x007a1200

08002a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	080055f8 	.word	0x080055f8

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad0:	f7ff ffda 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0adb      	lsrs	r3, r3, #11
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4904      	ldr	r1, [pc, #16]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	080055f8 	.word	0x080055f8

08002af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b10:	f7ff fa02 	bl	8001f18 <HAL_PWREx_GetVoltageRange>
 8002b14:	6178      	str	r0, [r7, #20]
 8002b16:	e014      	b.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	; 0x58
 8002b24:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b30:	f7ff f9f2 	bl	8001f18 <HAL_PWREx_GetVoltageRange>
 8002b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d10b      	bne.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d919      	bls.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2ba0      	cmp	r3, #160	; 0xa0
 8002b54:	d902      	bls.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e013      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e010      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d902      	bls.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b68:	2303      	movs	r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e00a      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d102      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b74:	2302      	movs	r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e004      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d101      	bne.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b80:	2301      	movs	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 0207 	bic.w	r2, r3, #7
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d041      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bdc:	d02a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002be2:	d824      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bee:	d81e      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bfa:	e018      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bfc:	4b86      	ldr	r3, [pc, #536]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a85      	ldr	r2, [pc, #532]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c08:	e015      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fabb 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c1a:	e00c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fba6 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c2c:	e003      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	74fb      	strb	r3, [r7, #19]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3c:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4a:	4973      	ldr	r1, [pc, #460]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d041      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c72:	d824      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c7e:	d81e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c8c:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a61      	ldr	r2, [pc, #388]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c98:	e015      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fa73 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb5e 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ccc:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cda:	494f      	ldr	r1, [pc, #316]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a0 	beq.w	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fd6c 	bl	8001814 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fd68 	bl	8001814 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	74fb      	strb	r3, [r7, #19]
        break;
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d54:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d019      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db0:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fd27 	bl	8001814 <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe fd23 	bl	8001814 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d902      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	74fb      	strb	r3, [r7, #19]
            break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ec      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e06:	4904      	ldr	r1, [pc, #16]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e0e:	e009      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b9e      	ldr	r3, [pc, #632]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	4a9d      	ldr	r2, [pc, #628]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e42:	4b98      	ldr	r3, [pc, #608]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 0203 	bic.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	4994      	ldr	r1, [pc, #592]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e64:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 020c 	bic.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	498c      	ldr	r1, [pc, #560]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e86:	4b87      	ldr	r3, [pc, #540]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	4983      	ldr	r1, [pc, #524]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	497b      	ldr	r1, [pc, #492]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eca:	4b76      	ldr	r3, [pc, #472]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	4972      	ldr	r1, [pc, #456]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eec:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	496a      	ldr	r1, [pc, #424]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	4961      	ldr	r1, [pc, #388]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f30:	4b5c      	ldr	r3, [pc, #368]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	4959      	ldr	r1, [pc, #356]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f52:	4b54      	ldr	r3, [pc, #336]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	4950      	ldr	r1, [pc, #320]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f74:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	4948      	ldr	r1, [pc, #288]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	493f      	ldr	r1, [pc, #252]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d028      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	4937      	ldr	r1, [pc, #220]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b32      	ldr	r3, [pc, #200]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a31      	ldr	r2, [pc, #196]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fee:	d10c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f8c8 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003016:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	491f      	ldr	r1, [pc, #124]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003034:	d106      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003040:	60d3      	str	r3, [r2, #12]
 8003042:	e011      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f899 	bl	800318c <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02b      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003092:	d109      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a02      	ldr	r2, [pc, #8]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
 80030a0:	e014      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f867 	bl	800318c <RCCEx_PLLSAI1_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e6:	4928      	ldr	r1, [pc, #160]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f6:	d10d      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2102      	movs	r1, #2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f844 	bl	800318c <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d014      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	74bb      	strb	r3, [r7, #18]
 8003112:	e011      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3320      	adds	r3, #32
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f925 	bl	8003374 <RCCEx_PLLSAI2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003152:	490d      	ldr	r1, [pc, #52]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003176:	4904      	ldr	r1, [pc, #16]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800317e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319a:	4b75      	ldr	r3, [pc, #468]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031a6:	4b72      	ldr	r3, [pc, #456]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031be:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
       ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d047      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	e044      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d018      	beq.n	8003212 <RCCEx_PLLSAI1_Config+0x86>
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d825      	bhi.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x62>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d009      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x74>
 80031ec:	e020      	b.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ee:	4b60      	ldr	r3, [pc, #384]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e01a      	b.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003200:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e013      	b.n	800323a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003212:	4b57      	ldr	r3, [pc, #348]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321e:	4b54      	ldr	r3, [pc, #336]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322e:	e006      	b.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e004      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003236:	bf00      	nop
 8003238:	e002      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	430b      	orrs	r3, r1
 800325c:	4944      	ldr	r1, [pc, #272]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d17d      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a40      	ldr	r2, [pc, #256]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe face 	bl	8001814 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327a:	e009      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327c:	f7fe faca 	bl	8001814 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	73fb      	strb	r3, [r7, #15]
        break;
 800328e:	e005      	b.n	800329c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ef      	bne.n	800327c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d160      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	0211      	lsls	r1, r2, #8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	0912      	lsrs	r2, r2, #4
 80032c0:	0452      	lsls	r2, r2, #17
 80032c2:	430a      	orrs	r2, r1
 80032c4:	492a      	ldr	r1, [pc, #168]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	610b      	str	r3, [r1, #16]
 80032ca:	e027      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d112      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d2:	4b27      	ldr	r3, [pc, #156]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	0211      	lsls	r1, r2, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6912      	ldr	r2, [r2, #16]
 80032e8:	0852      	lsrs	r2, r2, #1
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0552      	lsls	r2, r2, #21
 80032ee:	430a      	orrs	r2, r1
 80032f0:	491f      	ldr	r1, [pc, #124]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
 80032f6:	e011      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6952      	ldr	r2, [r2, #20]
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0652      	lsls	r2, r2, #25
 8003314:	430a      	orrs	r2, r1
 8003316:	4916      	ldr	r1, [pc, #88]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe fa74 	bl	8001814 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332e:	e009      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003330:	f7fe fa70 	bl	8001814 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	73fb      	strb	r3, [r7, #15]
          break;
 8003342:	e005      	b.n	8003350 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800338e:	4b67      	ldr	r3, [pc, #412]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
       ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
       ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d047      	beq.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d018      	beq.n	80033fa <RCCEx_PLLSAI2_Config+0x86>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d825      	bhi.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <RCCEx_PLLSAI2_Config+0x62>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d009      	beq.n	80033e8 <RCCEx_PLLSAI2_Config+0x74>
 80033d4:	e020      	b.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d6:	4b55      	ldr	r3, [pc, #340]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e01a      	b.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e013      	b.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fa:	4b4c      	ldr	r3, [pc, #304]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003406:	4b49      	ldr	r3, [pc, #292]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003416:	e006      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e004      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003426:	bf00      	nop
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342e:	4b3f      	ldr	r3, [pc, #252]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	430b      	orrs	r3, r1
 8003444:	4939      	ldr	r1, [pc, #228]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d167      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a35      	ldr	r2, [pc, #212]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fe f9da 	bl	8001814 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003462:	e009      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003464:	f7fe f9d6 	bl	8001814 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	73fb      	strb	r3, [r7, #15]
        break;
 8003476:	e005      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14a      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003490:	4b26      	ldr	r3, [pc, #152]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0912      	lsrs	r2, r2, #4
 80034a8:	0452      	lsls	r2, r2, #17
 80034aa:	430a      	orrs	r2, r1
 80034ac:	491f      	ldr	r1, [pc, #124]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	614b      	str	r3, [r1, #20]
 80034b2:	e011      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	0211      	lsls	r1, r2, #8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6912      	ldr	r2, [r2, #16]
 80034ca:	0852      	lsrs	r2, r2, #1
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0652      	lsls	r2, r2, #25
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4916      	ldr	r1, [pc, #88]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe f996 	bl	8001814 <HAL_GetTick>
 80034e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ea:	e009      	b.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034ec:	f7fe f992 	bl	8001814 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d902      	bls.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	73fb      	strb	r3, [r7, #15]
          break;
 80034fe:	e005      	b.n	800350c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ef      	beq.n	80034ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4904      	ldr	r1, [pc, #16]	; (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e095      	b.n	800366e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d009      	beq.n	8003568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	e005      	b.n	8003568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd faa6 	bl	8000ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035a8:	d902      	bls.n	80035b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e002      	b.n	80035b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	ea42 0103 	orr.w	r1, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 0204 	and.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800364c:	ea42 0103 	orr.w	r1, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003684:	b2db      	uxtb	r3, r3
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e040      	b.n	8003726 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd fa51 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2224      	movs	r2, #36	; 0x24
 80036be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fae3 	bl	8003c9c <UART_SetConfig>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e022      	b.n	8003726 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fd61 	bl	80041b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fde8 	bl	80042f4 <UART_CheckIdleState>
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b08a      	sub	sp, #40	; 0x28
 8003732:	af02      	add	r7, sp, #8
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 8082 	bne.w	800384c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_UART_Transmit+0x26>
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e07a      	b.n	800384e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_UART_Transmit+0x38>
 8003762:	2302      	movs	r3, #2
 8003764:	e073      	b.n	800384e <HAL_UART_Transmit+0x120>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2221      	movs	r2, #33	; 0x21
 800377a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800377c:	f7fe f84a 	bl	8001814 <HAL_GetTick>
 8003780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d108      	bne.n	80037ae <HAL_UART_Transmit+0x80>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e003      	b.n	80037b6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037be:	e02d      	b.n	800381c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 fddb 	bl	8004386 <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e039      	b.n	800384e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ec:	b292      	uxth	r2, r2
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	3302      	adds	r3, #2
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e008      	b.n	800380a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b292      	uxth	r2, r2
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1cb      	bne.n	80037c0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fda7 	bl	8004386 <UART_WaitOnFlagUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e005      	b.n	800384e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f640 030f 	movw	r3, #2063	; 0x80f
 800387e:	4013      	ands	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d009      	beq.n	80038b0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 81ce 	beq.w	8003c42 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
      }
      return;
 80038ae:	e1c8      	b.n	8003c42 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80e3 	beq.w	8003a7e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4ba6      	ldr	r3, [pc, #664]	; (8003b60 <HAL_UART_IRQHandler+0x308>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80d8 	beq.w	8003a7e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <HAL_UART_IRQHandler+0xa2>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2201      	movs	r2, #1
 80038e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <HAL_UART_IRQHandler+0xce>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2202      	movs	r2, #2
 8003914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391c:	f043 0204 	orr.w	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d010      	beq.n	8003952 <HAL_UART_IRQHandler+0xfa>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2204      	movs	r2, #4
 8003940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003948:	f043 0202 	orr.w	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d015      	beq.n	8003988 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d104      	bne.n	8003970 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2208      	movs	r2, #8
 8003976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397e:	f043 0208 	orr.w	r2, r3, #8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	2b00      	cmp	r3, #0
 8003990:	d011      	beq.n	80039b6 <HAL_UART_IRQHandler+0x15e>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00c      	beq.n	80039b6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 8142 	beq.w	8003c46 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00c      	beq.n	80039e6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d004      	beq.n	8003a06 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d031      	beq.n	8003a6a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fd39 	bl	800447e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d123      	bne.n	8003a62 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_UART_IRQHandler+0x30c>)
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe f867 	bl	8001b12 <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00f      	b.n	8003a7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f908 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e00b      	b.n	8003a7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f904 	bl	8003c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e007      	b.n	8003a7a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f900 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a78:	e0e5      	b.n	8003c46 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7a:	bf00      	nop
    return;
 8003a7c:	e0e3      	b.n	8003c46 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f040 80a9 	bne.w	8003bda <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a3 	beq.w	8003bda <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 809d 	beq.w	8003bda <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d158      	bne.n	8003b68 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80c1 	beq.w	8003c4a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ace:	893a      	ldrh	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f080 80ba 	bcs.w	8003c4a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d12a      	bne.n	8003b44 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0210 	bic.w	r2, r2, #16
 8003b38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd ffa9 	bl	8001a96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	4619      	mov	r1, r3
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f893 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b5e:	e074      	b.n	8003c4a <HAL_UART_IRQHandler+0x3f2>
 8003b60:	04000120 	.word	0x04000120
 8003b64:	080044dd 	.word	0x080044dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003b86:	897b      	ldrh	r3, [r7, #10]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d060      	beq.n	8003c4e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0210 	bic.w	r2, r2, #16
 8003bcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f856 	bl	8003c84 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bd8:	e039      	b.n	8003c4e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <HAL_UART_IRQHandler+0x3a8>
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fc9e 	bl	800453a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bfe:	e029      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01a      	beq.n	8003c52 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
    }
    return;
 8003c24:	e015      	b.n	8003c52 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d011      	beq.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fc64 	bl	8004508 <UART_EndTransmit_IT>
    return;
 8003c40:	e008      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c42:	bf00      	nop
 8003c44:	e006      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c46:	bf00      	nop
 8003c48:	e004      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c4a:	bf00      	nop
 8003c4c:	e002      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
      return;
 8003c4e:	bf00      	nop
 8003c50:	e000      	b.n	8003c54 <HAL_UART_IRQHandler+0x3fc>
    return;
 8003c52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop

08003c5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4bad      	ldr	r3, [pc, #692]	; (8003f7c <UART_SetConfig+0x2e0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	69f9      	ldr	r1, [r7, #28]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4aa2      	ldr	r2, [pc, #648]	; (8003f80 <UART_SetConfig+0x2e4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a99      	ldr	r2, [pc, #612]	; (8003f84 <UART_SetConfig+0x2e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d121      	bne.n	8003d66 <UART_SetConfig+0xca>
 8003d22:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d817      	bhi.n	8003d60 <UART_SetConfig+0xc4>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <UART_SetConfig+0x9c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d49 	.word	0x08003d49
 8003d3c:	08003d55 	.word	0x08003d55
 8003d40:	08003d4f 	.word	0x08003d4f
 8003d44:	08003d5b 	.word	0x08003d5b
 8003d48:	2301      	movs	r3, #1
 8003d4a:	76fb      	strb	r3, [r7, #27]
 8003d4c:	e0e7      	b.n	8003f1e <UART_SetConfig+0x282>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	76fb      	strb	r3, [r7, #27]
 8003d52:	e0e4      	b.n	8003f1e <UART_SetConfig+0x282>
 8003d54:	2304      	movs	r3, #4
 8003d56:	76fb      	strb	r3, [r7, #27]
 8003d58:	e0e1      	b.n	8003f1e <UART_SetConfig+0x282>
 8003d5a:	2308      	movs	r3, #8
 8003d5c:	76fb      	strb	r3, [r7, #27]
 8003d5e:	e0de      	b.n	8003f1e <UART_SetConfig+0x282>
 8003d60:	2310      	movs	r3, #16
 8003d62:	76fb      	strb	r3, [r7, #27]
 8003d64:	e0db      	b.n	8003f1e <UART_SetConfig+0x282>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a88      	ldr	r2, [pc, #544]	; (8003f8c <UART_SetConfig+0x2f0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d132      	bne.n	8003dd6 <UART_SetConfig+0x13a>
 8003d70:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d828      	bhi.n	8003dd0 <UART_SetConfig+0x134>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <UART_SetConfig+0xe8>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003dd1 	.word	0x08003dd1
 8003d8c:	08003dd1 	.word	0x08003dd1
 8003d90:	08003dd1 	.word	0x08003dd1
 8003d94:	08003dc5 	.word	0x08003dc5
 8003d98:	08003dd1 	.word	0x08003dd1
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003dd1 	.word	0x08003dd1
 8003da4:	08003dbf 	.word	0x08003dbf
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003dd1 	.word	0x08003dd1
 8003db4:	08003dcb 	.word	0x08003dcb
 8003db8:	2300      	movs	r3, #0
 8003dba:	76fb      	strb	r3, [r7, #27]
 8003dbc:	e0af      	b.n	8003f1e <UART_SetConfig+0x282>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	76fb      	strb	r3, [r7, #27]
 8003dc2:	e0ac      	b.n	8003f1e <UART_SetConfig+0x282>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	76fb      	strb	r3, [r7, #27]
 8003dc8:	e0a9      	b.n	8003f1e <UART_SetConfig+0x282>
 8003dca:	2308      	movs	r3, #8
 8003dcc:	76fb      	strb	r3, [r7, #27]
 8003dce:	e0a6      	b.n	8003f1e <UART_SetConfig+0x282>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e0a3      	b.n	8003f1e <UART_SetConfig+0x282>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6d      	ldr	r2, [pc, #436]	; (8003f90 <UART_SetConfig+0x2f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d120      	bne.n	8003e22 <UART_SetConfig+0x186>
 8003de0:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d013      	beq.n	8003e16 <UART_SetConfig+0x17a>
 8003dee:	2b30      	cmp	r3, #48	; 0x30
 8003df0:	d814      	bhi.n	8003e1c <UART_SetConfig+0x180>
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d009      	beq.n	8003e0a <UART_SetConfig+0x16e>
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d810      	bhi.n	8003e1c <UART_SetConfig+0x180>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x168>
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d006      	beq.n	8003e10 <UART_SetConfig+0x174>
 8003e02:	e00b      	b.n	8003e1c <UART_SetConfig+0x180>
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e089      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	76fb      	strb	r3, [r7, #27]
 8003e0e:	e086      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e10:	2304      	movs	r3, #4
 8003e12:	76fb      	strb	r3, [r7, #27]
 8003e14:	e083      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e16:	2308      	movs	r3, #8
 8003e18:	76fb      	strb	r3, [r7, #27]
 8003e1a:	e080      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e07d      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5b      	ldr	r2, [pc, #364]	; (8003f94 <UART_SetConfig+0x2f8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d120      	bne.n	8003e6e <UART_SetConfig+0x1d2>
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e36:	2bc0      	cmp	r3, #192	; 0xc0
 8003e38:	d013      	beq.n	8003e62 <UART_SetConfig+0x1c6>
 8003e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e3c:	d814      	bhi.n	8003e68 <UART_SetConfig+0x1cc>
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d009      	beq.n	8003e56 <UART_SetConfig+0x1ba>
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d810      	bhi.n	8003e68 <UART_SetConfig+0x1cc>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <UART_SetConfig+0x1b4>
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d006      	beq.n	8003e5c <UART_SetConfig+0x1c0>
 8003e4e:	e00b      	b.n	8003e68 <UART_SetConfig+0x1cc>
 8003e50:	2300      	movs	r3, #0
 8003e52:	76fb      	strb	r3, [r7, #27]
 8003e54:	e063      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e56:	2302      	movs	r3, #2
 8003e58:	76fb      	strb	r3, [r7, #27]
 8003e5a:	e060      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	76fb      	strb	r3, [r7, #27]
 8003e60:	e05d      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e62:	2308      	movs	r3, #8
 8003e64:	76fb      	strb	r3, [r7, #27]
 8003e66:	e05a      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	76fb      	strb	r3, [r7, #27]
 8003e6c:	e057      	b.n	8003f1e <UART_SetConfig+0x282>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a49      	ldr	r2, [pc, #292]	; (8003f98 <UART_SetConfig+0x2fc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d125      	bne.n	8003ec4 <UART_SetConfig+0x228>
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e86:	d017      	beq.n	8003eb8 <UART_SetConfig+0x21c>
 8003e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8c:	d817      	bhi.n	8003ebe <UART_SetConfig+0x222>
 8003e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e92:	d00b      	beq.n	8003eac <UART_SetConfig+0x210>
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d811      	bhi.n	8003ebe <UART_SetConfig+0x222>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <UART_SetConfig+0x20a>
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea2:	d006      	beq.n	8003eb2 <UART_SetConfig+0x216>
 8003ea4:	e00b      	b.n	8003ebe <UART_SetConfig+0x222>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	76fb      	strb	r3, [r7, #27]
 8003eaa:	e038      	b.n	8003f1e <UART_SetConfig+0x282>
 8003eac:	2302      	movs	r3, #2
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	e035      	b.n	8003f1e <UART_SetConfig+0x282>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	76fb      	strb	r3, [r7, #27]
 8003eb6:	e032      	b.n	8003f1e <UART_SetConfig+0x282>
 8003eb8:	2308      	movs	r3, #8
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e02f      	b.n	8003f1e <UART_SetConfig+0x282>
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	e02c      	b.n	8003f1e <UART_SetConfig+0x282>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <UART_SetConfig+0x2e4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d125      	bne.n	8003f1a <UART_SetConfig+0x27e>
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <UART_SetConfig+0x2ec>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003edc:	d017      	beq.n	8003f0e <UART_SetConfig+0x272>
 8003ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ee2:	d817      	bhi.n	8003f14 <UART_SetConfig+0x278>
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d00b      	beq.n	8003f02 <UART_SetConfig+0x266>
 8003eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eee:	d811      	bhi.n	8003f14 <UART_SetConfig+0x278>
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <UART_SetConfig+0x260>
 8003ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef8:	d006      	beq.n	8003f08 <UART_SetConfig+0x26c>
 8003efa:	e00b      	b.n	8003f14 <UART_SetConfig+0x278>
 8003efc:	2300      	movs	r3, #0
 8003efe:	76fb      	strb	r3, [r7, #27]
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x282>
 8003f02:	2302      	movs	r3, #2
 8003f04:	76fb      	strb	r3, [r7, #27]
 8003f06:	e00a      	b.n	8003f1e <UART_SetConfig+0x282>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	76fb      	strb	r3, [r7, #27]
 8003f0c:	e007      	b.n	8003f1e <UART_SetConfig+0x282>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e004      	b.n	8003f1e <UART_SetConfig+0x282>
 8003f14:	2310      	movs	r3, #16
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e001      	b.n	8003f1e <UART_SetConfig+0x282>
 8003f1a:	2310      	movs	r3, #16
 8003f1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <UART_SetConfig+0x2e4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f040 8087 	bne.w	8004038 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f2a:	7efb      	ldrb	r3, [r7, #27]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d837      	bhi.n	8003fa0 <UART_SetConfig+0x304>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x29c>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003fa1 	.word	0x08003fa1
 8003f48:	08003f6b 	.word	0x08003f6b
 8003f4c:	08003fa1 	.word	0x08003fa1
 8003f50:	08003fa1 	.word	0x08003fa1
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe fda0 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e022      	b.n	8003faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <UART_SetConfig+0x300>)
 8003f66:	617b      	str	r3, [r7, #20]
        break;
 8003f68:	e01f      	b.n	8003faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fd01 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6178      	str	r0, [r7, #20]
        break;
 8003f70:	e01b      	b.n	8003faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e017      	b.n	8003faa <UART_SetConfig+0x30e>
 8003f7a:	bf00      	nop
 8003f7c:	efff69f3 	.word	0xefff69f3
 8003f80:	40008000 	.word	0x40008000
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40004400 	.word	0x40004400
 8003f90:	40004800 	.word	0x40004800
 8003f94:	40004c00 	.word	0x40004c00
 8003f98:	40005000 	.word	0x40005000
 8003f9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	76bb      	strb	r3, [r7, #26]
        break;
 8003fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80f1 	beq.w	8004194 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d305      	bcc.n	8003fce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d902      	bls.n	8003fd4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	76bb      	strb	r3, [r7, #26]
 8003fd2:	e0df      	b.n	8004194 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	020b      	lsls	r3, r1, #8
 8003fe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fea:	0202      	lsls	r2, r0, #8
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	6849      	ldr	r1, [r1, #4]
 8003ff0:	0849      	lsrs	r1, r1, #1
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	f04f 0100 	mov.w	r1, #0
 8003ff8:	1814      	adds	r4, r2, r0
 8003ffa:	eb43 0501 	adc.w	r5, r3, r1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	4620      	mov	r0, r4
 800400a:	4629      	mov	r1, r5
 800400c:	f7fc f930 	bl	8000270 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401e:	d308      	bcc.n	8004032 <UART_SetConfig+0x396>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004026:	d204      	bcs.n	8004032 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e0b0      	b.n	8004194 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	76bb      	strb	r3, [r7, #26]
 8004036:	e0ad      	b.n	8004194 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004040:	d15c      	bne.n	80040fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004042:	7efb      	ldrb	r3, [r7, #27]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d828      	bhi.n	800409a <UART_SetConfig+0x3fe>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x3b4>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800409b 	.word	0x0800409b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
 8004070:	08004093 	.word	0x08004093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fd14 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8004078:	6178      	str	r0, [r7, #20]
        break;
 800407a:	e013      	b.n	80040a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7fe fd26 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8004080:	6178      	str	r0, [r7, #20]
        break;
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004084:	4b49      	ldr	r3, [pc, #292]	; (80041ac <UART_SetConfig+0x510>)
 8004086:	617b      	str	r3, [r7, #20]
        break;
 8004088:	e00c      	b.n	80040a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7fe fc71 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800408e:	6178      	str	r0, [r7, #20]
        break;
 8004090:	e008      	b.n	80040a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	617b      	str	r3, [r7, #20]
        break;
 8004098:	e004      	b.n	80040a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	76bb      	strb	r3, [r7, #26]
        break;
 80040a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d074      	beq.n	8004194 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	005a      	lsls	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	441a      	add	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d916      	bls.n	80040f6 <UART_SetConfig+0x45a>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d212      	bcs.n	80040f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f023 030f 	bic.w	r3, r3, #15
 80040d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	89fa      	ldrh	r2, [r7, #14]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e04e      	b.n	8004194 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	76bb      	strb	r3, [r7, #26]
 80040fa:	e04b      	b.n	8004194 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d827      	bhi.n	8004152 <UART_SetConfig+0x4b6>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x46c>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	0800412d 	.word	0x0800412d
 800410c:	08004135 	.word	0x08004135
 8004110:	0800413d 	.word	0x0800413d
 8004114:	08004153 	.word	0x08004153
 8004118:	08004143 	.word	0x08004143
 800411c:	08004153 	.word	0x08004153
 8004120:	08004153 	.word	0x08004153
 8004124:	08004153 	.word	0x08004153
 8004128:	0800414b 	.word	0x0800414b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7fe fcb8 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8004130:	6178      	str	r0, [r7, #20]
        break;
 8004132:	e013      	b.n	800415c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004134:	f7fe fcca 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8004138:	6178      	str	r0, [r7, #20]
        break;
 800413a:	e00f      	b.n	800415c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <UART_SetConfig+0x510>)
 800413e:	617b      	str	r3, [r7, #20]
        break;
 8004140:	e00c      	b.n	800415c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004142:	f7fe fc15 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8004146:	6178      	str	r0, [r7, #20]
        break;
 8004148:	e008      	b.n	800415c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414e:	617b      	str	r3, [r7, #20]
        break;
 8004150:	e004      	b.n	800415c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	76bb      	strb	r3, [r7, #26]
        break;
 800415a:	bf00      	nop
    }

    if (pclk != 0U)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085a      	lsrs	r2, r3, #1
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	b29b      	uxth	r3, r3
 8004176:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d908      	bls.n	8004190 <UART_SetConfig+0x4f4>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d204      	bcs.n	8004190 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	60da      	str	r2, [r3, #12]
 800418e:	e001      	b.n	8004194 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ae:	d10a      	bne.n	80042c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004304:	f7fd fa86 	bl	8001814 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10e      	bne.n	8004336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f82d 	bl	8004386 <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e023      	b.n	800437e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d10e      	bne.n	8004362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f817 	bl	8004386 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00d      	b.n	800437e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004396:	e05e      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d05a      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a0:	f7fd fa38 	bl	8001814 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d11b      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e043      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02c      	beq.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440a:	d124      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004414:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004424:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e00f      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d091      	beq.n	8004398 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004494:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0210 	bic.w	r2, r2, #16
 80044bc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff fbb8 	bl	8003c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fb95 	bl	8003c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <__assert_func>:
 8004550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004552:	4614      	mov	r4, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4b09      	ldr	r3, [pc, #36]	; (800457c <__assert_func+0x2c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4605      	mov	r5, r0
 800455c:	68d8      	ldr	r0, [r3, #12]
 800455e:	b14c      	cbz	r4, 8004574 <__assert_func+0x24>
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <__assert_func+0x30>)
 8004562:	9100      	str	r1, [sp, #0]
 8004564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004568:	4906      	ldr	r1, [pc, #24]	; (8004584 <__assert_func+0x34>)
 800456a:	462b      	mov	r3, r5
 800456c:	f000 f814 	bl	8004598 <fiprintf>
 8004570:	f000 fbfe 	bl	8004d70 <abort>
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <__assert_func+0x38>)
 8004576:	461c      	mov	r4, r3
 8004578:	e7f3      	b.n	8004562 <__assert_func+0x12>
 800457a:	bf00      	nop
 800457c:	20000040 	.word	0x20000040
 8004580:	08005630 	.word	0x08005630
 8004584:	0800563d 	.word	0x0800563d
 8004588:	0800566b 	.word	0x0800566b

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000040 	.word	0x20000040

08004598 <fiprintf>:
 8004598:	b40e      	push	{r1, r2, r3}
 800459a:	b503      	push	{r0, r1, lr}
 800459c:	4601      	mov	r1, r0
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	4805      	ldr	r0, [pc, #20]	; (80045b8 <fiprintf+0x20>)
 80045a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	f000 f85d 	bl	8004668 <_vfiprintf_r>
 80045ae:	b002      	add	sp, #8
 80045b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b4:	b003      	add	sp, #12
 80045b6:	4770      	bx	lr
 80045b8:	20000040 	.word	0x20000040

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 ffaa 	bl	8005528 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	0800570c 	.word	0x0800570c
 80045f8:	0800570c 	.word	0x0800570c
 80045fc:	0800570c 	.word	0x0800570c
 8004600:	08005710 	.word	0x08005710

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <__sfputc_r>:
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	3b01      	subs	r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	b410      	push	{r4}
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	da08      	bge.n	8004632 <__sfputc_r+0x1e>
 8004620:	6994      	ldr	r4, [r2, #24]
 8004622:	42a3      	cmp	r3, r4
 8004624:	db01      	blt.n	800462a <__sfputc_r+0x16>
 8004626:	290a      	cmp	r1, #10
 8004628:	d103      	bne.n	8004632 <__sfputc_r+0x1e>
 800462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800462e:	f000 badf 	b.w	8004bf0 <__swbuf_r>
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	1c58      	adds	r0, r3, #1
 8004636:	6010      	str	r0, [r2, #0]
 8004638:	7019      	strb	r1, [r3, #0]
 800463a:	4608      	mov	r0, r1
 800463c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004640:	4770      	bx	lr

08004642 <__sfputs_r>:
 8004642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	4614      	mov	r4, r2
 800464a:	18d5      	adds	r5, r2, r3
 800464c:	42ac      	cmp	r4, r5
 800464e:	d101      	bne.n	8004654 <__sfputs_r+0x12>
 8004650:	2000      	movs	r0, #0
 8004652:	e007      	b.n	8004664 <__sfputs_r+0x22>
 8004654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004658:	463a      	mov	r2, r7
 800465a:	4630      	mov	r0, r6
 800465c:	f7ff ffda 	bl	8004614 <__sfputc_r>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d1f3      	bne.n	800464c <__sfputs_r+0xa>
 8004664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004668 <_vfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	460d      	mov	r5, r1
 800466e:	b09d      	sub	sp, #116	; 0x74
 8004670:	4614      	mov	r4, r2
 8004672:	4698      	mov	r8, r3
 8004674:	4606      	mov	r6, r0
 8004676:	b118      	cbz	r0, 8004680 <_vfiprintf_r+0x18>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_vfiprintf_r+0x18>
 800467c:	f000 fc9a 	bl	8004fb4 <__sinit>
 8004680:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <_vfiprintf_r+0x240>)
 8004682:	429d      	cmp	r5, r3
 8004684:	d11b      	bne.n	80046be <_vfiprintf_r+0x56>
 8004686:	6875      	ldr	r5, [r6, #4]
 8004688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x32>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x32>
 8004694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004696:	f000 fd2b 	bl	80050f0 <__retarget_lock_acquire_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	d501      	bpl.n	80046a4 <_vfiprintf_r+0x3c>
 80046a0:	692b      	ldr	r3, [r5, #16]
 80046a2:	b9eb      	cbnz	r3, 80046e0 <_vfiprintf_r+0x78>
 80046a4:	4629      	mov	r1, r5
 80046a6:	4630      	mov	r0, r6
 80046a8:	f000 faf4 	bl	8004c94 <__swsetup_r>
 80046ac:	b1c0      	cbz	r0, 80046e0 <_vfiprintf_r+0x78>
 80046ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b0:	07dc      	lsls	r4, r3, #31
 80046b2:	d50e      	bpl.n	80046d2 <_vfiprintf_r+0x6a>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295
 80046b8:	b01d      	add	sp, #116	; 0x74
 80046ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046be:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <_vfiprintf_r+0x244>)
 80046c0:	429d      	cmp	r5, r3
 80046c2:	d101      	bne.n	80046c8 <_vfiprintf_r+0x60>
 80046c4:	68b5      	ldr	r5, [r6, #8]
 80046c6:	e7df      	b.n	8004688 <_vfiprintf_r+0x20>
 80046c8:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <_vfiprintf_r+0x248>)
 80046ca:	429d      	cmp	r5, r3
 80046cc:	bf08      	it	eq
 80046ce:	68f5      	ldreq	r5, [r6, #12]
 80046d0:	e7da      	b.n	8004688 <_vfiprintf_r+0x20>
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	0598      	lsls	r0, r3, #22
 80046d6:	d4ed      	bmi.n	80046b4 <_vfiprintf_r+0x4c>
 80046d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046da:	f000 fd0a 	bl	80050f2 <__retarget_lock_release_recursive>
 80046de:	e7e9      	b.n	80046b4 <_vfiprintf_r+0x4c>
 80046e0:	2300      	movs	r3, #0
 80046e2:	9309      	str	r3, [sp, #36]	; 0x24
 80046e4:	2320      	movs	r3, #32
 80046e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ee:	2330      	movs	r3, #48	; 0x30
 80046f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048b4 <_vfiprintf_r+0x24c>
 80046f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046f8:	f04f 0901 	mov.w	r9, #1
 80046fc:	4623      	mov	r3, r4
 80046fe:	469a      	mov	sl, r3
 8004700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004704:	b10a      	cbz	r2, 800470a <_vfiprintf_r+0xa2>
 8004706:	2a25      	cmp	r2, #37	; 0x25
 8004708:	d1f9      	bne.n	80046fe <_vfiprintf_r+0x96>
 800470a:	ebba 0b04 	subs.w	fp, sl, r4
 800470e:	d00b      	beq.n	8004728 <_vfiprintf_r+0xc0>
 8004710:	465b      	mov	r3, fp
 8004712:	4622      	mov	r2, r4
 8004714:	4629      	mov	r1, r5
 8004716:	4630      	mov	r0, r6
 8004718:	f7ff ff93 	bl	8004642 <__sfputs_r>
 800471c:	3001      	adds	r0, #1
 800471e:	f000 80aa 	beq.w	8004876 <_vfiprintf_r+0x20e>
 8004722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004724:	445a      	add	r2, fp
 8004726:	9209      	str	r2, [sp, #36]	; 0x24
 8004728:	f89a 3000 	ldrb.w	r3, [sl]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a2 	beq.w	8004876 <_vfiprintf_r+0x20e>
 8004732:	2300      	movs	r3, #0
 8004734:	f04f 32ff 	mov.w	r2, #4294967295
 8004738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800473c:	f10a 0a01 	add.w	sl, sl, #1
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	9307      	str	r3, [sp, #28]
 8004744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004748:	931a      	str	r3, [sp, #104]	; 0x68
 800474a:	4654      	mov	r4, sl
 800474c:	2205      	movs	r2, #5
 800474e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004752:	4858      	ldr	r0, [pc, #352]	; (80048b4 <_vfiprintf_r+0x24c>)
 8004754:	f7fb fd3c 	bl	80001d0 <memchr>
 8004758:	9a04      	ldr	r2, [sp, #16]
 800475a:	b9d8      	cbnz	r0, 8004794 <_vfiprintf_r+0x12c>
 800475c:	06d1      	lsls	r1, r2, #27
 800475e:	bf44      	itt	mi
 8004760:	2320      	movmi	r3, #32
 8004762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004766:	0713      	lsls	r3, r2, #28
 8004768:	bf44      	itt	mi
 800476a:	232b      	movmi	r3, #43	; 0x2b
 800476c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004770:	f89a 3000 	ldrb.w	r3, [sl]
 8004774:	2b2a      	cmp	r3, #42	; 0x2a
 8004776:	d015      	beq.n	80047a4 <_vfiprintf_r+0x13c>
 8004778:	9a07      	ldr	r2, [sp, #28]
 800477a:	4654      	mov	r4, sl
 800477c:	2000      	movs	r0, #0
 800477e:	f04f 0c0a 	mov.w	ip, #10
 8004782:	4621      	mov	r1, r4
 8004784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004788:	3b30      	subs	r3, #48	; 0x30
 800478a:	2b09      	cmp	r3, #9
 800478c:	d94e      	bls.n	800482c <_vfiprintf_r+0x1c4>
 800478e:	b1b0      	cbz	r0, 80047be <_vfiprintf_r+0x156>
 8004790:	9207      	str	r2, [sp, #28]
 8004792:	e014      	b.n	80047be <_vfiprintf_r+0x156>
 8004794:	eba0 0308 	sub.w	r3, r0, r8
 8004798:	fa09 f303 	lsl.w	r3, r9, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	46a2      	mov	sl, r4
 80047a2:	e7d2      	b.n	800474a <_vfiprintf_r+0xe2>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	1d19      	adds	r1, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	9103      	str	r1, [sp, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bfbb      	ittet	lt
 80047b0:	425b      	neglt	r3, r3
 80047b2:	f042 0202 	orrlt.w	r2, r2, #2
 80047b6:	9307      	strge	r3, [sp, #28]
 80047b8:	9307      	strlt	r3, [sp, #28]
 80047ba:	bfb8      	it	lt
 80047bc:	9204      	strlt	r2, [sp, #16]
 80047be:	7823      	ldrb	r3, [r4, #0]
 80047c0:	2b2e      	cmp	r3, #46	; 0x2e
 80047c2:	d10c      	bne.n	80047de <_vfiprintf_r+0x176>
 80047c4:	7863      	ldrb	r3, [r4, #1]
 80047c6:	2b2a      	cmp	r3, #42	; 0x2a
 80047c8:	d135      	bne.n	8004836 <_vfiprintf_r+0x1ce>
 80047ca:	9b03      	ldr	r3, [sp, #12]
 80047cc:	1d1a      	adds	r2, r3, #4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	9203      	str	r2, [sp, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bfb8      	it	lt
 80047d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80047da:	3402      	adds	r4, #2
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048c4 <_vfiprintf_r+0x25c>
 80047e2:	7821      	ldrb	r1, [r4, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4650      	mov	r0, sl
 80047e8:	f7fb fcf2 	bl	80001d0 <memchr>
 80047ec:	b140      	cbz	r0, 8004800 <_vfiprintf_r+0x198>
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	eba0 000a 	sub.w	r0, r0, sl
 80047f4:	fa03 f000 	lsl.w	r0, r3, r0
 80047f8:	9b04      	ldr	r3, [sp, #16]
 80047fa:	4303      	orrs	r3, r0
 80047fc:	3401      	adds	r4, #1
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004804:	482c      	ldr	r0, [pc, #176]	; (80048b8 <_vfiprintf_r+0x250>)
 8004806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800480a:	2206      	movs	r2, #6
 800480c:	f7fb fce0 	bl	80001d0 <memchr>
 8004810:	2800      	cmp	r0, #0
 8004812:	d03f      	beq.n	8004894 <_vfiprintf_r+0x22c>
 8004814:	4b29      	ldr	r3, [pc, #164]	; (80048bc <_vfiprintf_r+0x254>)
 8004816:	bb1b      	cbnz	r3, 8004860 <_vfiprintf_r+0x1f8>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	3307      	adds	r3, #7
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	3308      	adds	r3, #8
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004826:	443b      	add	r3, r7
 8004828:	9309      	str	r3, [sp, #36]	; 0x24
 800482a:	e767      	b.n	80046fc <_vfiprintf_r+0x94>
 800482c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004830:	460c      	mov	r4, r1
 8004832:	2001      	movs	r0, #1
 8004834:	e7a5      	b.n	8004782 <_vfiprintf_r+0x11a>
 8004836:	2300      	movs	r3, #0
 8004838:	3401      	adds	r4, #1
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0c0a 	mov.w	ip, #10
 8004842:	4620      	mov	r0, r4
 8004844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004848:	3a30      	subs	r2, #48	; 0x30
 800484a:	2a09      	cmp	r2, #9
 800484c:	d903      	bls.n	8004856 <_vfiprintf_r+0x1ee>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0c5      	beq.n	80047de <_vfiprintf_r+0x176>
 8004852:	9105      	str	r1, [sp, #20]
 8004854:	e7c3      	b.n	80047de <_vfiprintf_r+0x176>
 8004856:	fb0c 2101 	mla	r1, ip, r1, r2
 800485a:	4604      	mov	r4, r0
 800485c:	2301      	movs	r3, #1
 800485e:	e7f0      	b.n	8004842 <_vfiprintf_r+0x1da>
 8004860:	ab03      	add	r3, sp, #12
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	462a      	mov	r2, r5
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <_vfiprintf_r+0x258>)
 8004868:	a904      	add	r1, sp, #16
 800486a:	4630      	mov	r0, r6
 800486c:	f3af 8000 	nop.w
 8004870:	4607      	mov	r7, r0
 8004872:	1c78      	adds	r0, r7, #1
 8004874:	d1d6      	bne.n	8004824 <_vfiprintf_r+0x1bc>
 8004876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004878:	07d9      	lsls	r1, r3, #31
 800487a:	d405      	bmi.n	8004888 <_vfiprintf_r+0x220>
 800487c:	89ab      	ldrh	r3, [r5, #12]
 800487e:	059a      	lsls	r2, r3, #22
 8004880:	d402      	bmi.n	8004888 <_vfiprintf_r+0x220>
 8004882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004884:	f000 fc35 	bl	80050f2 <__retarget_lock_release_recursive>
 8004888:	89ab      	ldrh	r3, [r5, #12]
 800488a:	065b      	lsls	r3, r3, #25
 800488c:	f53f af12 	bmi.w	80046b4 <_vfiprintf_r+0x4c>
 8004890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004892:	e711      	b.n	80046b8 <_vfiprintf_r+0x50>
 8004894:	ab03      	add	r3, sp, #12
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	462a      	mov	r2, r5
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <_vfiprintf_r+0x258>)
 800489c:	a904      	add	r1, sp, #16
 800489e:	4630      	mov	r0, r6
 80048a0:	f000 f880 	bl	80049a4 <_printf_i>
 80048a4:	e7e4      	b.n	8004870 <_vfiprintf_r+0x208>
 80048a6:	bf00      	nop
 80048a8:	080056c4 	.word	0x080056c4
 80048ac:	080056e4 	.word	0x080056e4
 80048b0:	080056a4 	.word	0x080056a4
 80048b4:	08005670 	.word	0x08005670
 80048b8:	0800567a 	.word	0x0800567a
 80048bc:	00000000 	.word	0x00000000
 80048c0:	08004643 	.word	0x08004643
 80048c4:	08005676 	.word	0x08005676

080048c8 <_printf_common>:
 80048c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048cc:	4616      	mov	r6, r2
 80048ce:	4699      	mov	r9, r3
 80048d0:	688a      	ldr	r2, [r1, #8]
 80048d2:	690b      	ldr	r3, [r1, #16]
 80048d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d8:	4293      	cmp	r3, r2
 80048da:	bfb8      	it	lt
 80048dc:	4613      	movlt	r3, r2
 80048de:	6033      	str	r3, [r6, #0]
 80048e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e4:	4607      	mov	r7, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	b10a      	cbz	r2, 80048ee <_printf_common+0x26>
 80048ea:	3301      	adds	r3, #1
 80048ec:	6033      	str	r3, [r6, #0]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	0699      	lsls	r1, r3, #26
 80048f2:	bf42      	ittt	mi
 80048f4:	6833      	ldrmi	r3, [r6, #0]
 80048f6:	3302      	addmi	r3, #2
 80048f8:	6033      	strmi	r3, [r6, #0]
 80048fa:	6825      	ldr	r5, [r4, #0]
 80048fc:	f015 0506 	ands.w	r5, r5, #6
 8004900:	d106      	bne.n	8004910 <_printf_common+0x48>
 8004902:	f104 0a19 	add.w	sl, r4, #25
 8004906:	68e3      	ldr	r3, [r4, #12]
 8004908:	6832      	ldr	r2, [r6, #0]
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	42ab      	cmp	r3, r5
 800490e:	dc26      	bgt.n	800495e <_printf_common+0x96>
 8004910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004914:	1e13      	subs	r3, r2, #0
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	bf18      	it	ne
 800491a:	2301      	movne	r3, #1
 800491c:	0692      	lsls	r2, r2, #26
 800491e:	d42b      	bmi.n	8004978 <_printf_common+0xb0>
 8004920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004924:	4649      	mov	r1, r9
 8004926:	4638      	mov	r0, r7
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d01e      	beq.n	800496c <_printf_common+0xa4>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	68e5      	ldr	r5, [r4, #12]
 8004932:	6832      	ldr	r2, [r6, #0]
 8004934:	f003 0306 	and.w	r3, r3, #6
 8004938:	2b04      	cmp	r3, #4
 800493a:	bf08      	it	eq
 800493c:	1aad      	subeq	r5, r5, r2
 800493e:	68a3      	ldr	r3, [r4, #8]
 8004940:	6922      	ldr	r2, [r4, #16]
 8004942:	bf0c      	ite	eq
 8004944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004948:	2500      	movne	r5, #0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfc4      	itt	gt
 800494e:	1a9b      	subgt	r3, r3, r2
 8004950:	18ed      	addgt	r5, r5, r3
 8004952:	2600      	movs	r6, #0
 8004954:	341a      	adds	r4, #26
 8004956:	42b5      	cmp	r5, r6
 8004958:	d11a      	bne.n	8004990 <_printf_common+0xc8>
 800495a:	2000      	movs	r0, #0
 800495c:	e008      	b.n	8004970 <_printf_common+0xa8>
 800495e:	2301      	movs	r3, #1
 8004960:	4652      	mov	r2, sl
 8004962:	4649      	mov	r1, r9
 8004964:	4638      	mov	r0, r7
 8004966:	47c0      	blx	r8
 8004968:	3001      	adds	r0, #1
 800496a:	d103      	bne.n	8004974 <_printf_common+0xac>
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	3501      	adds	r5, #1
 8004976:	e7c6      	b.n	8004906 <_printf_common+0x3e>
 8004978:	18e1      	adds	r1, r4, r3
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	2030      	movs	r0, #48	; 0x30
 800497e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004982:	4422      	add	r2, r4
 8004984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800498c:	3302      	adds	r3, #2
 800498e:	e7c7      	b.n	8004920 <_printf_common+0x58>
 8004990:	2301      	movs	r3, #1
 8004992:	4622      	mov	r2, r4
 8004994:	4649      	mov	r1, r9
 8004996:	4638      	mov	r0, r7
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d0e6      	beq.n	800496c <_printf_common+0xa4>
 800499e:	3601      	adds	r6, #1
 80049a0:	e7d9      	b.n	8004956 <_printf_common+0x8e>
	...

080049a4 <_printf_i>:
 80049a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049a8:	460c      	mov	r4, r1
 80049aa:	4691      	mov	r9, r2
 80049ac:	7e27      	ldrb	r7, [r4, #24]
 80049ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049b0:	2f78      	cmp	r7, #120	; 0x78
 80049b2:	4680      	mov	r8, r0
 80049b4:	469a      	mov	sl, r3
 80049b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ba:	d807      	bhi.n	80049cc <_printf_i+0x28>
 80049bc:	2f62      	cmp	r7, #98	; 0x62
 80049be:	d80a      	bhi.n	80049d6 <_printf_i+0x32>
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	f000 80d8 	beq.w	8004b76 <_printf_i+0x1d2>
 80049c6:	2f58      	cmp	r7, #88	; 0x58
 80049c8:	f000 80a3 	beq.w	8004b12 <_printf_i+0x16e>
 80049cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d4:	e03a      	b.n	8004a4c <_printf_i+0xa8>
 80049d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049da:	2b15      	cmp	r3, #21
 80049dc:	d8f6      	bhi.n	80049cc <_printf_i+0x28>
 80049de:	a001      	add	r0, pc, #4	; (adr r0, 80049e4 <_printf_i+0x40>)
 80049e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049e4:	08004a3d 	.word	0x08004a3d
 80049e8:	08004a51 	.word	0x08004a51
 80049ec:	080049cd 	.word	0x080049cd
 80049f0:	080049cd 	.word	0x080049cd
 80049f4:	080049cd 	.word	0x080049cd
 80049f8:	080049cd 	.word	0x080049cd
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	080049cd 	.word	0x080049cd
 8004a04:	080049cd 	.word	0x080049cd
 8004a08:	080049cd 	.word	0x080049cd
 8004a0c:	080049cd 	.word	0x080049cd
 8004a10:	08004b5d 	.word	0x08004b5d
 8004a14:	08004a81 	.word	0x08004a81
 8004a18:	08004b3f 	.word	0x08004b3f
 8004a1c:	080049cd 	.word	0x080049cd
 8004a20:	080049cd 	.word	0x080049cd
 8004a24:	08004b7f 	.word	0x08004b7f
 8004a28:	080049cd 	.word	0x080049cd
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	080049cd 	.word	0x080049cd
 8004a34:	080049cd 	.word	0x080049cd
 8004a38:	08004b47 	.word	0x08004b47
 8004a3c:	680b      	ldr	r3, [r1, #0]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	600a      	str	r2, [r1, #0]
 8004a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a3      	b.n	8004b98 <_printf_i+0x1f4>
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	6808      	ldr	r0, [r1, #0]
 8004a54:	062e      	lsls	r6, r5, #24
 8004a56:	f100 0304 	add.w	r3, r0, #4
 8004a5a:	d50a      	bpl.n	8004a72 <_printf_i+0xce>
 8004a5c:	6805      	ldr	r5, [r0, #0]
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	da03      	bge.n	8004a6c <_printf_i+0xc8>
 8004a64:	232d      	movs	r3, #45	; 0x2d
 8004a66:	426d      	negs	r5, r5
 8004a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a6c:	485e      	ldr	r0, [pc, #376]	; (8004be8 <_printf_i+0x244>)
 8004a6e:	230a      	movs	r3, #10
 8004a70:	e019      	b.n	8004aa6 <_printf_i+0x102>
 8004a72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a76:	6805      	ldr	r5, [r0, #0]
 8004a78:	600b      	str	r3, [r1, #0]
 8004a7a:	bf18      	it	ne
 8004a7c:	b22d      	sxthne	r5, r5
 8004a7e:	e7ef      	b.n	8004a60 <_printf_i+0xbc>
 8004a80:	680b      	ldr	r3, [r1, #0]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	1d18      	adds	r0, r3, #4
 8004a86:	6008      	str	r0, [r1, #0]
 8004a88:	0628      	lsls	r0, r5, #24
 8004a8a:	d501      	bpl.n	8004a90 <_printf_i+0xec>
 8004a8c:	681d      	ldr	r5, [r3, #0]
 8004a8e:	e002      	b.n	8004a96 <_printf_i+0xf2>
 8004a90:	0669      	lsls	r1, r5, #25
 8004a92:	d5fb      	bpl.n	8004a8c <_printf_i+0xe8>
 8004a94:	881d      	ldrh	r5, [r3, #0]
 8004a96:	4854      	ldr	r0, [pc, #336]	; (8004be8 <_printf_i+0x244>)
 8004a98:	2f6f      	cmp	r7, #111	; 0x6f
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2308      	moveq	r3, #8
 8004a9e:	230a      	movne	r3, #10
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa6:	6866      	ldr	r6, [r4, #4]
 8004aa8:	60a6      	str	r6, [r4, #8]
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	bfa2      	ittt	ge
 8004aae:	6821      	ldrge	r1, [r4, #0]
 8004ab0:	f021 0104 	bicge.w	r1, r1, #4
 8004ab4:	6021      	strge	r1, [r4, #0]
 8004ab6:	b90d      	cbnz	r5, 8004abc <_printf_i+0x118>
 8004ab8:	2e00      	cmp	r6, #0
 8004aba:	d04d      	beq.n	8004b58 <_printf_i+0x1b4>
 8004abc:	4616      	mov	r6, r2
 8004abe:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ac2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac6:	5dc7      	ldrb	r7, [r0, r7]
 8004ac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004acc:	462f      	mov	r7, r5
 8004ace:	42bb      	cmp	r3, r7
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	d9f4      	bls.n	8004abe <_printf_i+0x11a>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d10b      	bne.n	8004af0 <_printf_i+0x14c>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	07df      	lsls	r7, r3, #31
 8004adc:	d508      	bpl.n	8004af0 <_printf_i+0x14c>
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	6861      	ldr	r1, [r4, #4]
 8004ae2:	4299      	cmp	r1, r3
 8004ae4:	bfde      	ittt	le
 8004ae6:	2330      	movle	r3, #48	; 0x30
 8004ae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004af0:	1b92      	subs	r2, r2, r6
 8004af2:	6122      	str	r2, [r4, #16]
 8004af4:	f8cd a000 	str.w	sl, [sp]
 8004af8:	464b      	mov	r3, r9
 8004afa:	aa03      	add	r2, sp, #12
 8004afc:	4621      	mov	r1, r4
 8004afe:	4640      	mov	r0, r8
 8004b00:	f7ff fee2 	bl	80048c8 <_printf_common>
 8004b04:	3001      	adds	r0, #1
 8004b06:	d14c      	bne.n	8004ba2 <_printf_i+0x1fe>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	b004      	add	sp, #16
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	4835      	ldr	r0, [pc, #212]	; (8004be8 <_printf_i+0x244>)
 8004b14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	680e      	ldr	r6, [r1, #0]
 8004b1c:	061f      	lsls	r7, r3, #24
 8004b1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b22:	600e      	str	r6, [r1, #0]
 8004b24:	d514      	bpl.n	8004b50 <_printf_i+0x1ac>
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	bf44      	itt	mi
 8004b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b2e:	6023      	strmi	r3, [r4, #0]
 8004b30:	b91d      	cbnz	r5, 8004b3a <_printf_i+0x196>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f023 0320 	bic.w	r3, r3, #32
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	2310      	movs	r3, #16
 8004b3c:	e7b0      	b.n	8004aa0 <_printf_i+0xfc>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	f043 0320 	orr.w	r3, r3, #32
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	2378      	movs	r3, #120	; 0x78
 8004b48:	4828      	ldr	r0, [pc, #160]	; (8004bec <_printf_i+0x248>)
 8004b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b4e:	e7e3      	b.n	8004b18 <_printf_i+0x174>
 8004b50:	065e      	lsls	r6, r3, #25
 8004b52:	bf48      	it	mi
 8004b54:	b2ad      	uxthmi	r5, r5
 8004b56:	e7e6      	b.n	8004b26 <_printf_i+0x182>
 8004b58:	4616      	mov	r6, r2
 8004b5a:	e7bb      	b.n	8004ad4 <_printf_i+0x130>
 8004b5c:	680b      	ldr	r3, [r1, #0]
 8004b5e:	6826      	ldr	r6, [r4, #0]
 8004b60:	6960      	ldr	r0, [r4, #20]
 8004b62:	1d1d      	adds	r5, r3, #4
 8004b64:	600d      	str	r5, [r1, #0]
 8004b66:	0635      	lsls	r5, r6, #24
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	d501      	bpl.n	8004b70 <_printf_i+0x1cc>
 8004b6c:	6018      	str	r0, [r3, #0]
 8004b6e:	e002      	b.n	8004b76 <_printf_i+0x1d2>
 8004b70:	0671      	lsls	r1, r6, #25
 8004b72:	d5fb      	bpl.n	8004b6c <_printf_i+0x1c8>
 8004b74:	8018      	strh	r0, [r3, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	e7ba      	b.n	8004af4 <_printf_i+0x150>
 8004b7e:	680b      	ldr	r3, [r1, #0]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	600a      	str	r2, [r1, #0]
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	6862      	ldr	r2, [r4, #4]
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7fb fb20 	bl	80001d0 <memchr>
 8004b90:	b108      	cbz	r0, 8004b96 <_printf_i+0x1f2>
 8004b92:	1b80      	subs	r0, r0, r6
 8004b94:	6060      	str	r0, [r4, #4]
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba0:	e7a8      	b.n	8004af4 <_printf_i+0x150>
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	47d0      	blx	sl
 8004bac:	3001      	adds	r0, #1
 8004bae:	d0ab      	beq.n	8004b08 <_printf_i+0x164>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	079b      	lsls	r3, r3, #30
 8004bb4:	d413      	bmi.n	8004bde <_printf_i+0x23a>
 8004bb6:	68e0      	ldr	r0, [r4, #12]
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	4298      	cmp	r0, r3
 8004bbc:	bfb8      	it	lt
 8004bbe:	4618      	movlt	r0, r3
 8004bc0:	e7a4      	b.n	8004b0c <_printf_i+0x168>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	47d0      	blx	sl
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d09b      	beq.n	8004b08 <_printf_i+0x164>
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	9903      	ldr	r1, [sp, #12]
 8004bd6:	1a5b      	subs	r3, r3, r1
 8004bd8:	42ab      	cmp	r3, r5
 8004bda:	dcf2      	bgt.n	8004bc2 <_printf_i+0x21e>
 8004bdc:	e7eb      	b.n	8004bb6 <_printf_i+0x212>
 8004bde:	2500      	movs	r5, #0
 8004be0:	f104 0619 	add.w	r6, r4, #25
 8004be4:	e7f5      	b.n	8004bd2 <_printf_i+0x22e>
 8004be6:	bf00      	nop
 8004be8:	08005681 	.word	0x08005681
 8004bec:	08005692 	.word	0x08005692

08004bf0 <__swbuf_r>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	460e      	mov	r6, r1
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	b118      	cbz	r0, 8004c02 <__swbuf_r+0x12>
 8004bfa:	6983      	ldr	r3, [r0, #24]
 8004bfc:	b90b      	cbnz	r3, 8004c02 <__swbuf_r+0x12>
 8004bfe:	f000 f9d9 	bl	8004fb4 <__sinit>
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <__swbuf_r+0x98>)
 8004c04:	429c      	cmp	r4, r3
 8004c06:	d12b      	bne.n	8004c60 <__swbuf_r+0x70>
 8004c08:	686c      	ldr	r4, [r5, #4]
 8004c0a:	69a3      	ldr	r3, [r4, #24]
 8004c0c:	60a3      	str	r3, [r4, #8]
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	071a      	lsls	r2, r3, #28
 8004c12:	d52f      	bpl.n	8004c74 <__swbuf_r+0x84>
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	b36b      	cbz	r3, 8004c74 <__swbuf_r+0x84>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1ac0      	subs	r0, r0, r3
 8004c1e:	6963      	ldr	r3, [r4, #20]
 8004c20:	b2f6      	uxtb	r6, r6
 8004c22:	4283      	cmp	r3, r0
 8004c24:	4637      	mov	r7, r6
 8004c26:	dc04      	bgt.n	8004c32 <__swbuf_r+0x42>
 8004c28:	4621      	mov	r1, r4
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 f92e 	bl	8004e8c <_fflush_r>
 8004c30:	bb30      	cbnz	r0, 8004c80 <__swbuf_r+0x90>
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60a3      	str	r3, [r4, #8]
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	1c5a      	adds	r2, r3, #1
 8004c3c:	6022      	str	r2, [r4, #0]
 8004c3e:	701e      	strb	r6, [r3, #0]
 8004c40:	6963      	ldr	r3, [r4, #20]
 8004c42:	3001      	adds	r0, #1
 8004c44:	4283      	cmp	r3, r0
 8004c46:	d004      	beq.n	8004c52 <__swbuf_r+0x62>
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	07db      	lsls	r3, r3, #31
 8004c4c:	d506      	bpl.n	8004c5c <__swbuf_r+0x6c>
 8004c4e:	2e0a      	cmp	r6, #10
 8004c50:	d104      	bne.n	8004c5c <__swbuf_r+0x6c>
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 f919 	bl	8004e8c <_fflush_r>
 8004c5a:	b988      	cbnz	r0, 8004c80 <__swbuf_r+0x90>
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <__swbuf_r+0x9c>)
 8004c62:	429c      	cmp	r4, r3
 8004c64:	d101      	bne.n	8004c6a <__swbuf_r+0x7a>
 8004c66:	68ac      	ldr	r4, [r5, #8]
 8004c68:	e7cf      	b.n	8004c0a <__swbuf_r+0x1a>
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <__swbuf_r+0xa0>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	bf08      	it	eq
 8004c70:	68ec      	ldreq	r4, [r5, #12]
 8004c72:	e7ca      	b.n	8004c0a <__swbuf_r+0x1a>
 8004c74:	4621      	mov	r1, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 f80c 	bl	8004c94 <__swsetup_r>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d0cb      	beq.n	8004c18 <__swbuf_r+0x28>
 8004c80:	f04f 37ff 	mov.w	r7, #4294967295
 8004c84:	e7ea      	b.n	8004c5c <__swbuf_r+0x6c>
 8004c86:	bf00      	nop
 8004c88:	080056c4 	.word	0x080056c4
 8004c8c:	080056e4 	.word	0x080056e4
 8004c90:	080056a4 	.word	0x080056a4

08004c94 <__swsetup_r>:
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <__swsetup_r+0xcc>)
 8004c96:	b570      	push	{r4, r5, r6, lr}
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	b125      	cbz	r5, 8004caa <__swsetup_r+0x16>
 8004ca0:	69ab      	ldr	r3, [r5, #24]
 8004ca2:	b913      	cbnz	r3, 8004caa <__swsetup_r+0x16>
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f000 f985 	bl	8004fb4 <__sinit>
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <__swsetup_r+0xd0>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d10f      	bne.n	8004cd0 <__swsetup_r+0x3c>
 8004cb0:	686c      	ldr	r4, [r5, #4]
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cb8:	0719      	lsls	r1, r3, #28
 8004cba:	d42c      	bmi.n	8004d16 <__swsetup_r+0x82>
 8004cbc:	06dd      	lsls	r5, r3, #27
 8004cbe:	d411      	bmi.n	8004ce4 <__swsetup_r+0x50>
 8004cc0:	2309      	movs	r3, #9
 8004cc2:	6033      	str	r3, [r6, #0]
 8004cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	f04f 30ff 	mov.w	r0, #4294967295
 8004cce:	e03e      	b.n	8004d4e <__swsetup_r+0xba>
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <__swsetup_r+0xd4>)
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	d101      	bne.n	8004cda <__swsetup_r+0x46>
 8004cd6:	68ac      	ldr	r4, [r5, #8]
 8004cd8:	e7eb      	b.n	8004cb2 <__swsetup_r+0x1e>
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <__swsetup_r+0xd8>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	bf08      	it	eq
 8004ce0:	68ec      	ldreq	r4, [r5, #12]
 8004ce2:	e7e6      	b.n	8004cb2 <__swsetup_r+0x1e>
 8004ce4:	0758      	lsls	r0, r3, #29
 8004ce6:	d512      	bpl.n	8004d0e <__swsetup_r+0x7a>
 8004ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cea:	b141      	cbz	r1, 8004cfe <__swsetup_r+0x6a>
 8004cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cf0:	4299      	cmp	r1, r3
 8004cf2:	d002      	beq.n	8004cfa <__swsetup_r+0x66>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f000 fa61 	bl	80051bc <_free_r>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	2300      	movs	r3, #0
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f043 0308 	orr.w	r3, r3, #8
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	6923      	ldr	r3, [r4, #16]
 8004d18:	b94b      	cbnz	r3, 8004d2e <__swsetup_r+0x9a>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d003      	beq.n	8004d2e <__swsetup_r+0x9a>
 8004d26:	4621      	mov	r1, r4
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 fa07 	bl	800513c <__smakebuf_r>
 8004d2e:	89a0      	ldrh	r0, [r4, #12]
 8004d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d34:	f010 0301 	ands.w	r3, r0, #1
 8004d38:	d00a      	beq.n	8004d50 <__swsetup_r+0xbc>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60a3      	str	r3, [r4, #8]
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	425b      	negs	r3, r3
 8004d42:	61a3      	str	r3, [r4, #24]
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	b943      	cbnz	r3, 8004d5a <__swsetup_r+0xc6>
 8004d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d4c:	d1ba      	bne.n	8004cc4 <__swsetup_r+0x30>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	0781      	lsls	r1, r0, #30
 8004d52:	bf58      	it	pl
 8004d54:	6963      	ldrpl	r3, [r4, #20]
 8004d56:	60a3      	str	r3, [r4, #8]
 8004d58:	e7f4      	b.n	8004d44 <__swsetup_r+0xb0>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e7f7      	b.n	8004d4e <__swsetup_r+0xba>
 8004d5e:	bf00      	nop
 8004d60:	20000040 	.word	0x20000040
 8004d64:	080056c4 	.word	0x080056c4
 8004d68:	080056e4 	.word	0x080056e4
 8004d6c:	080056a4 	.word	0x080056a4

08004d70 <abort>:
 8004d70:	b508      	push	{r3, lr}
 8004d72:	2006      	movs	r0, #6
 8004d74:	f000 fb04 	bl	8005380 <raise>
 8004d78:	2001      	movs	r0, #1
 8004d7a:	f7fb ff87 	bl	8000c8c <_exit>
	...

08004d80 <__sflush_r>:
 8004d80:	898a      	ldrh	r2, [r1, #12]
 8004d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d86:	4605      	mov	r5, r0
 8004d88:	0710      	lsls	r0, r2, #28
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	d458      	bmi.n	8004e40 <__sflush_r+0xc0>
 8004d8e:	684b      	ldr	r3, [r1, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dc05      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	dc02      	bgt.n	8004da0 <__sflush_r+0x20>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d0f9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004da6:	2300      	movs	r3, #0
 8004da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dac:	682f      	ldr	r7, [r5, #0]
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	d032      	beq.n	8004e18 <__sflush_r+0x98>
 8004db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	075a      	lsls	r2, r3, #29
 8004db8:	d505      	bpl.n	8004dc6 <__sflush_r+0x46>
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	1ac0      	subs	r0, r0, r3
 8004dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dc0:	b10b      	cbz	r3, 8004dc6 <__sflush_r+0x46>
 8004dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc4:	1ac0      	subs	r0, r0, r3
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dcc:	6a21      	ldr	r1, [r4, #32]
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b0      	blx	r6
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	d106      	bne.n	8004de6 <__sflush_r+0x66>
 8004dd8:	6829      	ldr	r1, [r5, #0]
 8004dda:	291d      	cmp	r1, #29
 8004ddc:	d82c      	bhi.n	8004e38 <__sflush_r+0xb8>
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <__sflush_r+0x108>)
 8004de0:	40ca      	lsrs	r2, r1
 8004de2:	07d6      	lsls	r6, r2, #31
 8004de4:	d528      	bpl.n	8004e38 <__sflush_r+0xb8>
 8004de6:	2200      	movs	r2, #0
 8004de8:	6062      	str	r2, [r4, #4]
 8004dea:	04d9      	lsls	r1, r3, #19
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	d504      	bpl.n	8004dfc <__sflush_r+0x7c>
 8004df2:	1c42      	adds	r2, r0, #1
 8004df4:	d101      	bne.n	8004dfa <__sflush_r+0x7a>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	b903      	cbnz	r3, 8004dfc <__sflush_r+0x7c>
 8004dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8004dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dfe:	602f      	str	r7, [r5, #0]
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d0ca      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	d002      	beq.n	8004e12 <__sflush_r+0x92>
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f9d5 	bl	80051bc <_free_r>
 8004e12:	2000      	movs	r0, #0
 8004e14:	6360      	str	r0, [r4, #52]	; 0x34
 8004e16:	e7c1      	b.n	8004d9c <__sflush_r+0x1c>
 8004e18:	6a21      	ldr	r1, [r4, #32]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b0      	blx	r6
 8004e20:	1c41      	adds	r1, r0, #1
 8004e22:	d1c7      	bne.n	8004db4 <__sflush_r+0x34>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0c4      	beq.n	8004db4 <__sflush_r+0x34>
 8004e2a:	2b1d      	cmp	r3, #29
 8004e2c:	d001      	beq.n	8004e32 <__sflush_r+0xb2>
 8004e2e:	2b16      	cmp	r3, #22
 8004e30:	d101      	bne.n	8004e36 <__sflush_r+0xb6>
 8004e32:	602f      	str	r7, [r5, #0]
 8004e34:	e7b1      	b.n	8004d9a <__sflush_r+0x1a>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	e7ad      	b.n	8004d9c <__sflush_r+0x1c>
 8004e40:	690f      	ldr	r7, [r1, #16]
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d0a9      	beq.n	8004d9a <__sflush_r+0x1a>
 8004e46:	0793      	lsls	r3, r2, #30
 8004e48:	680e      	ldr	r6, [r1, #0]
 8004e4a:	bf08      	it	eq
 8004e4c:	694b      	ldreq	r3, [r1, #20]
 8004e4e:	600f      	str	r7, [r1, #0]
 8004e50:	bf18      	it	ne
 8004e52:	2300      	movne	r3, #0
 8004e54:	eba6 0807 	sub.w	r8, r6, r7
 8004e58:	608b      	str	r3, [r1, #8]
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	dd9c      	ble.n	8004d9a <__sflush_r+0x1a>
 8004e60:	6a21      	ldr	r1, [r4, #32]
 8004e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e64:	4643      	mov	r3, r8
 8004e66:	463a      	mov	r2, r7
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dc06      	bgt.n	8004e7e <__sflush_r+0xfe>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e78e      	b.n	8004d9c <__sflush_r+0x1c>
 8004e7e:	4407      	add	r7, r0
 8004e80:	eba8 0800 	sub.w	r8, r8, r0
 8004e84:	e7e9      	b.n	8004e5a <__sflush_r+0xda>
 8004e86:	bf00      	nop
 8004e88:	20400001 	.word	0x20400001

08004e8c <_fflush_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b913      	cbnz	r3, 8004e9c <_fflush_r+0x10>
 8004e96:	2500      	movs	r5, #0
 8004e98:	4628      	mov	r0, r5
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	b118      	cbz	r0, 8004ea6 <_fflush_r+0x1a>
 8004e9e:	6983      	ldr	r3, [r0, #24]
 8004ea0:	b90b      	cbnz	r3, 8004ea6 <_fflush_r+0x1a>
 8004ea2:	f000 f887 	bl	8004fb4 <__sinit>
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <_fflush_r+0x6c>)
 8004ea8:	429c      	cmp	r4, r3
 8004eaa:	d11b      	bne.n	8004ee4 <_fflush_r+0x58>
 8004eac:	686c      	ldr	r4, [r5, #4]
 8004eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ef      	beq.n	8004e96 <_fflush_r+0xa>
 8004eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004eb8:	07d0      	lsls	r0, r2, #31
 8004eba:	d404      	bmi.n	8004ec6 <_fflush_r+0x3a>
 8004ebc:	0599      	lsls	r1, r3, #22
 8004ebe:	d402      	bmi.n	8004ec6 <_fflush_r+0x3a>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f000 f915 	bl	80050f0 <__retarget_lock_acquire_recursive>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f7ff ff59 	bl	8004d80 <__sflush_r>
 8004ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed0:	07da      	lsls	r2, r3, #31
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	d4e0      	bmi.n	8004e98 <_fflush_r+0xc>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	059b      	lsls	r3, r3, #22
 8004eda:	d4dd      	bmi.n	8004e98 <_fflush_r+0xc>
 8004edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ede:	f000 f908 	bl	80050f2 <__retarget_lock_release_recursive>
 8004ee2:	e7d9      	b.n	8004e98 <_fflush_r+0xc>
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <_fflush_r+0x70>)
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d101      	bne.n	8004eee <_fflush_r+0x62>
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	e7df      	b.n	8004eae <_fflush_r+0x22>
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <_fflush_r+0x74>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	bf08      	it	eq
 8004ef4:	68ec      	ldreq	r4, [r5, #12]
 8004ef6:	e7da      	b.n	8004eae <_fflush_r+0x22>
 8004ef8:	080056c4 	.word	0x080056c4
 8004efc:	080056e4 	.word	0x080056e4
 8004f00:	080056a4 	.word	0x080056a4

08004f04 <std>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f12:	6083      	str	r3, [r0, #8]
 8004f14:	8181      	strh	r1, [r0, #12]
 8004f16:	6643      	str	r3, [r0, #100]	; 0x64
 8004f18:	81c2      	strh	r2, [r0, #14]
 8004f1a:	6183      	str	r3, [r0, #24]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	305c      	adds	r0, #92	; 0x5c
 8004f22:	f7ff fb6f 	bl	8004604 <memset>
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <std+0x38>)
 8004f28:	6263      	str	r3, [r4, #36]	; 0x24
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <std+0x3c>)
 8004f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <std+0x40>)
 8004f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <std+0x44>)
 8004f34:	6224      	str	r4, [r4, #32]
 8004f36:	6323      	str	r3, [r4, #48]	; 0x30
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	bf00      	nop
 8004f3c:	080053b9 	.word	0x080053b9
 8004f40:	080053db 	.word	0x080053db
 8004f44:	08005413 	.word	0x08005413
 8004f48:	08005437 	.word	0x08005437

08004f4c <_cleanup_r>:
 8004f4c:	4901      	ldr	r1, [pc, #4]	; (8004f54 <_cleanup_r+0x8>)
 8004f4e:	f000 b8af 	b.w	80050b0 <_fwalk_reent>
 8004f52:	bf00      	nop
 8004f54:	08004e8d 	.word	0x08004e8d

08004f58 <__sfmoreglue>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	1e4a      	subs	r2, r1, #1
 8004f5c:	2568      	movs	r5, #104	; 0x68
 8004f5e:	4355      	muls	r5, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f66:	f000 f979 	bl	800525c <_malloc_r>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	b140      	cbz	r0, 8004f80 <__sfmoreglue+0x28>
 8004f6e:	2100      	movs	r1, #0
 8004f70:	e9c0 1600 	strd	r1, r6, [r0]
 8004f74:	300c      	adds	r0, #12
 8004f76:	60a0      	str	r0, [r4, #8]
 8004f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f7c:	f7ff fb42 	bl	8004604 <memset>
 8004f80:	4620      	mov	r0, r4
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <__sfp_lock_acquire>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__sfp_lock_acquire+0x8>)
 8004f86:	f000 b8b3 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	200002f0 	.word	0x200002f0

08004f90 <__sfp_lock_release>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__sfp_lock_release+0x8>)
 8004f92:	f000 b8ae 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	200002f0 	.word	0x200002f0

08004f9c <__sinit_lock_acquire>:
 8004f9c:	4801      	ldr	r0, [pc, #4]	; (8004fa4 <__sinit_lock_acquire+0x8>)
 8004f9e:	f000 b8a7 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 8004fa2:	bf00      	nop
 8004fa4:	200002eb 	.word	0x200002eb

08004fa8 <__sinit_lock_release>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sinit_lock_release+0x8>)
 8004faa:	f000 b8a2 	b.w	80050f2 <__retarget_lock_release_recursive>
 8004fae:	bf00      	nop
 8004fb0:	200002eb 	.word	0x200002eb

08004fb4 <__sinit>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	f7ff fff0 	bl	8004f9c <__sinit_lock_acquire>
 8004fbc:	69a3      	ldr	r3, [r4, #24]
 8004fbe:	b11b      	cbz	r3, 8004fc8 <__sinit+0x14>
 8004fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc4:	f7ff bff0 	b.w	8004fa8 <__sinit_lock_release>
 8004fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8004fce:	4b13      	ldr	r3, [pc, #76]	; (800501c <__sinit+0x68>)
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <__sinit+0x6c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	bf04      	itt	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	61a3      	streq	r3, [r4, #24]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f820 	bl	8005024 <__sfp>
 8004fe4:	6060      	str	r0, [r4, #4]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f000 f81c 	bl	8005024 <__sfp>
 8004fec:	60a0      	str	r0, [r4, #8]
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f818 	bl	8005024 <__sfp>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	60e0      	str	r0, [r4, #12]
 8004ff8:	2104      	movs	r1, #4
 8004ffa:	6860      	ldr	r0, [r4, #4]
 8004ffc:	f7ff ff82 	bl	8004f04 <std>
 8005000:	68a0      	ldr	r0, [r4, #8]
 8005002:	2201      	movs	r2, #1
 8005004:	2109      	movs	r1, #9
 8005006:	f7ff ff7d 	bl	8004f04 <std>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	2202      	movs	r2, #2
 800500e:	2112      	movs	r1, #18
 8005010:	f7ff ff78 	bl	8004f04 <std>
 8005014:	2301      	movs	r3, #1
 8005016:	61a3      	str	r3, [r4, #24]
 8005018:	e7d2      	b.n	8004fc0 <__sinit+0xc>
 800501a:	bf00      	nop
 800501c:	0800566c 	.word	0x0800566c
 8005020:	08004f4d 	.word	0x08004f4d

08005024 <__sfp>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	4607      	mov	r7, r0
 8005028:	f7ff ffac 	bl	8004f84 <__sfp_lock_acquire>
 800502c:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <__sfp+0x84>)
 800502e:	681e      	ldr	r6, [r3, #0]
 8005030:	69b3      	ldr	r3, [r6, #24]
 8005032:	b913      	cbnz	r3, 800503a <__sfp+0x16>
 8005034:	4630      	mov	r0, r6
 8005036:	f7ff ffbd 	bl	8004fb4 <__sinit>
 800503a:	3648      	adds	r6, #72	; 0x48
 800503c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005040:	3b01      	subs	r3, #1
 8005042:	d503      	bpl.n	800504c <__sfp+0x28>
 8005044:	6833      	ldr	r3, [r6, #0]
 8005046:	b30b      	cbz	r3, 800508c <__sfp+0x68>
 8005048:	6836      	ldr	r6, [r6, #0]
 800504a:	e7f7      	b.n	800503c <__sfp+0x18>
 800504c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005050:	b9d5      	cbnz	r5, 8005088 <__sfp+0x64>
 8005052:	4b16      	ldr	r3, [pc, #88]	; (80050ac <__sfp+0x88>)
 8005054:	60e3      	str	r3, [r4, #12]
 8005056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800505a:	6665      	str	r5, [r4, #100]	; 0x64
 800505c:	f000 f847 	bl	80050ee <__retarget_lock_init_recursive>
 8005060:	f7ff ff96 	bl	8004f90 <__sfp_lock_release>
 8005064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800506c:	6025      	str	r5, [r4, #0]
 800506e:	61a5      	str	r5, [r4, #24]
 8005070:	2208      	movs	r2, #8
 8005072:	4629      	mov	r1, r5
 8005074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005078:	f7ff fac4 	bl	8004604 <memset>
 800507c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005084:	4620      	mov	r0, r4
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005088:	3468      	adds	r4, #104	; 0x68
 800508a:	e7d9      	b.n	8005040 <__sfp+0x1c>
 800508c:	2104      	movs	r1, #4
 800508e:	4638      	mov	r0, r7
 8005090:	f7ff ff62 	bl	8004f58 <__sfmoreglue>
 8005094:	4604      	mov	r4, r0
 8005096:	6030      	str	r0, [r6, #0]
 8005098:	2800      	cmp	r0, #0
 800509a:	d1d5      	bne.n	8005048 <__sfp+0x24>
 800509c:	f7ff ff78 	bl	8004f90 <__sfp_lock_release>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	e7ee      	b.n	8005084 <__sfp+0x60>
 80050a6:	bf00      	nop
 80050a8:	0800566c 	.word	0x0800566c
 80050ac:	ffff0001 	.word	0xffff0001

080050b0 <_fwalk_reent>:
 80050b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b4:	4606      	mov	r6, r0
 80050b6:	4688      	mov	r8, r1
 80050b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050bc:	2700      	movs	r7, #0
 80050be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050c2:	f1b9 0901 	subs.w	r9, r9, #1
 80050c6:	d505      	bpl.n	80050d4 <_fwalk_reent+0x24>
 80050c8:	6824      	ldr	r4, [r4, #0]
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	d1f7      	bne.n	80050be <_fwalk_reent+0xe>
 80050ce:	4638      	mov	r0, r7
 80050d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d4:	89ab      	ldrh	r3, [r5, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d907      	bls.n	80050ea <_fwalk_reent+0x3a>
 80050da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050de:	3301      	adds	r3, #1
 80050e0:	d003      	beq.n	80050ea <_fwalk_reent+0x3a>
 80050e2:	4629      	mov	r1, r5
 80050e4:	4630      	mov	r0, r6
 80050e6:	47c0      	blx	r8
 80050e8:	4307      	orrs	r7, r0
 80050ea:	3568      	adds	r5, #104	; 0x68
 80050ec:	e7e9      	b.n	80050c2 <_fwalk_reent+0x12>

080050ee <__retarget_lock_init_recursive>:
 80050ee:	4770      	bx	lr

080050f0 <__retarget_lock_acquire_recursive>:
 80050f0:	4770      	bx	lr

080050f2 <__retarget_lock_release_recursive>:
 80050f2:	4770      	bx	lr

080050f4 <__swhatbuf_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	460e      	mov	r6, r1
 80050f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fc:	2900      	cmp	r1, #0
 80050fe:	b096      	sub	sp, #88	; 0x58
 8005100:	4614      	mov	r4, r2
 8005102:	461d      	mov	r5, r3
 8005104:	da07      	bge.n	8005116 <__swhatbuf_r+0x22>
 8005106:	2300      	movs	r3, #0
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	89b3      	ldrh	r3, [r6, #12]
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	d410      	bmi.n	8005132 <__swhatbuf_r+0x3e>
 8005110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005114:	e00e      	b.n	8005134 <__swhatbuf_r+0x40>
 8005116:	466a      	mov	r2, sp
 8005118:	f000 f9b4 	bl	8005484 <_fstat_r>
 800511c:	2800      	cmp	r0, #0
 800511e:	dbf2      	blt.n	8005106 <__swhatbuf_r+0x12>
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005126:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800512a:	425a      	negs	r2, r3
 800512c:	415a      	adcs	r2, r3
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	e7ee      	b.n	8005110 <__swhatbuf_r+0x1c>
 8005132:	2340      	movs	r3, #64	; 0x40
 8005134:	2000      	movs	r0, #0
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	b016      	add	sp, #88	; 0x58
 800513a:	bd70      	pop	{r4, r5, r6, pc}

0800513c <__smakebuf_r>:
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005140:	079d      	lsls	r5, r3, #30
 8005142:	4606      	mov	r6, r0
 8005144:	460c      	mov	r4, r1
 8005146:	d507      	bpl.n	8005158 <__smakebuf_r+0x1c>
 8005148:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	2301      	movs	r3, #1
 8005152:	6163      	str	r3, [r4, #20]
 8005154:	b002      	add	sp, #8
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	ab01      	add	r3, sp, #4
 800515a:	466a      	mov	r2, sp
 800515c:	f7ff ffca 	bl	80050f4 <__swhatbuf_r>
 8005160:	9900      	ldr	r1, [sp, #0]
 8005162:	4605      	mov	r5, r0
 8005164:	4630      	mov	r0, r6
 8005166:	f000 f879 	bl	800525c <_malloc_r>
 800516a:	b948      	cbnz	r0, 8005180 <__smakebuf_r+0x44>
 800516c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005170:	059a      	lsls	r2, r3, #22
 8005172:	d4ef      	bmi.n	8005154 <__smakebuf_r+0x18>
 8005174:	f023 0303 	bic.w	r3, r3, #3
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	e7e3      	b.n	8005148 <__smakebuf_r+0xc>
 8005180:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <__smakebuf_r+0x7c>)
 8005182:	62b3      	str	r3, [r6, #40]	; 0x28
 8005184:	89a3      	ldrh	r3, [r4, #12]
 8005186:	6020      	str	r0, [r4, #0]
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	9b00      	ldr	r3, [sp, #0]
 8005190:	6163      	str	r3, [r4, #20]
 8005192:	9b01      	ldr	r3, [sp, #4]
 8005194:	6120      	str	r0, [r4, #16]
 8005196:	b15b      	cbz	r3, 80051b0 <__smakebuf_r+0x74>
 8005198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800519c:	4630      	mov	r0, r6
 800519e:	f000 f983 	bl	80054a8 <_isatty_r>
 80051a2:	b128      	cbz	r0, 80051b0 <__smakebuf_r+0x74>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	81a3      	strh	r3, [r4, #12]
 80051b0:	89a0      	ldrh	r0, [r4, #12]
 80051b2:	4305      	orrs	r5, r0
 80051b4:	81a5      	strh	r5, [r4, #12]
 80051b6:	e7cd      	b.n	8005154 <__smakebuf_r+0x18>
 80051b8:	08004f4d 	.word	0x08004f4d

080051bc <_free_r>:
 80051bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051be:	2900      	cmp	r1, #0
 80051c0:	d048      	beq.n	8005254 <_free_r+0x98>
 80051c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c6:	9001      	str	r0, [sp, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f1a1 0404 	sub.w	r4, r1, #4
 80051ce:	bfb8      	it	lt
 80051d0:	18e4      	addlt	r4, r4, r3
 80051d2:	f000 f98b 	bl	80054ec <__malloc_lock>
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <_free_r+0x9c>)
 80051d8:	9801      	ldr	r0, [sp, #4]
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	4615      	mov	r5, r2
 80051de:	b933      	cbnz	r3, 80051ee <_free_r+0x32>
 80051e0:	6063      	str	r3, [r4, #4]
 80051e2:	6014      	str	r4, [r2, #0]
 80051e4:	b003      	add	sp, #12
 80051e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051ea:	f000 b985 	b.w	80054f8 <__malloc_unlock>
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	d90b      	bls.n	800520a <_free_r+0x4e>
 80051f2:	6821      	ldr	r1, [r4, #0]
 80051f4:	1862      	adds	r2, r4, r1
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bf04      	itt	eq
 80051fa:	681a      	ldreq	r2, [r3, #0]
 80051fc:	685b      	ldreq	r3, [r3, #4]
 80051fe:	6063      	str	r3, [r4, #4]
 8005200:	bf04      	itt	eq
 8005202:	1852      	addeq	r2, r2, r1
 8005204:	6022      	streq	r2, [r4, #0]
 8005206:	602c      	str	r4, [r5, #0]
 8005208:	e7ec      	b.n	80051e4 <_free_r+0x28>
 800520a:	461a      	mov	r2, r3
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b10b      	cbz	r3, 8005214 <_free_r+0x58>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d9fa      	bls.n	800520a <_free_r+0x4e>
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	1855      	adds	r5, r2, r1
 8005218:	42a5      	cmp	r5, r4
 800521a:	d10b      	bne.n	8005234 <_free_r+0x78>
 800521c:	6824      	ldr	r4, [r4, #0]
 800521e:	4421      	add	r1, r4
 8005220:	1854      	adds	r4, r2, r1
 8005222:	42a3      	cmp	r3, r4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	d1dd      	bne.n	80051e4 <_free_r+0x28>
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	4421      	add	r1, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	e7d7      	b.n	80051e4 <_free_r+0x28>
 8005234:	d902      	bls.n	800523c <_free_r+0x80>
 8005236:	230c      	movs	r3, #12
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	e7d3      	b.n	80051e4 <_free_r+0x28>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	1961      	adds	r1, r4, r5
 8005240:	428b      	cmp	r3, r1
 8005242:	bf04      	itt	eq
 8005244:	6819      	ldreq	r1, [r3, #0]
 8005246:	685b      	ldreq	r3, [r3, #4]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	bf04      	itt	eq
 800524c:	1949      	addeq	r1, r1, r5
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	6054      	str	r4, [r2, #4]
 8005252:	e7c7      	b.n	80051e4 <_free_r+0x28>
 8005254:	b003      	add	sp, #12
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	2000012c 	.word	0x2000012c

0800525c <_malloc_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	1ccd      	adds	r5, r1, #3
 8005260:	f025 0503 	bic.w	r5, r5, #3
 8005264:	3508      	adds	r5, #8
 8005266:	2d0c      	cmp	r5, #12
 8005268:	bf38      	it	cc
 800526a:	250c      	movcc	r5, #12
 800526c:	2d00      	cmp	r5, #0
 800526e:	4606      	mov	r6, r0
 8005270:	db01      	blt.n	8005276 <_malloc_r+0x1a>
 8005272:	42a9      	cmp	r1, r5
 8005274:	d903      	bls.n	800527e <_malloc_r+0x22>
 8005276:	230c      	movs	r3, #12
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	2000      	movs	r0, #0
 800527c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527e:	f000 f935 	bl	80054ec <__malloc_lock>
 8005282:	4921      	ldr	r1, [pc, #132]	; (8005308 <_malloc_r+0xac>)
 8005284:	680a      	ldr	r2, [r1, #0]
 8005286:	4614      	mov	r4, r2
 8005288:	b99c      	cbnz	r4, 80052b2 <_malloc_r+0x56>
 800528a:	4f20      	ldr	r7, [pc, #128]	; (800530c <_malloc_r+0xb0>)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b923      	cbnz	r3, 800529a <_malloc_r+0x3e>
 8005290:	4621      	mov	r1, r4
 8005292:	4630      	mov	r0, r6
 8005294:	f000 f83c 	bl	8005310 <_sbrk_r>
 8005298:	6038      	str	r0, [r7, #0]
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f837 	bl	8005310 <_sbrk_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d123      	bne.n	80052ee <_malloc_r+0x92>
 80052a6:	230c      	movs	r3, #12
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 f924 	bl	80054f8 <__malloc_unlock>
 80052b0:	e7e3      	b.n	800527a <_malloc_r+0x1e>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	1b5b      	subs	r3, r3, r5
 80052b6:	d417      	bmi.n	80052e8 <_malloc_r+0x8c>
 80052b8:	2b0b      	cmp	r3, #11
 80052ba:	d903      	bls.n	80052c4 <_malloc_r+0x68>
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	441c      	add	r4, r3
 80052c0:	6025      	str	r5, [r4, #0]
 80052c2:	e004      	b.n	80052ce <_malloc_r+0x72>
 80052c4:	6863      	ldr	r3, [r4, #4]
 80052c6:	42a2      	cmp	r2, r4
 80052c8:	bf0c      	ite	eq
 80052ca:	600b      	streq	r3, [r1, #0]
 80052cc:	6053      	strne	r3, [r2, #4]
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 f912 	bl	80054f8 <__malloc_unlock>
 80052d4:	f104 000b 	add.w	r0, r4, #11
 80052d8:	1d23      	adds	r3, r4, #4
 80052da:	f020 0007 	bic.w	r0, r0, #7
 80052de:	1ac2      	subs	r2, r0, r3
 80052e0:	d0cc      	beq.n	800527c <_malloc_r+0x20>
 80052e2:	1a1b      	subs	r3, r3, r0
 80052e4:	50a3      	str	r3, [r4, r2]
 80052e6:	e7c9      	b.n	800527c <_malloc_r+0x20>
 80052e8:	4622      	mov	r2, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7cc      	b.n	8005288 <_malloc_r+0x2c>
 80052ee:	1cc4      	adds	r4, r0, #3
 80052f0:	f024 0403 	bic.w	r4, r4, #3
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d0e3      	beq.n	80052c0 <_malloc_r+0x64>
 80052f8:	1a21      	subs	r1, r4, r0
 80052fa:	4630      	mov	r0, r6
 80052fc:	f000 f808 	bl	8005310 <_sbrk_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d1dd      	bne.n	80052c0 <_malloc_r+0x64>
 8005304:	e7cf      	b.n	80052a6 <_malloc_r+0x4a>
 8005306:	bf00      	nop
 8005308:	2000012c 	.word	0x2000012c
 800530c:	20000130 	.word	0x20000130

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	; (800532c <_sbrk_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fb fd2e 	bl	8000d7c <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	200002f4 	.word	0x200002f4

08005330 <_raise_r>:
 8005330:	291f      	cmp	r1, #31
 8005332:	b538      	push	{r3, r4, r5, lr}
 8005334:	4604      	mov	r4, r0
 8005336:	460d      	mov	r5, r1
 8005338:	d904      	bls.n	8005344 <_raise_r+0x14>
 800533a:	2316      	movs	r3, #22
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	f04f 30ff 	mov.w	r0, #4294967295
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005346:	b112      	cbz	r2, 800534e <_raise_r+0x1e>
 8005348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800534c:	b94b      	cbnz	r3, 8005362 <_raise_r+0x32>
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f830 	bl	80053b4 <_getpid_r>
 8005354:	462a      	mov	r2, r5
 8005356:	4601      	mov	r1, r0
 8005358:	4620      	mov	r0, r4
 800535a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800535e:	f000 b817 	b.w	8005390 <_kill_r>
 8005362:	2b01      	cmp	r3, #1
 8005364:	d00a      	beq.n	800537c <_raise_r+0x4c>
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	d103      	bne.n	8005372 <_raise_r+0x42>
 800536a:	2316      	movs	r3, #22
 800536c:	6003      	str	r3, [r0, #0]
 800536e:	2001      	movs	r0, #1
 8005370:	e7e7      	b.n	8005342 <_raise_r+0x12>
 8005372:	2400      	movs	r4, #0
 8005374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005378:	4628      	mov	r0, r5
 800537a:	4798      	blx	r3
 800537c:	2000      	movs	r0, #0
 800537e:	e7e0      	b.n	8005342 <_raise_r+0x12>

08005380 <raise>:
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <raise+0xc>)
 8005382:	4601      	mov	r1, r0
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	f7ff bfd3 	b.w	8005330 <_raise_r>
 800538a:	bf00      	nop
 800538c:	20000040 	.word	0x20000040

08005390 <_kill_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	; (80053b0 <_kill_r+0x20>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f7fb fc65 	bl	8000c6c <_kill>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d102      	bne.n	80053ac <_kill_r+0x1c>
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	b103      	cbz	r3, 80053ac <_kill_r+0x1c>
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	200002f4 	.word	0x200002f4

080053b4 <_getpid_r>:
 80053b4:	f7fb bc52 	b.w	8000c5c <_getpid>

080053b8 <__sread>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	460c      	mov	r4, r1
 80053bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c0:	f000 f8a0 	bl	8005504 <_read_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	bfab      	itete	ge
 80053c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ca:	89a3      	ldrhlt	r3, [r4, #12]
 80053cc:	181b      	addge	r3, r3, r0
 80053ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053d2:	bfac      	ite	ge
 80053d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053d6:	81a3      	strhlt	r3, [r4, #12]
 80053d8:	bd10      	pop	{r4, pc}

080053da <__swrite>:
 80053da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053de:	461f      	mov	r7, r3
 80053e0:	898b      	ldrh	r3, [r1, #12]
 80053e2:	05db      	lsls	r3, r3, #23
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	4616      	mov	r6, r2
 80053ea:	d505      	bpl.n	80053f8 <__swrite+0x1e>
 80053ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f0:	2302      	movs	r3, #2
 80053f2:	2200      	movs	r2, #0
 80053f4:	f000 f868 	bl	80054c8 <_lseek_r>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	4628      	mov	r0, r5
 800540a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800540e:	f000 b817 	b.w	8005440 <_write_r>

08005412 <__sseek>:
 8005412:	b510      	push	{r4, lr}
 8005414:	460c      	mov	r4, r1
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 f855 	bl	80054c8 <_lseek_r>
 800541e:	1c43      	adds	r3, r0, #1
 8005420:	89a3      	ldrh	r3, [r4, #12]
 8005422:	bf15      	itete	ne
 8005424:	6560      	strne	r0, [r4, #84]	; 0x54
 8005426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800542a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800542e:	81a3      	strheq	r3, [r4, #12]
 8005430:	bf18      	it	ne
 8005432:	81a3      	strhne	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__sclose>:
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 b813 	b.w	8005464 <_close_r>
	...

08005440 <_write_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d07      	ldr	r5, [pc, #28]	; (8005460 <_write_r+0x20>)
 8005444:	4604      	mov	r4, r0
 8005446:	4608      	mov	r0, r1
 8005448:	4611      	mov	r1, r2
 800544a:	2200      	movs	r2, #0
 800544c:	602a      	str	r2, [r5, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	f7fb fc43 	bl	8000cda <_write>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_write_r+0x1e>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_write_r+0x1e>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	200002f4 	.word	0x200002f4

08005464 <_close_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d06      	ldr	r5, [pc, #24]	; (8005480 <_close_r+0x1c>)
 8005468:	2300      	movs	r3, #0
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fb fc4f 	bl	8000d12 <_close>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_close_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_close_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	200002f4 	.word	0x200002f4

08005484 <_fstat_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	; (80054a4 <_fstat_r+0x20>)
 8005488:	2300      	movs	r3, #0
 800548a:	4604      	mov	r4, r0
 800548c:	4608      	mov	r0, r1
 800548e:	4611      	mov	r1, r2
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	f7fb fc4a 	bl	8000d2a <_fstat>
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	d102      	bne.n	80054a0 <_fstat_r+0x1c>
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	b103      	cbz	r3, 80054a0 <_fstat_r+0x1c>
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	bd38      	pop	{r3, r4, r5, pc}
 80054a2:	bf00      	nop
 80054a4:	200002f4 	.word	0x200002f4

080054a8 <_isatty_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4d06      	ldr	r5, [pc, #24]	; (80054c4 <_isatty_r+0x1c>)
 80054ac:	2300      	movs	r3, #0
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fb fc49 	bl	8000d4a <_isatty>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_isatty_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_isatty_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	200002f4 	.word	0x200002f4

080054c8 <_lseek_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4d07      	ldr	r5, [pc, #28]	; (80054e8 <_lseek_r+0x20>)
 80054cc:	4604      	mov	r4, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	2200      	movs	r2, #0
 80054d4:	602a      	str	r2, [r5, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7fb fc42 	bl	8000d60 <_lseek>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_lseek_r+0x1e>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_lseek_r+0x1e>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	200002f4 	.word	0x200002f4

080054ec <__malloc_lock>:
 80054ec:	4801      	ldr	r0, [pc, #4]	; (80054f4 <__malloc_lock+0x8>)
 80054ee:	f7ff bdff 	b.w	80050f0 <__retarget_lock_acquire_recursive>
 80054f2:	bf00      	nop
 80054f4:	200002ec 	.word	0x200002ec

080054f8 <__malloc_unlock>:
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <__malloc_unlock+0x8>)
 80054fa:	f7ff bdfa 	b.w	80050f2 <__retarget_lock_release_recursive>
 80054fe:	bf00      	nop
 8005500:	200002ec 	.word	0x200002ec

08005504 <_read_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	4d07      	ldr	r5, [pc, #28]	; (8005524 <_read_r+0x20>)
 8005508:	4604      	mov	r4, r0
 800550a:	4608      	mov	r0, r1
 800550c:	4611      	mov	r1, r2
 800550e:	2200      	movs	r2, #0
 8005510:	602a      	str	r2, [r5, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	f7fb fbc4 	bl	8000ca0 <_read>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_read_r+0x1e>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_read_r+0x1e>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200002f4 	.word	0x200002f4

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
