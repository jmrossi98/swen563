/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

#include "string.h"
#include "stdio.h"
#include "stm32l476xx.h"
#include "usart.h"
#include "semphr.h"

///////////////////////////////  TRANSMIT STUFF ////////////////////////////
void printBytes(char *bytes, int num);
xSemaphoreHandle txMutex;

// This routine takes txMutex, prints using _IT, but does not wait until TX is done.
// Any thread can freely use this method at any time.
// BUT beware!!! Your `bytes` MUST remain in tact until the last byte has been sent.
// In other words, 2 calls to printBytes made in rapid succession from the same thread,
// where the content of `bytes` is overwritten in the 2nd call will be a problem.
void printBytes(char *bytes, int num){
    // TAKE semaphore here, but GIVE back in ISR when _IT is actually done transmitting!!
    xSemaphoreTake( txMutex, portMAX_DELAY );
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)bytes, num);
}

// overrides __weak version in stm32l4xx_hal_uart.c
// it is called after the last byte has been transmitted
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    BaseType_t pxHigherPriorityTaskWoken;
    // last byte transmitted means we can give semaphore back
    xSemaphoreGiveFromISR( txMutex, &pxHigherPriorityTaskWoken );
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
}

void TransmitTask( void *pvParameters) {
    char *buffer = (char *)pvParameters;

    for(;;) {
        printBytes(buffer, strlen(buffer));

        // processing resumes here immediately after queueing bytes to transmit
        vTaskDelay(strlen(buffer));
    }
}


///////////////////////////////  RECEIVE STUFF ////////////////////////////

xQueueHandle rxQueue;               // RX ISR places char in queue, ReceiveTask pulls them out.
uint8_t rx_char;                    // HAL will place received char here
#define CMD_BUF_SIZE 100            // this is the max length of a command line expected from the user.
static char cmd_line[CMD_BUF_SIZE]; // Received chars are buffered here until printed

// overrides __weak version in stm32l4xx_hal_uart.c
// called when a byte has been received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    // queue the received byte for the ReceiveTask
    BaseType_t higherPriorityTaskWoken;
    xQueueSendFromISR(rxQueue, &rx_char, &higherPriorityTaskWoken); // queue the char
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to receive another char
    HAL_UART_Transmit_IT(&huart2, &rx_char, 1);
    portYIELD_FROM_ISR(higherPriorityTaskWoken);    // Yield to a higher priority task if necessary
}

// pulls chars from rxQueue. When '\n' encountered, the line is printed
void ReceiveTask( void *pvParameters) {
    char letter;
    int cmd_idx = 0;
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to start receiving chars!!!

    for(;;) {
        // keep pulling letters from rxQueue until its empty
        while(xQueuePeek( rxQueue, &letter, 0 ) != errQUEUE_EMPTY) {
            xQueueReceive( rxQueue, &letter, 1000);    // SHOULD return immediately because queue not empty

            // add letter to command line
            cmd_line[cmd_idx] = letter & 0xff;
            cmd_idx = (cmd_idx+1) % CMD_BUF_SIZE;   // safe if user types > CMD_BUF_SIZE with no \n

            // print a full command line (ending in '\n')
            if(letter == '\n') {
                cmd_line[cmd_idx] = 0;          // nul terminate string
                printBytes(cmd_line, cmd_idx);  // this call blocks
                cmd_idx = 0;
            }

            // give other tasks a chance
            vTaskDelay(100); // assume user types < 100 letters/sec
        }
    }
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .priority = (osPriority_t) osPriorityNormal,
  .stack_size = 256 * 4
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
/* USER CODE END 1 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////

    ///////////////////////////////  TRANSMIT STUFF ////////////////////////////

    // create mutex for transmission (printing)
    txMutex = xSemaphoreCreateBinary();     // protects HAL_UART in printBytes()
    xSemaphoreGive(txMutex);                // the mutex is ready. First come, first served.

    // create 3 tasks to Transmit
//    xTaskCreate( TransmitTask, "Transmit", 256, "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\r\n", 2, NULL);
//    xTaskCreate( TransmitTask, "Transmit", 256, "22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\r\n", 2, NULL);
//    xTaskCreate( TransmitTask, "Transmit", 256, "33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "Enter a two letter command to control each servo motor...\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "Valid letters are:\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --p: Pause recipe\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --c: Continue recipe\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --r: Move servo to right\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --l: Move servo to left\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --n: Do nothing\r\n", 2, NULL);
	xTaskCreate( TransmitTask, "Transmit", 256, "    --b: Start recipe\r\n", 2, NULL);
    ///////////////////////////////  RECEIVE STUFF ////////////////////////////

    // we'll queue up to 10 letters
    rxQueue = xQueueCreate( 10, 1);

    // create 1 Receive task
    xTaskCreate( ReceiveTask, "Receive", 256, "", 2, NULL );

    /////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////

  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
