#include "bank.h"

int current_time;
int id[NUM_TELLERS];
struct Bank_t bank;
struct Metrics_t metrics;
SemaphoreHandle_t metric_mutex;
SemaphoreHandle_t HAL_mutex;
SemaphoreHandle_t txMutex;
xQueueHandle rxQueue;
TickType_t start;

///////////////////////////////  TRANSMIT STUFF ////////////////////////////
void printBytes(char *bytes, int num);
xSemaphoreHandle txMutex;

// This routine takes txMutex, prints using _IT, but does not wait until TX is done.
// Any thread can freely use this method at any time.
// BUT beware!!! Your `bytes` MUST remain in tact until the last byte has been sent.
// In other words, 2 calls to printBytes made in rapid succession from the same thread,
// where the content of `bytes` is overwritten in the 2nd call will be a problem.
void printBytes(char *bytes, int num){
    // TAKE semaphore here, but GIVE back in ISR when _IT is actually done transmitting!!
    xSemaphoreTake( txMutex, portMAX_DELAY );
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)bytes, num);
}

// overrides __weak version in stm32l4xx_hal_uart.c
// it is called after the last byte has been transmitted
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    BaseType_t pxHigherPriorityTaskWoken;
    // last byte transmitted means we can give semaphore back
    xSemaphoreGiveFromISR( txMutex, &pxHigherPriorityTaskWoken );
    portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
}

void TransmitTask( void *pvParameters) {
    char *buffer = (char *)pvParameters;

    for(;;) {
        printBytes(buffer, strlen(buffer));

        // processing resumes here immediately after queueing bytes to transmit
        vTaskDelay(10);
    }
}


///////////////////////////////  RECEIVE STUFF ////////////////////////////

xQueueHandle rxQueue;               // RX ISR places char in queue, ReceiveTask pulls them out.
uint8_t rx_char;                    // HAL will place received char here
#define CMD_BUF_SIZE 100            // this is the max length of a command line expected from the user.
static char cmd_line[CMD_BUF_SIZE]; // Received chars are buffered here until printed

// overrides __weak version in stm32l4xx_hal_uart.c
// called when a byte has been received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    // queue the received byte for the ReceiveTask
    BaseType_t higherPriorityTaskWoken;
    xQueueSendFromISR(rxQueue, &rx_char, &higherPriorityTaskWoken); // queue the char
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to receive another char
    portYIELD_FROM_ISR(higherPriorityTaskWoken);    // Yield to a higher priority task if necessary
}

// pulls chars from rxQueue. When '\n' encountered, the line is printed
void ReceiveTask( void *pvParameters) {
    char letter;
    int cmd_idx = 0;
    HAL_UART_Receive_IT(&huart2, &rx_char, 1);      // tell HAL to start receiving chars!!!

    for(;;) {
        // keep pulling letters from rxQueue until its empty
        while(xQueuePeek( rxQueue, &letter, 0 ) != errQUEUE_EMPTY) {
            xQueueReceive( rxQueue, &letter, 1000);    // SHOULD return immediately because queue not empty

            // add letter to command line
            cmd_line[cmd_idx] = letter & 0xff;
            cmd_idx = (cmd_idx+1) % CMD_BUF_SIZE;   // safe if user types > CMD_BUF_SIZE with no \n

            // print a full command line (ending in '\n')
            if(letter == '\n') {
                cmd_line[cmd_idx] = 0;          // nul terminate string
                printBytes(cmd_line, cmd_idx);  // this call blocks
                cmd_idx = 0;
            }

            // give other tasks a chance
            vTaskDelay(100); // assume user types < 100 letters/sec
        }
    }
}

void print_line(char* text){
	xSemaphoreTake(HAL_mutex, 1000000);
	xTaskCreate( TransmitTask, "Transmit", 256, text, 2, NULL);
	xSemaphoreGive(HAL_mutex);
}

//void usart_real_time_write(char data, int print_newline){
//  char write_buffer[1] = "";
//  write_buffer[0] = data;
//  xSemaphoreTake(HAL_mutex, 1000000);
//  HAL_UART_Transmit(&huart2, (uint8_t *)write_buffer, strlen(write_buffer), 1000000);
//  xSemaphoreGive(HAL_mutex);
//  if(print_newline){
//	  print_line("\r\n");
//  }
//}


int get_cmd(){
	int index = 0;
	int first = 0;
	int recipe_start = 0;
	char input = "";
	char command_buffer[3] = {};
	print_line("");
	print_line("Enter a command:");

	xSemaphoreTake(HAL_mutex, 1000000);
	input = HAL_UART_Receive_IT(&huart2, (uint8_t *)input, strlen(input));
	xSemaphoreGive(HAL_mutex);
	while(input != 13){
		if(is_valid(&input, "Xx")){
			usart_real_time_write(input, 1);

			return recipe_start;
		}
		else {
			if(index >= 2){
				break;
			}
			command_buffer[index] = input;
			index++;
			print_line(input);
		}
		xSemaphoreTake(HAL_mutex, 1000000);
		input = HAL_UART_Receive_IT(&huart2, (uint8_t *)input, strlen(input));
		xSemaphoreGive(HAL_mutex);
	}
	//recipe_start = parse_cmd(command_buffer);
	return recipe_start;
}

void servo_thread(void* argument){
	print_line("Enter a two letter command to control each servo motor...\r\n");
	print_line("Valid letters are:\r\n");
	print_line("    --p: Pause recipe\r\n");
	print_line("    --c: Continue recipe\r\n");
	print_line("    --r: Move servo to right\r\n");
	print_line("    --l: Move servo to left\r\n");
	print_line("    --n: Do nothing\r\n");
	print_line("    --b: Start recipe\r\n");

	int recipe_start = 0;
	while(1){
		recipe_start = 0;
		recipe_start = get_cmd();
	}

//	print_line("Entering bank thread\r\n");
//	start = xTaskGetTickCount();
//	TickType_t last_thread_wake = start;
//	set_current_time(0);
//	bank.is_open = 1;
//	int customers_entered = 0;
//	int localSim = get_current_time();
//	while(bank.is_open == 1){
//		int customer_interval = get_random(300) + 100;
//		set_current_time(localSim += customer_interval);
//		if(get_current_time() >= 42000){
//			bank.is_open = 0;
//		}
//		vTaskDelayUntil(&last_thread_wake, customer_interval);
//		int customer_transaction_time = get_random(450) + 30;
//		struct Customer_t customer = {customers_entered, last_thread_wake, 0,0, customer_transaction_time};
//		xQueueSend(bank.customers,&customer,0);
//		xSemaphoreTake(metric_mutex, 10000);
//		if(metrics.max_queue_depth < uxQueueMessagesWaiting(bank.customers)){
//			metrics.max_queue_depth = uxQueueMessagesWaiting(bank.customers);
//		}
//		xSemaphoreGive(metric_mutex);
//		customers_entered++;
//		print_metrics();
//	}
//	xSemaphoreTake(metric_mutex, 10000);
//	metrics.customers_served = customers_entered;
//	xSemaphoreGive(metric_mutex);
//	int customers_left_in_queue = uxQueueMessagesWaiting(bank.customers);
//	while(1){
//		int current_customers = (int)uxQueueMessagesWaiting(bank.customers);
//		if(current_customers < customers_left_in_queue - 3){
//			print_metrics();
//			customers_left_in_queue = current_customers;
//		}
//		bool teller_busy[3] = {true, true, true};
//		for(int j = 0; j<NUM_TELLERS; j++){
//			if(bank.tellers[j].teller_status != BUSY){
//				teller_busy[j] = false;
//			}
//		}
//		if(customers_left_in_queue <= 0 && !teller_busy[0]&& !teller_busy[1]&& !teller_busy[2] ){
//			break;
//		}
//	}
//	xSemaphoreTake(metric_mutex, 10000000);
//	metrics.avg_customer_waiting_time = (metrics.total_customer_queue_time/(float)metrics.customers_served)/100.0;
//	metrics.avg_teller_time = (metrics.total_customer_teller_time/(float)metrics.customers_served)/100.0;
//	metrics.avg_teller_waiting_time = (metrics.total_teller_wait_time/(float)metrics.customers_served)/100.0;
//	xSemaphoreGive(metric_mutex);
//	print_line("Total metrics:");
//	int_format_print("Total Customers Served: %d\r\n", metrics.customers_served);
//	int_format_print("Teller 1 Served %d Customers\r\n", metrics.customers_served_per_teller[0]);
//	int_format_print("Teller 2 Served %d Customers\r\n", metrics.customers_served_per_teller[1]);
//	int_format_print("Teller 3 Served %d Customers\r\n", metrics.customers_served_per_teller[2]);
//	float_format_print("Average Customer Waiting Time: %f\r\n", metrics.avg_customer_waiting_time);
//	float_format_print("Average Time Tellers Spent Helping Customers: %f\r\n", metrics.avg_teller_time);
//	float_format_print("Average Time Tellers Spent Waiting: %f\r\n", metrics.avg_teller_waiting_time);
//	float_format_print("Max Customer Wait Time: %f\r\n", metrics.max_customer_wait_time/100.0);
//	float_format_print("Max Time Tellers Were Waiting: %f\r\n", metrics.max_teller_wait_time/100.0);
//	float_format_print("Max Transaction Time: %f\r\n", metrics.max_transaction_time/100.0);
//	int_format_print("Max Queue Depth: %d\r\n", metrics.max_queue_depth);
//	xSemaphoreGive(metric_mutex);
//	while(1){}
}

void thread_init(void){
	HAL_mutex = xSemaphoreCreateMutex();
	metric_mutex = xSemaphoreCreateMutex();

    // create mutex for transmission (printing)
    txMutex = xSemaphoreCreateBinary();     // protects HAL_UART in printBytes()
    // we'll queue up to 10 letters
    rxQueue = xQueueCreate( 10, 1);

    // create 1 Receive task
    xTaskCreate( ReceiveTask, "Receive", 256, "", 2, NULL );

	print_line( "Starting threads...\r\n");
	bank_init();
	metrics = metric_init();
	xTaskCreate(servo_thread, "servo_thread", 128, 0, osPriorityNormal, 0);
	for(int i = 0; i < NUM_TELLERS; i++){
		id[i] = i;
		xTaskCreate(teller_thread, "teller_thread", 128, (void*) &id[i], osPriorityNormal, 0);
	}
}


void print_metrics(){
	char current_sim_time[60];
	char teller_status_1[60];
	char teller_status_2[60];
	char teller_status_3[60];
	int hours = current_time/6000;
	int mins = (current_time/100)%60;
	sprintf(current_sim_time, "Current Simulation Time: %d:%02d \r\n", hours+9, mins);
	sprintf(teller_status_1, "Teller 1 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[0].teller_status), bank.tellers[0].num_customers);
	sprintf(teller_status_2, "Teller 2 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[1].teller_status), bank.tellers[1].num_customers);
	sprintf(teller_status_3, "Teller 3 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[2].teller_status), bank.tellers[2].num_customers);
	print_line(current_sim_time);
	print_line(teller_status_1);
	print_line(teller_status_2);
	print_line(teller_status_3);
}

void int_format_print(char* text, int num){
	char msg[strlen(text)];
	sprintf(msg, text, num);
	xSemaphoreTake(HAL_mutex, 1000000);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000000);
	xSemaphoreGive(HAL_mutex);
}

void float_format_print(char* text, float num){
	char msg[strlen(text)];
	sprintf(msg, text, num);
	xSemaphoreTake(HAL_mutex, 1000000);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000000);
	xSemaphoreGive(HAL_mutex);
}

void set_current_time(int new_time){
	current_time = new_time;
}

int get_current_time(void){
	int sim;
	sim = current_time;
	return sim;
}
struct teller teller_init(void){
	struct teller t = {IDLE, 0, 0, 0, 0, 0};
	return t;
}

void bank_init(void){
	bank.customers = xQueueCreate(50, sizeof(struct Customer_t));
	for(int i = 0; i<NUM_TELLERS; i++){
		bank.tellers[i] = teller_init();
	}
}

struct Metrics_t metric_init(void){
	struct Metrics_t metrics;
	metrics.customers_served = 0;
	for(int i = 0; i<NUM_TELLERS; i++){
		metrics.customers_served_per_teller[i] = 0;
	}
	metrics.avg_customer_waiting_time = 0;
	metrics.avg_teller_time = 0;
	metrics.avg_teller_waiting_time = 0;
	metrics.max_customer_wait_time = 0;
	metrics.max_teller_wait_time = 0;
	metrics.max_transaction_time = 0;
	metrics.max_queue_depth = 0;
	metrics.total_customer_queue_time = 0;
	metrics.total_customer_teller_time = 0;
	metrics.total_teller_wait_time = 0;
	return metrics;
}


void teller_thread(void* argument){
	int i = *(int*) argument;
	TickType_t last_thread_wake = xTaskGetTickCount();
	float break_interval = get_random(3000)+3000;
	float break_len = get_random(300) + 100;
	float break_time_at = last_thread_wake + break_interval;
	for(;;){
		bank.tellers[i].teller_status = IDLE;
		struct Customer_t customer;
		customer.time_entered_queue = xTaskGetTickCount();
		BaseType_t rec = pdTRUE;
		for(;;){
			rec = xQueueReceive(bank.customers, &customer, break_time_at - last_thread_wake);
			if(rec != pdTRUE){
				bank.tellers[i].teller_status = BREAK;
				xSemaphoreTake(metric_mutex, 10000);
				metrics.total_num_breaks[i]++;
				xSemaphoreGive(metric_mutex);
				osDelay(break_len);
				last_thread_wake = xTaskGetTickCount();
				bank.tellers[i].teller_status = IDLE;
				xSemaphoreTake(metric_mutex, 10000);
				xSemaphoreGive(metric_mutex);
				break_interval = get_random(3000)+3000;
				break_len = get_random(300)+100;
				break_time_at = last_thread_wake + break_interval;
			}
			else{
				break;
			}
		}
		uint32_t teller_wait_time = xTaskGetTickCount() - last_thread_wake;
		bank.tellers[i].num_customers += 1;
		bank.tellers[i].teller_status = BUSY;
		uint32_t dequeue_time = xTaskGetTickCount();
		uint32_t customer_time_in_queue = dequeue_time - customer.time_entered_queue;
		uint32_t transaction_time = get_random(450) + 30;
		bank.tellers[i].total_transaction_time += transaction_time;
		osDelay(transaction_time);
		last_thread_wake = xTaskGetTickCount();
		xSemaphoreTake(metric_mutex, 10000);
		metrics.total_customer_queue_time += customer_time_in_queue;
		if(customer_time_in_queue > metrics.max_customer_wait_time){
			metrics.max_customer_wait_time = customer_time_in_queue;
		}
		metrics.total_customer_teller_time += transaction_time;
		if(transaction_time > metrics.max_transaction_time){
			metrics.max_transaction_time = transaction_time;
		}
		metrics.customers_served_per_teller[i]++;
		metrics.total_teller_wait_time = teller_wait_time;
		if(teller_wait_time > metrics.max_teller_wait_time){
			metrics.max_teller_wait_time = teller_wait_time;
		}
		xSemaphoreGive(metric_mutex);
		if(get_current_time() >= 42000 && uxQueueMessagesWaiting(bank.customers) == 0){
			bank.tellers[i].teller_status = IDLE;
			break;
		}
	}
	while(1){}
}

int get_random(int max){
	uint32_t random_number = 0;

	return (int)random_number;
}

char* teller_status_to_string(enum status teller_status){
	if(teller_status == IDLE){
		return "Idle";
	}
	else if(teller_status == BUSY){
		return "Busy";
	}
	else if(teller_status == BREAK){
		return "Break";
	}
	else{
		return "Unknown";
	}
}
