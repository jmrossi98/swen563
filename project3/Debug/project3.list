
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d890  0800d890  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d890  0800d890  0001d890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d898  0800d898  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d898  0800d898  0001d898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d89c  0800d89c  0001d89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000324c  20000098  0800d934  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200032e4  0800d934  000232e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ea90  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005cd3  00000000  00000000  0004eb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  00054828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c38  00000000  00000000  000566a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ecd3  00000000  00000000  000582e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f9a  00000000  00000000  00086fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108441  00000000  00000000  000adf4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b638e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000842c  00000000  00000000  001b63e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d48c 	.word	0x0800d48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d48c 	.word	0x0800d48c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <print_line>:
struct Metrics_t metrics;
SemaphoreHandle_t metric_mutex;
SemaphoreHandle_t HAL_mutex;
TickType_t start;

void print_line(char* text){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	xSemaphoreTake(HAL_mutex, 1000000);
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <print_line+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	490d      	ldr	r1, [pc, #52]	; (8000df8 <print_line+0x44>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00a f804 	bl	800add0 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen(text), 1000000);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fa01 	bl	80001d0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <print_line+0x44>)
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <print_line+0x48>)
 8000dd8:	f005 fe96 	bl	8006b08 <HAL_UART_Transmit>
	xSemaphoreGive(HAL_mutex);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <print_line+0x40>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f009 fd79 	bl	800a8dc <xQueueGenericSend>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200029d8 	.word	0x200029d8
 8000df8:	000f4240 	.word	0x000f4240
 8000dfc:	20002b64 	.word	0x20002b64

08000e00 <print_metrics>:

void print_metrics(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0be      	sub	sp, #248	; 0xf8
 8000e04:	af00      	add	r7, sp, #0
	char current_sim_time[60];
	char teller_status_1[60];
	char teller_status_2[60];
	char teller_status_3[60];
	int hours = current_time/6000;
 8000e06:	4b35      	ldr	r3, [pc, #212]	; (8000edc <print_metrics+0xdc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <print_metrics+0xe0>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	11d2      	asrs	r2, r2, #7
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int mins = (current_time/100)%60;
 8000e1a:	4b30      	ldr	r3, [pc, #192]	; (8000edc <print_metrics+0xdc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <print_metrics+0xe4>)
 8000e20:	fb82 1203 	smull	r1, r2, r2, r3
 8000e24:	1152      	asrs	r2, r2, #5
 8000e26:	17db      	asrs	r3, r3, #31
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <print_metrics+0xe8>)
 8000e2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e30:	4413      	add	r3, r2
 8000e32:	1159      	asrs	r1, r3, #5
 8000e34:	17d3      	asrs	r3, r2, #31
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	460b      	mov	r3, r1
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	1a5b      	subs	r3, r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	sprintf(current_sim_time, "Current Simulation Time: %d:%02d \r\n", hours+9, mins);
 8000e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e4a:	f103 0209 	add.w	r2, r3, #9
 8000e4e:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000e52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000e56:	4925      	ldr	r1, [pc, #148]	; (8000eec <print_metrics+0xec>)
 8000e58:	f00b ffa4 	bl	800cda4 <siprintf>
	sprintf(teller_status_1, "Teller 1 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[0].teller_status), bank.tellers[0].num_customers);
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <print_metrics+0xf0>)
 8000e5e:	7c1b      	ldrb	r3, [r3, #16]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fdab 	bl	80019bc <teller_status_to_string>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <print_metrics+0xf0>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8000e70:	4920      	ldr	r1, [pc, #128]	; (8000ef4 <print_metrics+0xf4>)
 8000e72:	f00b ff97 	bl	800cda4 <siprintf>
	sprintf(teller_status_2, "Teller 2 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[1].teller_status), bank.tellers[1].num_customers);
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <print_metrics+0xf0>)
 8000e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 fd9d 	bl	80019bc <teller_status_to_string>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <print_metrics+0xf0>)
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000e8c:	491a      	ldr	r1, [pc, #104]	; (8000ef8 <print_metrics+0xf8>)
 8000e8e:	f00b ff89 	bl	800cda4 <siprintf>
	sprintf(teller_status_3, "Teller 3 Status: %s, Customers Served: %d\r\n", teller_status_to_string(bank.tellers[2].teller_status), bank.tellers[2].num_customers);
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <print_metrics+0xf0>)
 8000e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fd8f 	bl	80019bc <teller_status_to_string>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <print_metrics+0xf0>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	4915      	ldr	r1, [pc, #84]	; (8000efc <print_metrics+0xfc>)
 8000ea8:	f00b ff7c 	bl	800cda4 <siprintf>
	print_line(current_sim_time);
 8000eac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff7f 	bl	8000db4 <print_line>
	print_line(teller_status_1);
 8000eb6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ff7a 	bl	8000db4 <print_line>
	print_line(teller_status_2);
 8000ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff75 	bl	8000db4 <print_line>
	print_line(teller_status_3);
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff71 	bl	8000db4 <print_line>
}
 8000ed2:	bf00      	nop
 8000ed4:	37f8      	adds	r7, #248	; 0xf8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20002930 	.word	0x20002930
 8000ee0:	057619f1 	.word	0x057619f1
 8000ee4:	51eb851f 	.word	0x51eb851f
 8000ee8:	88888889 	.word	0x88888889
 8000eec:	0800d4a4 	.word	0x0800d4a4
 8000ef0:	200029dc 	.word	0x200029dc
 8000ef4:	0800d4c8 	.word	0x0800d4c8
 8000ef8:	0800d4f4 	.word	0x0800d4f4
 8000efc:	0800d520 	.word	0x0800d520

08000f00 <int_format_print>:

void int_format_print(char* text, int num){
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	466b      	mov	r3, sp
 8000f0c:	461d      	mov	r5, r3
	char msg[strlen(text)];
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff f95e 	bl	80001d0 <strlen>
 8000f14:	4604      	mov	r4, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f04f 0100 	mov.w	r1, #0
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	00cb      	lsls	r3, r1, #3
 8000f2c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f30:	00c2      	lsls	r2, r0, #3
 8000f32:	4620      	mov	r0, r4
 8000f34:	f04f 0100 	mov.w	r1, #0
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	00cb      	lsls	r3, r1, #3
 8000f42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f46:	00c2      	lsls	r2, r0, #3
 8000f48:	1de3      	adds	r3, r4, #7
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f52:	466b      	mov	r3, sp
 8000f54:	3300      	adds	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
	sprintf(msg, text, num);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00b ff20 	bl	800cda4 <siprintf>
	xSemaphoreTake(HAL_mutex, 1000000);
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <int_format_print+0xa0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <int_format_print+0xa4>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 ff30 	bl	800add0 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000000);
 8000f70:	68bc      	ldr	r4, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f92b 	bl	80001d0 <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <int_format_print+0xa4>)
 8000f80:	4621      	mov	r1, r4
 8000f82:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <int_format_print+0xa8>)
 8000f84:	f005 fdc0 	bl	8006b08 <HAL_UART_Transmit>
	xSemaphoreGive(HAL_mutex);
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <int_format_print+0xa0>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	f009 fca3 	bl	800a8dc <xQueueGenericSend>
 8000f96:	46ad      	mov	sp, r5
}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa0:	200029d8 	.word	0x200029d8
 8000fa4:	000f4240 	.word	0x000f4240
 8000fa8:	20002b64 	.word	0x20002b64

08000fac <float_format_print>:

void float_format_print(char* text, float num){
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	ed87 0a00 	vstr	s0, [r7]
 8000fb8:	466b      	mov	r3, sp
 8000fba:	461d      	mov	r5, r3
	char msg[strlen(text)];
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff f907 	bl	80001d0 <strlen>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f04f 0100 	mov.w	r1, #0
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	00cb      	lsls	r3, r1, #3
 8000fda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fde:	00c2      	lsls	r2, r0, #3
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f04f 0100 	mov.w	r1, #0
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	00cb      	lsls	r3, r1, #3
 8000ff0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ff4:	00c2      	lsls	r2, r0, #3
 8000ff6:	1de3      	adds	r3, r4, #7
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	ebad 0d03 	sub.w	sp, sp, r3
 8001000:	466b      	mov	r3, sp
 8001002:	3300      	adds	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
	sprintf(msg, text, num);
 8001006:	68bc      	ldr	r4, [r7, #8]
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f7ff fa9d 	bl	8000548 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4620      	mov	r0, r4
 8001016:	f00b fec5 	bl	800cda4 <siprintf>
	xSemaphoreTake(HAL_mutex, 1000000);
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <float_format_print+0xac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	490f      	ldr	r1, [pc, #60]	; (800105c <float_format_print+0xb0>)
 8001020:	4618      	mov	r0, r3
 8001022:	f009 fed5 	bl	800add0 <xQueueSemaphoreTake>
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 1000000);
 8001026:	68bc      	ldr	r4, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8d0 	bl	80001d0 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <float_format_print+0xb0>)
 8001036:	4621      	mov	r1, r4
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <float_format_print+0xb4>)
 800103a:	f005 fd65 	bl	8006b08 <HAL_UART_Transmit>
	xSemaphoreGive(HAL_mutex);
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <float_format_print+0xac>)
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	f009 fc48 	bl	800a8dc <xQueueGenericSend>
 800104c:	46ad      	mov	sp, r5
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bdb0      	pop	{r4, r5, r7, pc}
 8001056:	bf00      	nop
 8001058:	200029d8 	.word	0x200029d8
 800105c:	000f4240 	.word	0x000f4240
 8001060:	20002b64 	.word	0x20002b64

08001064 <set_current_time>:

void set_current_time(int new_time){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	current_time = new_time;
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <set_current_time+0x1c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20002930 	.word	0x20002930

08001084 <get_current_time>:

int get_current_time(void){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	int sim;
	sim = current_time;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <get_current_time+0x1c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	607b      	str	r3, [r7, #4]
	return sim;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20002930 	.word	0x20002930

080010a4 <teller_init>:
struct teller teller_init(void){
 80010a4:	b4b0      	push	{r4, r5, r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	struct teller t = {IDLE, 0, 0, 0, 0, 0};
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
 80010bc:	615a      	str	r2, [r3, #20]
	return t;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	461d      	mov	r5, r3
 80010c2:	f107 0408 	add.w	r4, r7, #8
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bcb0      	pop	{r4, r5, r7}
 80010da:	4770      	bx	lr

080010dc <bank_init>:

void bank_init(void){
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
	bank.customers = xQueueCreate(50, sizeof(struct Customer_t));
 80010e2:	2200      	movs	r2, #0
 80010e4:	2114      	movs	r1, #20
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f009 fb70 	bl	800a7cc <xQueueGenericCreate>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <bank_init+0x5c>)
 80010f0:	6053      	str	r3, [r2, #4]
	for(int i = 0; i<NUM_TELLERS; i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e017      	b.n	8001128 <bank_init+0x4c>
		bank.tellers[i] = teller_init();
 80010f8:	490f      	ldr	r1, [pc, #60]	; (8001138 <bank_init+0x5c>)
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	440b      	add	r3, r1
 8001106:	f103 0410 	add.w	r4, r3, #16
 800110a:	463b      	mov	r3, r7
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffc9 	bl	80010a4 <teller_init>
 8001112:	4625      	mov	r5, r4
 8001114:	463c      	mov	r4, r7
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
	for(int i = 0; i<NUM_TELLERS; i++){
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3301      	adds	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	2b02      	cmp	r3, #2
 800112c:	dde4      	ble.n	80010f8 <bank_init+0x1c>
	}
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	200029dc 	.word	0x200029dc

0800113c <metric_init>:

struct Metrics_t metric_init(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b0a8      	sub	sp, #160	; 0xa0
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	struct Metrics_t metrics;
	metrics.customers_served = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i<NUM_TELLERS; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800114e:	e00d      	b.n	800116c <metric_init+0x30>
		metrics.customers_served_per_teller[i] = 0;
 8001150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800115a:	4413      	add	r3, r2
 800115c:	2200      	movs	r2, #0
 800115e:	f843 2c94 	str.w	r2, [r3, #-148]
	for(int i = 0; i<NUM_TELLERS; i++){
 8001162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001166:	3301      	adds	r3, #1
 8001168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800116c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001170:	2b02      	cmp	r3, #2
 8001172:	dded      	ble.n	8001150 <metric_init+0x14>
	}
	metrics.avg_customer_waiting_time = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	metrics.avg_teller_time = 0;
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 2308 	strd	r2, r3, [r7, #32]
	metrics.avg_teller_waiting_time = 0;
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	metrics.max_customer_wait_time = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
	metrics.max_teller_wait_time = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
	metrics.max_transaction_time = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
	metrics.max_queue_depth = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	metrics.total_customer_queue_time = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	metrics.total_customer_teller_time = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	metrics.total_teller_wait_time = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	return metrics;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2290      	movs	r2, #144	; 0x90
 80011c4:	4619      	mov	r1, r3
 80011c6:	f00b fd1d 	bl	800cc04 <memcpy>
}
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	37a0      	adds	r7, #160	; 0xa0
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <bank_thread>:

void bank_thread(void* argument){
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b091      	sub	sp, #68	; 0x44
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	print_line("Entering bank thread\r\n");
 80011dc:	4856      	ldr	r0, [pc, #344]	; (8001338 <bank_thread+0x164>)
 80011de:	f7ff fde9 	bl	8000db4 <print_line>
	start = xTaskGetTickCount();
 80011e2:	f00a fb9d 	bl	800b920 <xTaskGetTickCount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4a54      	ldr	r2, [pc, #336]	; (800133c <bank_thread+0x168>)
 80011ea:	6013      	str	r3, [r2, #0]
	TickType_t last_thread_wake = start;
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <bank_thread+0x168>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	623b      	str	r3, [r7, #32]
	set_current_time(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff ff36 	bl	8001064 <set_current_time>
	bank.is_open = 1;
 80011f8:	4b51      	ldr	r3, [pc, #324]	; (8001340 <bank_thread+0x16c>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
	int customers_entered = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
	int localSim = get_current_time();
 8001202:	f7ff ff3f 	bl	8001084 <get_current_time>
 8001206:	63b8      	str	r0, [r7, #56]	; 0x38
	while(bank.is_open == 1){
 8001208:	e05e      	b.n	80012c8 <bank_thread+0xf4>
		int customer_interval = get_random(300) + 100;
 800120a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800120e:	f000 fbbb 	bl	8001988 <get_random>
 8001212:	4603      	mov	r3, r0
 8001214:	3364      	adds	r3, #100	; 0x64
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
		set_current_time(localSim += customer_interval);
 8001218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	4413      	add	r3, r2
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001222:	f7ff ff1f 	bl	8001064 <set_current_time>
		if(get_current_time() >= 42000){
 8001226:	f7ff ff2d 	bl	8001084 <get_current_time>
 800122a:	4603      	mov	r3, r0
 800122c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001230:	4293      	cmp	r3, r2
 8001232:	dd02      	ble.n	800123a <bank_thread+0x66>
			bank.is_open = 0;
 8001234:	4b42      	ldr	r3, [pc, #264]	; (8001340 <bank_thread+0x16c>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
		}
		vTaskDelayUntil(&last_thread_wake, customer_interval);
 800123a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f00a f9c8 	bl	800b5d8 <vTaskDelayUntil>
		int customer_transaction_time = get_random(450) + 30;
 8001248:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800124c:	f000 fb9c 	bl	8001988 <get_random>
 8001250:	4603      	mov	r3, r0
 8001252:	331e      	adds	r3, #30
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
		struct Customer_t customer = {customers_entered, last_thread_wake, 0,0, customer_transaction_time};
 8001256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	61fb      	str	r3, [r7, #28]
		xQueueSend(bank.customers,&customer,0);
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <bank_thread+0x16c>)
 800126c:	6858      	ldr	r0, [r3, #4]
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	2300      	movs	r3, #0
 8001274:	2200      	movs	r2, #0
 8001276:	f009 fb31 	bl	800a8dc <xQueueGenericSend>
		xSemaphoreTake(metric_mutex, 10000);
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <bank_thread+0x170>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001282:	4618      	mov	r0, r3
 8001284:	f009 fda4 	bl	800add0 <xQueueSemaphoreTake>
		if(metrics.max_queue_depth < uxQueueMessagesWaiting(bank.customers)){
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <bank_thread+0x174>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	461c      	mov	r4, r3
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <bank_thread+0x16c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f009 ff28 	bl	800b0e8 <uxQueueMessagesWaiting>
 8001298:	4603      	mov	r3, r0
 800129a:	429c      	cmp	r4, r3
 800129c:	d208      	bcs.n	80012b0 <bank_thread+0xdc>
			metrics.max_queue_depth = uxQueueMessagesWaiting(bank.customers);
 800129e:	4b28      	ldr	r3, [pc, #160]	; (8001340 <bank_thread+0x16c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f009 ff20 	bl	800b0e8 <uxQueueMessagesWaiting>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <bank_thread+0x174>)
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
		}
		xSemaphoreGive(metric_mutex);
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <bank_thread+0x170>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	f009 fb0f 	bl	800a8dc <xQueueGenericSend>
		customers_entered++;
 80012be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012c0:	3301      	adds	r3, #1
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		print_metrics();
 80012c4:	f7ff fd9c 	bl	8000e00 <print_metrics>
	while(bank.is_open == 1){
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <bank_thread+0x16c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d09c      	beq.n	800120a <bank_thread+0x36>
	}
	xSemaphoreTake(metric_mutex, 10000);
 80012d0:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <bank_thread+0x170>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f242 7110 	movw	r1, #10000	; 0x2710
 80012d8:	4618      	mov	r0, r3
 80012da:	f009 fd79 	bl	800add0 <xQueueSemaphoreTake>
	metrics.customers_served = customers_entered;
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <bank_thread+0x174>)
 80012e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e2:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(metric_mutex);
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <bank_thread+0x170>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	f009 faf5 	bl	800a8dc <xQueueGenericSend>
	int customers_left_in_queue = uxQueueMessagesWaiting(bank.customers);
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <bank_thread+0x16c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f009 fef6 	bl	800b0e8 <uxQueueMessagesWaiting>
 80012fc:	4603      	mov	r3, r0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
	while(1){
		int current_customers = (int)uxQueueMessagesWaiting(bank.customers);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <bank_thread+0x16c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	f009 feef 	bl	800b0e8 <uxQueueMessagesWaiting>
 800130a:	4603      	mov	r3, r0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(current_customers < customers_left_in_queue - 3){
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	3b03      	subs	r3, #3
 8001312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001314:	429a      	cmp	r2, r3
 8001316:	da03      	bge.n	8001320 <bank_thread+0x14c>
			print_metrics();
 8001318:	f7ff fd72 	bl	8000e00 <print_metrics>
			customers_left_in_queue = current_customers;
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
		}
		bool teller_busy[3] = {true, true, true};
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <bank_thread+0x178>)
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	8019      	strh	r1, [r3, #0]
 800132c:	3302      	adds	r3, #2
 800132e:	0c12      	lsrs	r2, r2, #16
 8001330:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<NUM_TELLERS; j++){
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
 8001336:	e01f      	b.n	8001378 <bank_thread+0x1a4>
 8001338:	0800d54c 	.word	0x0800d54c
 800133c:	20002a34 	.word	0x20002a34
 8001340:	200029dc 	.word	0x200029dc
 8001344:	200029d4 	.word	0x200029d4
 8001348:	20002938 	.word	0x20002938
 800134c:	0800d6f0 	.word	0x0800d6f0
			if(bank.tellers[j].teller_status != BUSY){
 8001350:	4990      	ldr	r1, [pc, #576]	; (8001594 <bank_thread+0x3c0>)
 8001352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3310      	adds	r3, #16
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d005      	beq.n	8001372 <bank_thread+0x19e>
				teller_busy[j] = false;
 8001366:	f107 0208 	add.w	r2, r7, #8
 800136a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<NUM_TELLERS; j++){
 8001372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001374:	3301      	adds	r3, #1
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	2b02      	cmp	r3, #2
 800137c:	dde8      	ble.n	8001350 <bank_thread+0x17c>
			}
		}
		if(customers_left_in_queue <= 0 && !teller_busy[0]&& !teller_busy[1]&& !teller_busy[2] ){
 800137e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001380:	2b00      	cmp	r3, #0
 8001382:	dcbd      	bgt.n	8001300 <bank_thread+0x12c>
 8001384:	7a3b      	ldrb	r3, [r7, #8]
 8001386:	f083 0301 	eor.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0b7      	beq.n	8001300 <bank_thread+0x12c>
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0b1      	beq.n	8001300 <bank_thread+0x12c>
 800139c:	7abb      	ldrb	r3, [r7, #10]
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0ab      	beq.n	8001300 <bank_thread+0x12c>
			break;
		}
	}
	xSemaphoreTake(metric_mutex, 10000000);
 80013a8:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <bank_thread+0x3c4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	497b      	ldr	r1, [pc, #492]	; (800159c <bank_thread+0x3c8>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f009 fd0e 	bl	800add0 <xQueueSemaphoreTake>
	metrics.avg_customer_waiting_time = (metrics.total_customer_queue_time/(float)metrics.customers_served)/100.0;
 80013b4:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <bank_thread+0x3cc>)
 80013b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c2:	4b77      	ldr	r3, [pc, #476]	; (80015a0 <bank_thread+0x3cc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d2:	ee16 0a90 	vmov	r0, s13
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <bank_thread+0x3d0>)
 80013e0:	f7ff fa34 	bl	800084c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	496d      	ldr	r1, [pc, #436]	; (80015a0 <bank_thread+0x3cc>)
 80013ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
	metrics.avg_teller_time = (metrics.total_customer_teller_time/(float)metrics.customers_served)/100.0;
 80013ee:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <bank_thread+0x3cc>)
 80013f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <bank_thread+0x3cc>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800140c:	ee16 0a90 	vmov	r0, s13
 8001410:	f7ff f89a 	bl	8000548 <__aeabi_f2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <bank_thread+0x3d0>)
 800141a:	f7ff fa17 	bl	800084c <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	495f      	ldr	r1, [pc, #380]	; (80015a0 <bank_thread+0x3cc>)
 8001424:	e9c1 2306 	strd	r2, r3, [r1, #24]
	metrics.avg_teller_waiting_time = (metrics.total_teller_wait_time/(float)metrics.customers_served)/100.0;
 8001428:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <bank_thread+0x3cc>)
 800142a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <bank_thread+0x3cc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001446:	ee16 0a90 	vmov	r0, s13
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <bank_thread+0x3d0>)
 8001454:	f7ff f9fa 	bl	800084c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4950      	ldr	r1, [pc, #320]	; (80015a0 <bank_thread+0x3cc>)
 800145e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	xSemaphoreGive(metric_mutex);
 8001462:	4b4d      	ldr	r3, [pc, #308]	; (8001598 <bank_thread+0x3c4>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	f009 fa36 	bl	800a8dc <xQueueGenericSend>
	print_line("Total metrics:");
 8001470:	484d      	ldr	r0, [pc, #308]	; (80015a8 <bank_thread+0x3d4>)
 8001472:	f7ff fc9f 	bl	8000db4 <print_line>
	int_format_print("Total Customers Served: %d\r\n", metrics.customers_served);
 8001476:	4b4a      	ldr	r3, [pc, #296]	; (80015a0 <bank_thread+0x3cc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	484b      	ldr	r0, [pc, #300]	; (80015ac <bank_thread+0x3d8>)
 800147e:	f7ff fd3f 	bl	8000f00 <int_format_print>
	int_format_print("Teller 1 Served %d Customers\r\n", metrics.customers_served_per_teller[0]);
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <bank_thread+0x3cc>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4619      	mov	r1, r3
 8001488:	4849      	ldr	r0, [pc, #292]	; (80015b0 <bank_thread+0x3dc>)
 800148a:	f7ff fd39 	bl	8000f00 <int_format_print>
	int_format_print("Teller 2 Served %d Customers\r\n", metrics.customers_served_per_teller[1]);
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <bank_thread+0x3cc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4619      	mov	r1, r3
 8001494:	4847      	ldr	r0, [pc, #284]	; (80015b4 <bank_thread+0x3e0>)
 8001496:	f7ff fd33 	bl	8000f00 <int_format_print>
	int_format_print("Teller 3 Served %d Customers\r\n", metrics.customers_served_per_teller[2]);
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <bank_thread+0x3cc>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	4619      	mov	r1, r3
 80014a0:	4845      	ldr	r0, [pc, #276]	; (80015b8 <bank_thread+0x3e4>)
 80014a2:	f7ff fd2d 	bl	8000f00 <int_format_print>
	float_format_print("Average Customer Waiting Time: %f\r\n", metrics.avg_customer_waiting_time);
 80014a6:	4b3e      	ldr	r3, [pc, #248]	; (80015a0 <bank_thread+0x3cc>)
 80014a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fab4 	bl	8000a1c <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee00 3a10 	vmov	s0, r3
 80014ba:	4840      	ldr	r0, [pc, #256]	; (80015bc <bank_thread+0x3e8>)
 80014bc:	f7ff fd76 	bl	8000fac <float_format_print>
	float_format_print("Average Time Tellers Spent Helping Customers: %f\r\n", metrics.avg_teller_time);
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <bank_thread+0x3cc>)
 80014c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff faa7 	bl	8000a1c <__aeabi_d2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	ee00 3a10 	vmov	s0, r3
 80014d4:	483a      	ldr	r0, [pc, #232]	; (80015c0 <bank_thread+0x3ec>)
 80014d6:	f7ff fd69 	bl	8000fac <float_format_print>
	float_format_print("Average Time Tellers Spent Waiting: %f\r\n", metrics.avg_teller_waiting_time);
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <bank_thread+0x3cc>)
 80014dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fa9a 	bl	8000a1c <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	ee00 3a10 	vmov	s0, r3
 80014ee:	4835      	ldr	r0, [pc, #212]	; (80015c4 <bank_thread+0x3f0>)
 80014f0:	f7ff fd5c 	bl	8000fac <float_format_print>
	float_format_print("Max Customer Wait Time: %f\r\n", metrics.max_customer_wait_time/100.0);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <bank_thread+0x3cc>)
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f803 	bl	8000504 <__aeabi_ui2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <bank_thread+0x3d0>)
 8001504:	f7ff f9a2 	bl	800084c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fa84 	bl	8000a1c <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	ee00 3a10 	vmov	s0, r3
 800151a:	482b      	ldr	r0, [pc, #172]	; (80015c8 <bank_thread+0x3f4>)
 800151c:	f7ff fd46 	bl	8000fac <float_format_print>
	float_format_print("Max Time Tellers Were Waiting: %f\r\n", metrics.max_teller_wait_time/100.0);
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <bank_thread+0x3cc>)
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffed 	bl	8000504 <__aeabi_ui2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <bank_thread+0x3d0>)
 8001530:	f7ff f98c 	bl	800084c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fa6e 	bl	8000a1c <__aeabi_d2f>
 8001540:	4603      	mov	r3, r0
 8001542:	ee00 3a10 	vmov	s0, r3
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <bank_thread+0x3f8>)
 8001548:	f7ff fd30 	bl	8000fac <float_format_print>
	float_format_print("Max Transaction Time: %f\r\n", metrics.max_transaction_time/100.0);
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <bank_thread+0x3cc>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffd7 	bl	8000504 <__aeabi_ui2d>
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <bank_thread+0x3d0>)
 800155c:	f7ff f976 	bl	800084c <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fa58 	bl	8000a1c <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	ee00 3a10 	vmov	s0, r3
 8001572:	4817      	ldr	r0, [pc, #92]	; (80015d0 <bank_thread+0x3fc>)
 8001574:	f7ff fd1a 	bl	8000fac <float_format_print>
	int_format_print("Max Queue Depth: %d\r\n", metrics.max_queue_depth);
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <bank_thread+0x3cc>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	4619      	mov	r1, r3
 800157e:	4815      	ldr	r0, [pc, #84]	; (80015d4 <bank_thread+0x400>)
 8001580:	f7ff fcbe 	bl	8000f00 <int_format_print>
	xSemaphoreGive(metric_mutex);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <bank_thread+0x3c4>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	f009 f9a5 	bl	800a8dc <xQueueGenericSend>
	while(1){}
 8001592:	e7fe      	b.n	8001592 <bank_thread+0x3be>
 8001594:	200029dc 	.word	0x200029dc
 8001598:	200029d4 	.word	0x200029d4
 800159c:	00989680 	.word	0x00989680
 80015a0:	20002938 	.word	0x20002938
 80015a4:	40590000 	.word	0x40590000
 80015a8:	0800d564 	.word	0x0800d564
 80015ac:	0800d574 	.word	0x0800d574
 80015b0:	0800d594 	.word	0x0800d594
 80015b4:	0800d5b4 	.word	0x0800d5b4
 80015b8:	0800d5d4 	.word	0x0800d5d4
 80015bc:	0800d5f4 	.word	0x0800d5f4
 80015c0:	0800d618 	.word	0x0800d618
 80015c4:	0800d64c 	.word	0x0800d64c
 80015c8:	0800d678 	.word	0x0800d678
 80015cc:	0800d698 	.word	0x0800d698
 80015d0:	0800d6bc 	.word	0x0800d6bc
 80015d4:	0800d6d8 	.word	0x0800d6d8

080015d8 <thread_init>:
}

void thread_init(void){
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b0a9      	sub	sp, #164	; 0xa4
 80015dc:	af02      	add	r7, sp, #8
	HAL_mutex = xSemaphoreCreateMutex();
 80015de:	2001      	movs	r0, #1
 80015e0:	f009 f963 	bl	800a8aa <xQueueCreateMutex>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <thread_init+0xa0>)
 80015e8:	6013      	str	r3, [r2, #0]
	metric_mutex = xSemaphoreCreateMutex();
 80015ea:	2001      	movs	r0, #1
 80015ec:	f009 f95d 	bl	800a8aa <xQueueCreateMutex>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4a22      	ldr	r2, [pc, #136]	; (800167c <thread_init+0xa4>)
 80015f4:	6013      	str	r3, [r2, #0]
	print_line( "Starting threads...\r\n");
 80015f6:	4822      	ldr	r0, [pc, #136]	; (8001680 <thread_init+0xa8>)
 80015f8:	f7ff fbdc 	bl	8000db4 <print_line>
	bank_init();
 80015fc:	f7ff fd6e 	bl	80010dc <bank_init>
	metrics = metric_init();
 8001600:	4c20      	ldr	r4, [pc, #128]	; (8001684 <thread_init+0xac>)
 8001602:	463b      	mov	r3, r7
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fd99 	bl	800113c <metric_init>
 800160a:	4620      	mov	r0, r4
 800160c:	463b      	mov	r3, r7
 800160e:	2290      	movs	r2, #144	; 0x90
 8001610:	4619      	mov	r1, r3
 8001612:	f00b faf7 	bl	800cc04 <memcpy>
	xTaskCreate(bank_thread, "bank_thread", 128, 0, osPriorityNormal, 0);
 8001616:	2300      	movs	r3, #0
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	2300      	movs	r3, #0
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	4919      	ldr	r1, [pc, #100]	; (8001688 <thread_init+0xb0>)
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <thread_init+0xb4>)
 8001626:	f009 fea5 	bl	800b374 <xTaskCreate>
	for(int i = 0; i < NUM_TELLERS; i++){
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001630:	e019      	b.n	8001666 <thread_init+0x8e>
		id[i] = i;
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <thread_init+0xb8>)
 8001634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001638:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		xTaskCreate(teller_thread, "teller_thread", 128, (void*) &id[i], osPriorityNormal, 0);
 8001640:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <thread_init+0xb8>)
 8001648:	4413      	add	r3, r2
 800164a:	2200      	movs	r2, #0
 800164c:	9201      	str	r2, [sp, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	9200      	str	r2, [sp, #0]
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	490f      	ldr	r1, [pc, #60]	; (8001694 <thread_init+0xbc>)
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <thread_init+0xc0>)
 8001658:	f009 fe8c 	bl	800b374 <xTaskCreate>
	for(int i = 0; i < NUM_TELLERS; i++){
 800165c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001666:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800166a:	2b02      	cmp	r3, #2
 800166c:	dde1      	ble.n	8001632 <thread_init+0x5a>
	}
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	379c      	adds	r7, #156	; 0x9c
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	200029d8 	.word	0x200029d8
 800167c:	200029d4 	.word	0x200029d4
 8001680:	0800d6f4 	.word	0x0800d6f4
 8001684:	20002938 	.word	0x20002938
 8001688:	0800d70c 	.word	0x0800d70c
 800168c:	080011d5 	.word	0x080011d5
 8001690:	200029c8 	.word	0x200029c8
 8001694:	0800d718 	.word	0x0800d718
 8001698:	0800169d 	.word	0x0800169d

0800169c <teller_thread>:


void teller_thread(void* argument){
 800169c:	b580      	push	{r7, lr}
 800169e:	b092      	sub	sp, #72	; 0x48
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	int i = *(int*) argument;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
	TickType_t last_thread_wake = xTaskGetTickCount();
 80016aa:	f00a f939 	bl	800b920 <xTaskGetTickCount>
 80016ae:	6478      	str	r0, [r7, #68]	; 0x44
	float break_interval = get_random(3000)+3000;
 80016b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b4:	f000 f968 	bl	8001988 <get_random>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float break_len = get_random(300) + 100;
 80016ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ce:	f000 f95b 	bl	8001988 <get_random>
 80016d2:	4603      	mov	r3, r0
 80016d4:	3364      	adds	r3, #100	; 0x64
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float break_time_at = last_thread_wake + break_interval;
 80016e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(;;){
		bank.tellers[i].teller_status = IDLE;
 80016f8:	49a0      	ldr	r1, [pc, #640]	; (800197c <teller_thread+0x2e0>)
 80016fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3310      	adds	r3, #16
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
		struct Customer_t customer;
		customer.time_entered_queue = xTaskGetTickCount();
 800170c:	f00a f908 	bl	800b920 <xTaskGetTickCount>
 8001710:	4603      	mov	r3, r0
 8001712:	613b      	str	r3, [r7, #16]
		BaseType_t rec = pdTRUE;
 8001714:	2301      	movs	r3, #1
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
		for(;;){
			rec = xQueueReceive(bank.customers, &customer, break_time_at - last_thread_wake);
 8001718:	4b98      	ldr	r3, [pc, #608]	; (800197c <teller_thread+0x2e0>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800171e:	ee07 2a90 	vmov	s15, r2
 8001722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001726:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800172a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001732:	f107 010c 	add.w	r1, r7, #12
 8001736:	ee17 2a90 	vmov	r2, s15
 800173a:	4618      	mov	r0, r3
 800173c:	f009 fa68 	bl	800ac10 <xQueueReceive>
 8001740:	6338      	str	r0, [r7, #48]	; 0x30
			if(rec != pdTRUE){
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	2b01      	cmp	r3, #1
 8001746:	d06a      	beq.n	800181e <teller_thread+0x182>
				bank.tellers[i].teller_status = BREAK;
 8001748:	498c      	ldr	r1, [pc, #560]	; (800197c <teller_thread+0x2e0>)
 800174a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	3310      	adds	r3, #16
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
				xSemaphoreTake(metric_mutex, 10000);
 800175c:	4b88      	ldr	r3, [pc, #544]	; (8001980 <teller_thread+0x2e4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f242 7110 	movw	r1, #10000	; 0x2710
 8001764:	4618      	mov	r0, r3
 8001766:	f009 fb33 	bl	800add0 <xQueueSemaphoreTake>
				metrics.total_num_breaks[i]++;
 800176a:	4a86      	ldr	r2, [pc, #536]	; (8001984 <teller_thread+0x2e8>)
 800176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176e:	330e      	adds	r3, #14
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4983      	ldr	r1, [pc, #524]	; (8001984 <teller_thread+0x2e8>)
 8001778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800177a:	330e      	adds	r3, #14
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				xSemaphoreGive(metric_mutex);
 8001780:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <teller_thread+0x2e4>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	f009 f8a7 	bl	800a8dc <xQueueGenericSend>
				osDelay(break_len);
 800178e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f008 fe15 	bl	800a3c8 <osDelay>
				last_thread_wake = xTaskGetTickCount();
 800179e:	f00a f8bf 	bl	800b920 <xTaskGetTickCount>
 80017a2:	6478      	str	r0, [r7, #68]	; 0x44
				bank.tellers[i].teller_status = IDLE;
 80017a4:	4975      	ldr	r1, [pc, #468]	; (800197c <teller_thread+0x2e0>)
 80017a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	3310      	adds	r3, #16
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
				xSemaphoreTake(metric_mutex, 10000);
 80017b8:	4b71      	ldr	r3, [pc, #452]	; (8001980 <teller_thread+0x2e4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80017c0:	4618      	mov	r0, r3
 80017c2:	f009 fb05 	bl	800add0 <xQueueSemaphoreTake>
				xSemaphoreGive(metric_mutex);
 80017c6:	4b6e      	ldr	r3, [pc, #440]	; (8001980 <teller_thread+0x2e4>)
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	f009 f884 	bl	800a8dc <xQueueGenericSend>
				break_interval = get_random(3000)+3000;
 80017d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017d8:	f000 f8d6 	bl	8001988 <get_random>
 80017dc:	4603      	mov	r3, r0
 80017de:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				break_len = get_random(300)+100;
 80017ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017f2:	f000 f8c9 	bl	8001988 <get_random>
 80017f6:	4603      	mov	r3, r0
 80017f8:	3364      	adds	r3, #100	; 0x64
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001802:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				break_time_at = last_thread_wake + break_interval;
 8001806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001810:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			rec = xQueueReceive(bank.customers, &customer, break_time_at - last_thread_wake);
 800181c:	e77c      	b.n	8001718 <teller_thread+0x7c>
			}
			else{
				break;
 800181e:	bf00      	nop
			}
		}
		uint32_t teller_wait_time = xTaskGetTickCount() - last_thread_wake;
 8001820:	f00a f87e 	bl	800b920 <xTaskGetTickCount>
 8001824:	4602      	mov	r2, r0
 8001826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
		bank.tellers[i].num_customers += 1;
 800182c:	4953      	ldr	r1, [pc, #332]	; (800197c <teller_thread+0x2e0>)
 800182e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3314      	adds	r3, #20
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	484e      	ldr	r0, [pc, #312]	; (800197c <teller_thread+0x2e0>)
 8001842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4403      	add	r3, r0
 800184e:	3314      	adds	r3, #20
 8001850:	6019      	str	r1, [r3, #0]
		bank.tellers[i].teller_status = BUSY;
 8001852:	494a      	ldr	r1, [pc, #296]	; (800197c <teller_thread+0x2e0>)
 8001854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	440b      	add	r3, r1
 8001860:	3310      	adds	r3, #16
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
		uint32_t dequeue_time = xTaskGetTickCount();
 8001866:	f00a f85b 	bl	800b920 <xTaskGetTickCount>
 800186a:	62b8      	str	r0, [r7, #40]	; 0x28
		uint32_t customer_time_in_queue = dequeue_time - customer.time_entered_queue;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t transaction_time = get_random(450) + 30;
 8001874:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001878:	f000 f886 	bl	8001988 <get_random>
 800187c:	4603      	mov	r3, r0
 800187e:	331e      	adds	r3, #30
 8001880:	623b      	str	r3, [r7, #32]
		bank.tellers[i].total_transaction_time += transaction_time;
 8001882:	493e      	ldr	r1, [pc, #248]	; (800197c <teller_thread+0x2e0>)
 8001884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3320      	adds	r3, #32
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	4413      	add	r3, r2
 800189a:	4618      	mov	r0, r3
 800189c:	4937      	ldr	r1, [pc, #220]	; (800197c <teller_thread+0x2e0>)
 800189e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3320      	adds	r3, #32
 80018ac:	6018      	str	r0, [r3, #0]
		osDelay(transaction_time);
 80018ae:	6a38      	ldr	r0, [r7, #32]
 80018b0:	f008 fd8a 	bl	800a3c8 <osDelay>
		last_thread_wake = xTaskGetTickCount();
 80018b4:	f00a f834 	bl	800b920 <xTaskGetTickCount>
 80018b8:	6478      	str	r0, [r7, #68]	; 0x44
		xSemaphoreTake(metric_mutex, 10000);
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <teller_thread+0x2e4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f242 7110 	movw	r1, #10000	; 0x2710
 80018c2:	4618      	mov	r0, r3
 80018c4:	f009 fa84 	bl	800add0 <xQueueSemaphoreTake>
		metrics.total_customer_queue_time += customer_time_in_queue;
 80018c8:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <teller_thread+0x2e8>)
 80018ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	4413      	add	r3, r2
 80018d2:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <teller_thread+0x2e8>)
 80018d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		if(customer_time_in_queue > metrics.max_customer_wait_time){
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <teller_thread+0x2e8>)
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	429a      	cmp	r2, r3
 80018e0:	d902      	bls.n	80018e8 <teller_thread+0x24c>
			metrics.max_customer_wait_time = customer_time_in_queue;
 80018e2:	4a28      	ldr	r2, [pc, #160]	; (8001984 <teller_thread+0x2e8>)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	6293      	str	r3, [r2, #40]	; 0x28
		}
		metrics.total_customer_teller_time += transaction_time;
 80018e8:	4b26      	ldr	r3, [pc, #152]	; (8001984 <teller_thread+0x2e8>)
 80018ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <teller_thread+0x2e8>)
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		if(transaction_time > metrics.max_transaction_time){
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <teller_thread+0x2e8>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d902      	bls.n	8001908 <teller_thread+0x26c>
			metrics.max_transaction_time = transaction_time;
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <teller_thread+0x2e8>)
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
		}
		metrics.customers_served_per_teller[i]++;
 8001908:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <teller_thread+0x2e8>)
 800190a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	491b      	ldr	r1, [pc, #108]	; (8001984 <teller_thread+0x2e8>)
 8001916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	605a      	str	r2, [r3, #4]
		metrics.total_teller_wait_time = teller_wait_time;
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <teller_thread+0x2e8>)
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		if(teller_wait_time > metrics.max_teller_wait_time){
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <teller_thread+0x2e8>)
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192c:	429a      	cmp	r2, r3
 800192e:	d902      	bls.n	8001936 <teller_thread+0x29a>
			metrics.max_teller_wait_time = teller_wait_time;
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <teller_thread+0x2e8>)
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		xSemaphoreGive(metric_mutex);
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <teller_thread+0x2e4>)
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	f008 ffcc 	bl	800a8dc <xQueueGenericSend>
		if(get_current_time() >= 42000 && uxQueueMessagesWaiting(bank.customers) == 0){
 8001944:	f7ff fb9e 	bl	8001084 <get_current_time>
 8001948:	4603      	mov	r3, r0
 800194a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800194e:	4293      	cmp	r3, r2
 8001950:	f77f aed2 	ble.w	80016f8 <teller_thread+0x5c>
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <teller_thread+0x2e0>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	f009 fbc5 	bl	800b0e8 <uxQueueMessagesWaiting>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f aec9 	bne.w	80016f8 <teller_thread+0x5c>
			bank.tellers[i].teller_status = IDLE;
 8001966:	4905      	ldr	r1, [pc, #20]	; (800197c <teller_thread+0x2e0>)
 8001968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	3310      	adds	r3, #16
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
			break;
		}
	}
	while(1){}
 800197a:	e7fe      	b.n	800197a <teller_thread+0x2de>
 800197c:	200029dc 	.word	0x200029dc
 8001980:	200029d4 	.word	0x200029d4
 8001984:	20002938 	.word	0x20002938

08001988 <get_random>:
}

int get_random(int max){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	uint32_t random_number;
	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <get_random+0x30>)
 8001998:	f004 fd48 	bl	800642c <HAL_RNG_GenerateRandomNumber>
	random_number = random_number%max;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a4:	fb02 f201 	mul.w	r2, r2, r1
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

	return (int)random_number;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20002b08 	.word	0x20002b08

080019bc <teller_status_to_string>:

char* teller_status_to_string(enum status teller_status){
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
	if(teller_status == IDLE){
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <teller_status_to_string+0x14>
		return "Idle";
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <teller_status_to_string+0x38>)
 80019ce:	e00a      	b.n	80019e6 <teller_status_to_string+0x2a>
	}
	else if(teller_status == BUSY){
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <teller_status_to_string+0x1e>
		return "Busy";
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <teller_status_to_string+0x3c>)
 80019d8:	e005      	b.n	80019e6 <teller_status_to_string+0x2a>
	}
	else if(teller_status == BREAK){
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d101      	bne.n	80019e4 <teller_status_to_string+0x28>
		return "Break";
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <teller_status_to_string+0x40>)
 80019e2:	e000      	b.n	80019e6 <teller_status_to_string+0x2a>
	}
	else{
		return "Unknown";
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <teller_status_to_string+0x44>)
	}
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	0800d728 	.word	0x0800d728
 80019f8:	0800d730 	.word	0x0800d730
 80019fc:	0800d738 	.word	0x0800d738
 8001a00:	0800d740 	.word	0x0800d740

08001a04 <MX_FREERTOS_Init>:

/* Hook prototypes */

/* Init FreeRTOS */

void MX_FREERTOS_Init(void) {
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <MX_FREERTOS_Init+0x2c>)
 8001a0c:	1d3c      	adds	r4, r7, #4
 8001a0e:	461d      	mov	r5, r3
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f008 fcac 	bl	800a37a <osThreadCreate>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <MX_FREERTOS_Init+0x30>)
 8001a26:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a30:	0800d754 	.word	0x0800d754
 8001a34:	20002a38 	.word	0x20002a38

08001a38 <StartDefaultTask>:

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a40:	f000 fc8c 	bl	800235c <MX_USB_HOST_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f008 fcbf 	bl	800a3c8 <osDelay>
 8001a4a:	e7fb      	b.n	8001a44 <StartDefaultTask+0xc>

08001a4c <MX_GPIO_Init>:
     PE6   ------> SAI1_SD_A
     PE7   ------> SAI1_SD_B
     PE9   ------> SAI1_FS_B
*/
void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	4ba2      	ldr	r3, [pc, #648]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4aa1      	ldr	r2, [pc, #644]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b9f      	ldr	r3, [pc, #636]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	4b9c      	ldr	r3, [pc, #624]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a9b      	ldr	r2, [pc, #620]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a95      	ldr	r2, [pc, #596]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b93      	ldr	r3, [pc, #588]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b90      	ldr	r3, [pc, #576]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a8f      	ldr	r2, [pc, #572]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a89      	ldr	r2, [pc, #548]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a83      	ldr	r2, [pc, #524]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b81      	ldr	r3, [pc, #516]	; (8001cdc <MX_GPIO_Init+0x290>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f240 1109 	movw	r1, #265	; 0x109
 8001ae8:	487d      	ldr	r0, [pc, #500]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001aea:	f001 fac7 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	210c      	movs	r1, #12
 8001af2:	487c      	ldr	r0, [pc, #496]	; (8001ce4 <MX_GPIO_Init+0x298>)
 8001af4:	f001 fac2 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afe:	487a      	ldr	r0, [pc, #488]	; (8001ce8 <MX_GPIO_Init+0x29c>)
 8001b00:	f001 fabc 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b0a:	4877      	ldr	r0, [pc, #476]	; (8001ce8 <MX_GPIO_Init+0x29c>)
 8001b0c:	f001 fab6 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	4875      	ldr	r0, [pc, #468]	; (8001cec <MX_GPIO_Init+0x2a0>)
 8001b16:	f001 fab1 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8001b1a:	23f4      	movs	r3, #244	; 0xf4
 8001b1c:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b2a:	230d      	movs	r3, #13
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	486a      	ldr	r0, [pc, #424]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001b36:	f001 f8f7 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	2302      	movs	r3, #2
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4863      	ldr	r0, [pc, #396]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001b52:	f001 f8e9 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8001b56:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b5c:	4b64      	ldr	r3, [pc, #400]	; (8001cf0 <MX_GPIO_Init+0x2a4>)
 8001b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	485f      	ldr	r0, [pc, #380]	; (8001ce8 <MX_GPIO_Init+0x29c>)
 8001b6c:	f001 f8dc 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8001b70:	2307      	movs	r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <MX_GPIO_Init+0x29c>)
 8001b84:	f001 f8d0 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 8001b88:	232f      	movs	r3, #47	; 0x2f
 8001b8a:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b90:	2302      	movs	r3, #2
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f001 f8c3 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ba6:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <MX_GPIO_Init+0x2a4>)
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb8:	f001 f8b6 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4844      	ldr	r0, [pc, #272]	; (8001ce4 <MX_GPIO_Init+0x298>)
 8001bd4:	f001 f8a8 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	483b      	ldr	r0, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001bf2:	f001 f899 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c08:	230d      	movs	r3, #13
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	4833      	ldr	r0, [pc, #204]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001c14:	f001 f888 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001c18:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482d      	ldr	r0, [pc, #180]	; (8001ce8 <MX_GPIO_Init+0x29c>)
 8001c32:	f001 f879 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8001c36:	2305      	movs	r3, #5
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_GPIO_Init+0x2a4>)
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4828      	ldr	r0, [pc, #160]	; (8001cec <MX_GPIO_Init+0x2a0>)
 8001c4a:	f001 f86d 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4821      	ldr	r0, [pc, #132]	; (8001cec <MX_GPIO_Init+0x2a0>)
 8001c66:	f001 f85f 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 031c 	add.w	r3, r7, #28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <MX_GPIO_Init+0x298>)
 8001c82:	f001 f851 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_GPIO_Init+0x2a4>)
 8001c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <MX_GPIO_Init+0x298>)
 8001c9c:	f001 f844 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001cb8:	f001 f836 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_GPIO_Init+0x2a4>)
 8001cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_GPIO_Init+0x294>)
 8001cd0:	f001 f82a 	bl	8002d28 <HAL_GPIO_Init>

}
 8001cd4:	bf00      	nop
 8001cd6:	3730      	adds	r7, #48	; 0x30
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48001000 	.word	0x48001000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	48000c00 	.word	0x48000c00
 8001cf0:	10120000 	.word	0x10120000

08001cf4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <MX_I2C1_Init+0x84>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <MX_I2C1_Init+0x88>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d2e:	4811      	ldr	r0, [pc, #68]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d30:	f002 fea7 	bl	8004a82 <HAL_I2C_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <MX_I2C1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d3a:	214d      	movs	r1, #77	; 0x4d
 8001d3c:	4810      	ldr	r0, [pc, #64]	; (8001d80 <MX_I2C1_Init+0x8c>)
 8001d3e:	f000 f95f 	bl	8002000 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d42:	2100      	movs	r1, #0
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d46:	f002 ff2b 	bl	8004ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <MX_I2C1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d50:	2154      	movs	r1, #84	; 0x54
 8001d52:	480b      	ldr	r0, [pc, #44]	; (8001d80 <MX_I2C1_Init+0x8c>)
 8001d54:	f000 f954 	bl	8002000 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <MX_I2C1_Init+0x80>)
 8001d5c:	f002 ff6b 	bl	8004c36 <HAL_I2CEx_ConfigDigitalFilter>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <MX_I2C1_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d66:	215b      	movs	r1, #91	; 0x5b
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_I2C1_Init+0x8c>)
 8001d6a:	f000 f949 	bl	8002000 <_Error_Handler>
  }

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20002a3c 	.word	0x20002a3c
 8001d78:	40005400 	.word	0x40005400
 8001d7c:	00404c74 	.word	0x00404c74
 8001d80:	0800d768 	.word	0x0800d768

08001d84 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <HAL_I2C_MspInit+0x98>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11c      	bne.n	8001dd0 <HAL_I2C_MspInit+0x4c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9a:	2312      	movs	r3, #18
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da6:	2304      	movs	r3, #4
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	481b      	ldr	r0, [pc, #108]	; (8001e20 <HAL_I2C_MspInit+0x9c>)
 8001db2:	f000 ffb9 	bl	8002d28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001dce:	e021      	b.n	8001e14 <HAL_I2C_MspInit+0x90>
  else if(i2cHandle->Instance==I2C2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <HAL_I2C_MspInit+0xa4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11c      	bne.n	8001e14 <HAL_I2C_MspInit+0x90>
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8001dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dec:	2304      	movs	r3, #4
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	480a      	ldr	r0, [pc, #40]	; (8001e20 <HAL_I2C_MspInit+0x9c>)
 8001df8:	f000 ff96 	bl	8002d28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e06:	6593      	str	r3, [r2, #88]	; 0x58
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_I2C_MspInit+0xa0>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	48000400 	.word	0x48000400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40005800 	.word	0x40005800

08001e2c <vApplicationIdleHook>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
unsigned long idle_timer = 0;

void vApplicationIdleHook( void ) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
	idle_timer++;
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <vApplicationIdleHook+0x18>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <vApplicationIdleHook+0x18>)
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	200000b4 	.word	0x200000b4

08001e48 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e4c:	f000 fdda 	bl	8002a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e50:	f000 f812 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e54:	f7ff fdfa 	bl	8001a4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e58:	f7ff ff4c 	bl	8001cf4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001e5c:	f000 fa1a 	bl	8002294 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001e60:	f000 f8ec 	bl	800203c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  thread_init();
 8001e64:	f7ff fbb8 	bl	80015d8 <thread_init>
  /* USER CODE END 2 */

  MX_FREERTOS_Init();
 8001e68:	f7ff fdcc 	bl	8001a04 <MX_FREERTOS_Init>
  HAL_Delay(100);
 8001e6c:	2064      	movs	r0, #100	; 0x64
 8001e6e:	f000 fe09 	bl	8002a84 <HAL_Delay>
	
  /* Start scheduler */
  osKernelStart();
 8001e72:	f008 fa7b 	bl	800a36c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <main+0x2e>

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b8      	sub	sp, #224	; 0xe0
 8001e7c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e7e:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <SystemClock_Config+0x154>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <SystemClock_Config+0x154>)
 8001e86:	f023 0318 	bic.w	r3, r3, #24
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001e8e:	231c      	movs	r3, #28
 8001e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001eac:	2360      	movs	r3, #96	; 0x60
 8001eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001ec4:	2314      	movs	r3, #20
 8001ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001eca:	2307      	movs	r3, #7
 8001ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001edc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 ff69 	bl	8004db8 <HAL_RCC_OscConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <SystemClock_Config+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001eec:	21b4      	movs	r1, #180	; 0xb4
 8001eee:	4838      	ldr	r0, [pc, #224]	; (8001fd0 <SystemClock_Config+0x158>)
 8001ef0:	f000 f886 	bl	8002000 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f16:	2101      	movs	r1, #1
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fb33 	bl	8005584 <HAL_RCC_ClockConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f24:	21c2      	movs	r1, #194	; 0xc2
 8001f26:	482a      	ldr	r0, [pc, #168]	; (8001fd0 <SystemClock_Config+0x158>)
 8001f28:	f000 f86a 	bl	8002000 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <SystemClock_Config+0x15c>)
 8001f2e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f4e:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f50:	2301      	movs	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f58:	2318      	movs	r3, #24
 8001f5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f6c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fd3f 	bl	80059f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <SystemClock_Config+0x10c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f7c:	21d7      	movs	r1, #215	; 0xd7
 8001f7e:	4814      	ldr	r0, [pc, #80]	; (8001fd0 <SystemClock_Config+0x158>)
 8001f80:	f000 f83e 	bl	8002000 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f88:	f002 feb0 	bl	8004cec <HAL_PWREx_ControlVoltageScaling>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <SystemClock_Config+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001f92:	21de      	movs	r1, #222	; 0xde
 8001f94:	480e      	ldr	r0, [pc, #56]	; (8001fd0 <SystemClock_Config+0x158>)
 8001f96:	f000 f833 	bl	8002000 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f9a:	f003 fc61 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <SystemClock_Config+0x160>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fe94 	bl	8002cd6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fae:	2004      	movs	r0, #4
 8001fb0:	f000 fe9e 	bl	8002cf0 <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 8001fb4:	f004 f808 	bl	8005fc8 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 fe5f 	bl	8002c82 <HAL_NVIC_SetPriority>
}
 8001fc4:	bf00      	nop
 8001fc6:	37e0      	adds	r7, #224	; 0xe0
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	0800d77c 	.word	0x0800d77c
 8001fd4:	000620c2 	.word	0x000620c2
 8001fd8:	10624dd3 	.word	0x10624dd3

08001fdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fee:	f000 fd29 	bl	8002a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40000c00 	.word	0x40000c00

08002000 <_Error_Handler>:
  * @param  line: The line in file as a number.
  * @retval None
  */
char err_msg[50];
void _Error_Handler(char *file, int line)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    sprintf(err_msg, "Error: %s@%d \r\n", file, line);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4907      	ldr	r1, [pc, #28]	; (800202c <_Error_Handler+0x2c>)
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <_Error_Handler+0x30>)
 8002012:	f00a fec7 	bl	800cda4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)err_msg, strlen(err_msg), 1000000);
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <_Error_Handler+0x30>)
 8002018:	f7fe f8da 	bl	80001d0 <strlen>
 800201c:	4603      	mov	r3, r0
 800201e:	b29a      	uxth	r2, r3
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <_Error_Handler+0x34>)
 8002022:	4903      	ldr	r1, [pc, #12]	; (8002030 <_Error_Handler+0x30>)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <_Error_Handler+0x38>)
 8002026:	f004 fd6f 	bl	8006b08 <HAL_UART_Transmit>
	while(1)
 800202a:	e7fe      	b.n	800202a <_Error_Handler+0x2a>
 800202c:	0800d790 	.word	0x0800d790
 8002030:	20002ad4 	.word	0x20002ad4
 8002034:	000f4240 	.word	0x000f4240
 8002038:	20002b64 	.word	0x20002b64

0800203c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_RNG_Init+0x24>)
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <MX_RNG_Init+0x28>)
 8002044:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_RNG_Init+0x24>)
 8002048:	f004 f9a0 	bl	800638c <HAL_RNG_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <MX_RNG_Init+0x1e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002052:	2142      	movs	r1, #66	; 0x42
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <MX_RNG_Init+0x2c>)
 8002056:	f7ff ffd3 	bl	8002000 <_Error_Handler>
  }

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20002b08 	.word	0x20002b08
 8002064:	50060800 	.word	0x50060800
 8002068:	0800d7a0 	.word	0x0800d7a0

0800206c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_RNG_MspInit+0x38>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10b      	bne.n	8002096 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RNG_MspInit+0x3c>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RNG_MspInit+0x3c>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_RNG_MspInit+0x3c>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	50060800 	.word	0x50060800
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_MspInit+0x98>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_MspInit+0x98>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6613      	str	r3, [r2, #96]	; 0x60
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_MspInit+0x98>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_MspInit+0x98>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_MspInit+0x98>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_MspInit+0x98>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e2:	2003      	movs	r0, #3
 80020e4:	f000 fdc2 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	f06f 000b 	mvn.w	r0, #11
 80020f0:	f000 fdc7 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	f06f 000a 	mvn.w	r0, #10
 80020fc:	f000 fdc1 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002100:	2200      	movs	r2, #0
 8002102:	2100      	movs	r1, #0
 8002104:	f06f 0009 	mvn.w	r0, #9
 8002108:	f000 fdbb 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	f06f 0004 	mvn.w	r0, #4
 8002114:	f000 fdb5 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	f06f 0003 	mvn.w	r0, #3
 8002120:	f000 fdaf 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	210f      	movs	r1, #15
 8002128:	f06f 0001 	mvn.w	r0, #1
 800212c:	f000 fda9 	bl	8002c82 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f000 fda3 	bl	8002c82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	2032      	movs	r0, #50	; 0x32
 800215e:	f000 fd90 	bl	8002c82 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8002162:	2032      	movs	r0, #50	; 0x32
 8002164:	f000 fda9 	bl	8002cba <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_InitTick+0x9c>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_InitTick+0x9c>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6593      	str	r3, [r2, #88]	; 0x58
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_InitTick+0x9c>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002180:	f107 0210 	add.w	r2, r7, #16
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fba0 	bl	80058d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002190:	f003 fb72 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8002194:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_InitTick+0xa0>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3b01      	subs	r3, #1
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_InitTick+0xa4>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_InitTick+0xa8>)
 80021a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_InitTick+0xa4>)
 80021ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_InitTick+0xa4>)
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_InitTick+0xa4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_InitTick+0xa4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80021c4:	4809      	ldr	r0, [pc, #36]	; (80021ec <HAL_InitTick+0xa4>)
 80021c6:	f004 f980 	bl	80064ca <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80021d0:	4806      	ldr	r0, [pc, #24]	; (80021ec <HAL_InitTick+0xa4>)
 80021d2:	f004 f9db 	bl	800658c <HAL_TIM_Base_Start_IT>
 80021d6:	4603      	mov	r3, r0
 80021d8:	e000      	b.n	80021dc <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3730      	adds	r7, #48	; 0x30
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	20002b18 	.word	0x20002b18
 80021f0:	40000c00 	.word	0x40000c00

080021f4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80021f8:	f008 f9c0 	bl	800a57c <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}

08002200 <TIM5_IRQHandler>:

/**
* @brief This function handles TIM5 global interrupt.
*/
void TIM5_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM5_IRQHandler+0x10>)
 8002206:	f004 fa31 	bl	800666c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20002b18 	.word	0x20002b18

08002214 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB OTG FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <OTG_FS_IRQHandler+0x10>)
 800221a:	f001 f9ad 	bl	8003578 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20002fcc 	.word	0x20002fcc

08002228 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <SystemInit+0x64>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <SystemInit+0x64>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <SystemInit+0x68>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <SystemInit+0x68>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <SystemInit+0x68>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <SystemInit+0x68>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <SystemInit+0x68>)
 8002254:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002258:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800225c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <SystemInit+0x68>)
 8002260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002264:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <SystemInit+0x68>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <SystemInit+0x68>)
 800226c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <SystemInit+0x68>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <SystemInit+0x64>)
 800227a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800227e:	609a      	str	r2, [r3, #8]
#endif
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed00 	.word	0xe000ed00
 8002290:	40021000 	.word	0x40021000

08002294 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 800229a:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <MX_USART2_UART_Init+0x60>)
 800229c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 80022d8:	f004 fbc8 	bl	8006a6c <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <MX_USART2_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80022e2:	214e      	movs	r1, #78	; 0x4e
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_USART2_UART_Init+0x64>)
 80022e6:	f7ff fe8b 	bl	8002000 <_Error_Handler>
  }

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20002b64 	.word	0x20002b64
 80022f4:	40004400 	.word	0x40004400
 80022f8:	0800d7b4 	.word	0x0800d7b4

080022fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_UART_MspInit+0x54>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11b      	bne.n	8002346 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <HAL_UART_MspInit+0x58>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_UART_MspInit+0x58>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b0e      	ldr	r3, [pc, #56]	; (8002354 <HAL_UART_MspInit+0x58>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002326:	2360      	movs	r3, #96	; 0x60
 8002328:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002336:	2307      	movs	r3, #7
 8002338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	4619      	mov	r1, r3
 8002340:	4805      	ldr	r0, [pc, #20]	; (8002358 <HAL_UART_MspInit+0x5c>)
 8002342:	f000 fcf1 	bl	8002d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002346:	bf00      	nop
 8002348:	3720      	adds	r7, #32
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40004400 	.word	0x40004400
 8002354:	40021000 	.word	0x40021000
 8002358:	48000c00 	.word	0x48000c00

0800235c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8002360:	2201      	movs	r2, #1
 8002362:	4906      	ldr	r1, [pc, #24]	; (800237c <MX_USB_HOST_Init+0x20>)
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <MX_USB_HOST_Init+0x24>)
 8002366:	f006 fa73 	bl	8008850 <USBH_Init>

  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 800236a:	4906      	ldr	r1, [pc, #24]	; (8002384 <MX_USB_HOST_Init+0x28>)
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_USB_HOST_Init+0x24>)
 800236e:	f006 fb25 	bl	80089bc <USBH_RegisterClass>

  USBH_Start(&hUsbHostFS);
 8002372:	4803      	ldr	r0, [pc, #12]	; (8002380 <MX_USB_HOST_Init+0x24>)
 8002374:	f006 fbae 	bl	8008ad4 <USBH_Start>

  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}
 800237c:	08002389 	.word	0x08002389
 8002380:	20002be8 	.word	0x20002be8
 8002384:	2000000c 	.word	0x2000000c

08002388 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	3b01      	subs	r3, #1
 8002398:	2b04      	cmp	r3, #4
 800239a:	d819      	bhi.n	80023d0 <USBH_UserProcess+0x48>
 800239c:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <USBH_UserProcess+0x1c>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	080023d1 	.word	0x080023d1
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d1 	.word	0x080023d1
 80023b0:	080023c9 	.word	0x080023c9
 80023b4:	080023b9 	.word	0x080023b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <USBH_UserProcess+0x58>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
  break;
 80023be:	e008      	b.n	80023d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <USBH_UserProcess+0x58>)
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
  break;
 80023c6:	e004      	b.n	80023d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <USBH_UserProcess+0x58>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
  break;
 80023ce:	e000      	b.n	80023d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80023d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	200000b8 	.word	0x200000b8

080023e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f4:	d142      	bne.n	800247c <HAL_HCD_MspInit+0x98>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80023f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002408:	230a      	movs	r3, #10
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002416:	f000 fc87 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d114      	bne.n	8002468 <HAL_HCD_MspInit+0x84>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002456:	f002 fc9f 	bl	8004d98 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_HCD_MspInit+0xa0>)
 8002460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	e001      	b.n	800246c <HAL_HCD_MspInit+0x88>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8002468:	f002 fc96 	bl	8004d98 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2105      	movs	r1, #5
 8002470:	2043      	movs	r0, #67	; 0x43
 8002472:	f000 fc06 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8002476:	2043      	movs	r0, #67	; 0x43
 8002478:	f000 fc1f 	bl	8002cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000

08002488 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002496:	4618      	mov	r0, r3
 8002498:	f006 ffc9 	bl	800942e <USBH_LL_IncTimer>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024b2:	4618      	mov	r0, r3
 80024b4:	f006 ffe5 	bl	8009482 <USBH_LL_Connect>
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 fffa 	bl	80094c8 <USBH_LL_Disconnect>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80024f2:	4618      	mov	r0, r3
 80024f4:	f007 f82f 	bl	8009556 <USBH_LL_NotifyURBChange>
#endif
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12c      	bne.n	800256c <USBH_LL_Init+0x6c>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8002512:	4a19      	ldr	r2, [pc, #100]	; (8002578 <USBH_LL_Init+0x78>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <USBH_LL_Init+0x78>)
 800251e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <USBH_LL_Init+0x78>)
 8002524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002528:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <USBH_LL_Init+0x78>)
 800252c:	2208      	movs	r2, #8
 800252e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <USBH_LL_Init+0x78>)
 8002532:	2201      	movs	r2, #1
 8002534:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <USBH_LL_Init+0x78>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <USBH_LL_Init+0x78>)
 800253e:	2202      	movs	r2, #2
 8002540:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <USBH_LL_Init+0x78>)
 8002544:	2200      	movs	r2, #0
 8002546:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8002548:	480b      	ldr	r0, [pc, #44]	; (8002578 <USBH_LL_Init+0x78>)
 800254a:	f000 fdaf 	bl	80030ac <HAL_HCD_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <USBH_LL_Init+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002554:	21f2      	movs	r1, #242	; 0xf2
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <USBH_LL_Init+0x7c>)
 8002558:	f7ff fd52 	bl	8002000 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <USBH_LL_Init+0x78>)
 800255e:	f001 f999 	bl	8003894 <HAL_HCD_GetCurrentFrame>
 8002562:	4603      	mov	r3, r0
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f006 ff52 	bl	8009410 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20002fcc 	.word	0x20002fcc
 800257c:	0800d7c8 	.word	0x0800d7c8

08002580 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002596:	4618      	mov	r0, r3
 8002598:	f001 f906 	bl	80037a8 <HAL_HCD_Start>
 800259c:	4603      	mov	r3, r0
 800259e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d816      	bhi.n	80025d4 <USBH_LL_Start+0x54>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <USBH_LL_Start+0x2c>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	080025c3 	.word	0x080025c3
 80025b4:	080025c9 	.word	0x080025c9
 80025b8:	080025cf 	.word	0x080025cf
    case HAL_OK :
      usb_status = USBH_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
    break;
 80025c0:	e00b      	b.n	80025da <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80025c2:	2302      	movs	r3, #2
 80025c4:	73fb      	strb	r3, [r7, #15]
    break;
 80025c6:	e008      	b.n	80025da <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
    break;
 80025cc:	e005      	b.n	80025da <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80025ce:	2302      	movs	r3, #2
 80025d0:	73fb      	strb	r3, [r7, #15]
    break;
 80025d2:	e002      	b.n	80025da <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 80025d4:	2302      	movs	r3, #2
 80025d6:	73fb      	strb	r3, [r7, #15]
    break;
 80025d8:	bf00      	nop
  }
  return usb_status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 f8f7 	bl	80037ee <HAL_HCD_Stop>
 8002600:	4603      	mov	r3, r0
 8002602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d816      	bhi.n	8002638 <USBH_LL_Stop+0x54>
 800260a:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <USBH_LL_Stop+0x2c>)
 800260c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002610:	08002621 	.word	0x08002621
 8002614:	08002627 	.word	0x08002627
 8002618:	0800262d 	.word	0x0800262d
 800261c:	08002633 	.word	0x08002633
    case HAL_OK :
      usb_status = USBH_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]
    break;
 8002624:	e00b      	b.n	800263e <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8002626:	2302      	movs	r3, #2
 8002628:	73fb      	strb	r3, [r7, #15]
    break;
 800262a:	e008      	b.n	800263e <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
    break;
 8002630:	e005      	b.n	800263e <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002632:	2302      	movs	r3, #2
 8002634:	73fb      	strb	r3, [r7, #15]
    break;
 8002636:	e002      	b.n	800263e <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 8002638:	2302      	movs	r3, #2
 800263a:	73fb      	strb	r3, [r7, #15]
    break;
 800263c:	bf00      	nop
  }
  return usb_status;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f928 	bl	80038b0 <HAL_HCD_GetCurrentSpeed>
 8002660:	4603      	mov	r3, r0
 8002662:	2b02      	cmp	r3, #2
 8002664:	d00c      	beq.n	8002680 <USBH_LL_GetSpeed+0x38>
 8002666:	2b02      	cmp	r3, #2
 8002668:	d80d      	bhi.n	8002686 <USBH_LL_GetSpeed+0x3e>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <USBH_LL_GetSpeed+0x2c>
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <USBH_LL_GetSpeed+0x32>
 8002672:	e008      	b.n	8002686 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
    break;
 8002678:	e008      	b.n	800268c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
    break;
 800267e:	e005      	b.n	800268c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8002680:	2302      	movs	r3, #2
 8002682:	73fb      	strb	r3, [r7, #15]
    break;
 8002684:	e002      	b.n	800268c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
    break;
 800268a:	bf00      	nop
  }
  return  speed;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f8ba 	bl	8003828 <HAL_HCD_ResetPort>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73bb      	strb	r3, [r7, #14]
  switch (hal_status) {
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d816      	bhi.n	80026ec <USBH_LL_ResetPort+0x54>
 80026be:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <USBH_LL_ResetPort+0x2c>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026db 	.word	0x080026db
 80026cc:	080026e1 	.word	0x080026e1
 80026d0:	080026e7 	.word	0x080026e7
    case HAL_OK :
      usb_status = USBH_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
    break;
 80026d8:	e00b      	b.n	80026f2 <USBH_LL_ResetPort+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80026da:	2302      	movs	r3, #2
 80026dc:	73fb      	strb	r3, [r7, #15]
    break;
 80026de:	e008      	b.n	80026f2 <USBH_LL_ResetPort+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
    break;
 80026e4:	e005      	b.n	80026f2 <USBH_LL_ResetPort+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80026e6:	2302      	movs	r3, #2
 80026e8:	73fb      	strb	r3, [r7, #15]
    break;
 80026ea:	e002      	b.n	80026f2 <USBH_LL_ResetPort+0x5a>
    default :
      usb_status = USBH_FAIL;
 80026ec:	2302      	movs	r3, #2
 80026ee:	73fb      	strb	r3, [r7, #15]
    break;
 80026f0:	bf00      	nop
  }
  return usb_status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f8aa 	bl	800386c <HAL_HCD_HC_GetXferCount>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af04      	add	r7, sp, #16
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	4608      	mov	r0, r1
 800272e:	4611      	mov	r1, r2
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	70fb      	strb	r3, [r7, #3]
 8002736:	460b      	mov	r3, r1
 8002738:	70bb      	strb	r3, [r7, #2]
 800273a:	4613      	mov	r3, r2
 800273c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800274c:	787c      	ldrb	r4, [r7, #1]
 800274e:	78ba      	ldrb	r2, [r7, #2]
 8002750:	78f9      	ldrb	r1, [r7, #3]
 8002752:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4623      	mov	r3, r4
 8002764:	f000 fd04 	bl	8003170 <HAL_HCD_HC_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	73bb      	strb	r3, [r7, #14]
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d816      	bhi.n	80027a0 <USBH_LL_OpenPipe+0x7c>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <USBH_LL_OpenPipe+0x54>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	08002789 	.word	0x08002789
 800277c:	0800278f 	.word	0x0800278f
 8002780:	08002795 	.word	0x08002795
 8002784:	0800279b 	.word	0x0800279b
    case HAL_OK :
      usb_status = USBH_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
    break;
 800278c:	e00b      	b.n	80027a6 <USBH_LL_OpenPipe+0x82>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800278e:	2302      	movs	r3, #2
 8002790:	73fb      	strb	r3, [r7, #15]
    break;
 8002792:	e008      	b.n	80027a6 <USBH_LL_OpenPipe+0x82>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
    break;
 8002798:	e005      	b.n	80027a6 <USBH_LL_OpenPipe+0x82>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800279a:	2302      	movs	r3, #2
 800279c:	73fb      	strb	r3, [r7, #15]
    break;
 800279e:	e002      	b.n	80027a6 <USBH_LL_OpenPipe+0x82>
    default :
      usb_status = USBH_FAIL;
 80027a0:	2302      	movs	r3, #2
 80027a2:	73fb      	strb	r3, [r7, #15]
    break;
 80027a4:	bf00      	nop
  }
  return usb_status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fd5d 	bl	800328e <HAL_HCD_HC_Halt>
 80027d4:	4603      	mov	r3, r0
 80027d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d816      	bhi.n	800280c <USBH_LL_ClosePipe+0x5c>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <USBH_LL_ClosePipe+0x34>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	080027f5 	.word	0x080027f5
 80027e8:	080027fb 	.word	0x080027fb
 80027ec:	08002801 	.word	0x08002801
 80027f0:	08002807 	.word	0x08002807
    case HAL_OK :
      usb_status = USBH_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
    break;
 80027f8:	e00b      	b.n	8002812 <USBH_LL_ClosePipe+0x62>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80027fa:	2302      	movs	r3, #2
 80027fc:	73fb      	strb	r3, [r7, #15]
    break;
 80027fe:	e008      	b.n	8002812 <USBH_LL_ClosePipe+0x62>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
    break;
 8002804:	e005      	b.n	8002812 <USBH_LL_ClosePipe+0x62>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002806:	2302      	movs	r3, #2
 8002808:	73fb      	strb	r3, [r7, #15]
    break;
 800280a:	e002      	b.n	8002812 <USBH_LL_ClosePipe+0x62>
    default :
      usb_status = USBH_FAIL;
 800280c:	2302      	movs	r3, #2
 800280e:	73fb      	strb	r3, [r7, #15]
    break;
 8002810:	bf00      	nop
  }
  return usb_status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af04      	add	r7, sp, #16
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4603      	mov	r3, r0
 800282c:	70fb      	strb	r3, [r7, #3]
 800282e:	460b      	mov	r3, r1
 8002830:	70bb      	strb	r3, [r7, #2]
 8002832:	4613      	mov	r3, r2
 8002834:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8002844:	787c      	ldrb	r4, [r7, #1]
 8002846:	78ba      	ldrb	r2, [r7, #2]
 8002848:	78f9      	ldrb	r1, [r7, #3]
 800284a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4623      	mov	r3, r4
 8002860:	f000 fd38 	bl	80032d4 <HAL_HCD_HC_SubmitRequest>
 8002864:	4603      	mov	r3, r0
 8002866:	73bb      	strb	r3, [r7, #14]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8002868:	7bbb      	ldrb	r3, [r7, #14]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d816      	bhi.n	800289c <USBH_LL_SubmitURB+0x80>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <USBH_LL_SubmitURB+0x58>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	08002885 	.word	0x08002885
 8002878:	0800288b 	.word	0x0800288b
 800287c:	08002891 	.word	0x08002891
 8002880:	08002897 	.word	0x08002897
    case HAL_OK :
      usb_status = USBH_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	73fb      	strb	r3, [r7, #15]
    break;
 8002888:	e00b      	b.n	80028a2 <USBH_LL_SubmitURB+0x86>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800288a:	2302      	movs	r3, #2
 800288c:	73fb      	strb	r3, [r7, #15]
    break;
 800288e:	e008      	b.n	80028a2 <USBH_LL_SubmitURB+0x86>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
    break;
 8002894:	e005      	b.n	80028a2 <USBH_LL_SubmitURB+0x86>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8002896:	2302      	movs	r3, #2
 8002898:	73fb      	strb	r3, [r7, #15]
    break;
 800289a:	e002      	b.n	80028a2 <USBH_LL_SubmitURB+0x86>
    default :
      usb_status = USBH_FAIL;
 800289c:	2302      	movs	r3, #2
 800289e:	73fb      	strb	r3, [r7, #15]
    break;
 80028a0:	bf00      	nop
  }
  return usb_status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 ffbe 	bl	8003844 <HAL_HCD_HC_GetURBState>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d103      	bne.n	80028f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f844 	bl	8002978 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80028f0:	20c8      	movs	r0, #200	; 0xc8
 80028f2:	f000 f8c7 	bl	8002a84 <HAL_Delay>
  return USBH_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
 800290c:	4613      	mov	r3, r2
 800290e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002916:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	333b      	adds	r3, #59	; 0x3b
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3354      	adds	r3, #84	; 0x54
 800293a:	78ba      	ldrb	r2, [r7, #2]
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e008      	b.n	8002952 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3355      	adds	r3, #85	; 0x55
 800294e:	78ba      	ldrb	r2, [r7, #2]
 8002950:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f88b 	bl	8002a84 <HAL_Delay>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e001      	b.n	8002996 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	461a      	mov	r2, r3
 800299a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800299e:	4803      	ldr	r0, [pc, #12]	; (80029ac <MX_DriverVbusFS+0x34>)
 80029a0:	f000 fb6c 	bl	800307c <HAL_GPIO_WritePin>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	48000800 	.word	0x48000800

080029b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029b6:	e003      	b.n	80029c0 <LoopCopyDataInit>

080029b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029be:	3104      	adds	r1, #4

080029c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029c0:	480b      	ldr	r0, [pc, #44]	; (80029f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029c8:	d3f6      	bcc.n	80029b8 <CopyDataInit>
	ldr	r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80029cc:	e002      	b.n	80029d4 <LoopFillZerobss>

080029ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029d0:	f842 3b04 	str.w	r3, [r2], #4

080029d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <LoopForever+0x16>)
	cmp	r2, r3
 80029d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029d8:	d3f9      	bcc.n	80029ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029da:	f7ff fc25 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f00a f8dd 	bl	800cb9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029e2:	f7ff fa31 	bl	8001e48 <main>

080029e6 <LoopForever>:

LoopForever:
    b LoopForever
 80029e6:	e7fe      	b.n	80029e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029e8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80029ec:	0800d8a0 	.word	0x0800d8a0
	ldr	r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029f4:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 80029f8:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 80029fc:	200032e4 	.word	0x200032e4

08002a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_2_IRQHandler>
	...

08002a04 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_Init+0x3c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a0b      	ldr	r2, [pc, #44]	; (8002a40 <HAL_Init+0x3c>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f000 f926 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff fb91 	bl	8002148 <HAL_InitTick>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	e001      	b.n	8002a36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a32:	f7ff fb3b 	bl	80020ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a36:	79fb      	ldrb	r3, [r7, #7]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40022000 	.word	0x40022000

08002a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x20>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_IncTick+0x24>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_IncTick+0x24>)
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000008 	.word	0x20000008
 8002a68:	200032d0 	.word	0x200032d0

08002a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <HAL_GetTick+0x14>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	200032d0 	.word	0x200032d0

08002a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff ffee 	bl	8002a6c <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d005      	beq.n	8002aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_Delay+0x44>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aaa:	bf00      	nop
 8002aac:	f7ff ffde 	bl	8002a6c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d8f7      	bhi.n	8002aac <HAL_Delay+0x28>
  {
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000008 	.word	0x20000008

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d301      	bcc.n	8002c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00f      	b.n	8002c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <SysTick_Config+0x40>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c46:	210f      	movs	r1, #15
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f7ff ff8e 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <SysTick_Config+0x40>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SysTick_Config+0x40>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff29 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff3e 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff8e 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5d 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff31 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffa2 	bl	8002c28 <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d106      	bne.n	8002d0c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002d0a:	e005      	b.n	8002d18 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e17f      	b.n	8003038 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8171 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d00b      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d64:	2b11      	cmp	r3, #17
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b12      	cmp	r3, #18
 8002d6e:	d130      	bne.n	8002dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002da6:	2201      	movs	r2, #1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 0201 	and.w	r2, r3, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d118      	bne.n	8002e10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x128>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	6939      	ldr	r1, [r7, #16]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80ac 	beq.w	8003032 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b5f      	ldr	r3, [pc, #380]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	4a5e      	ldr	r2, [pc, #376]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee6:	4b5c      	ldr	r3, [pc, #368]	; (8003058 <HAL_GPIO_Init+0x330>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	; (800305c <HAL_GPIO_Init+0x334>)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4013      	ands	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x242>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_GPIO_Init+0x338>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x23e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	; (8003064 <HAL_GPIO_Init+0x33c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x23a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4d      	ldr	r2, [pc, #308]	; (8003068 <HAL_GPIO_Init+0x340>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x236>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_GPIO_Init+0x344>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x232>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_GPIO_Init+0x348>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x22e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_GPIO_Init+0x34c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x22a>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00c      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00a      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x244>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f7c:	4937      	ldr	r1, [pc, #220]	; (800305c <HAL_GPIO_Init+0x334>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fae:	4a32      	ldr	r2, [pc, #200]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fde:	4b26      	ldr	r3, [pc, #152]	; (8003078 <HAL_GPIO_Init+0x350>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_GPIO_Init+0x350>)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_GPIO_Init+0x350>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43db      	mvns	r3, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_GPIO_Init+0x350>)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae78 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	40010000 	.word	0x40010000
 8003060:	48000400 	.word	0x48000400
 8003064:	48000800 	.word	0x48000800
 8003068:	48000c00 	.word	0x48000c00
 800306c:	48001000 	.word	0x48001000
 8003070:	48001400 	.word	0x48001400
 8003074:	48001800 	.word	0x48001800
 8003078:	40010400 	.word	0x40010400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	b08f      	sub	sp, #60	; 0x3c
 80030b0:	af0a      	add	r7, sp, #40	; 0x28
 80030b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e054      	b.n	8003168 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff f983 	bl	80023e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 f9c5 	bl	800748c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	687e      	ldr	r6, [r7, #4]
 800310a:	466d      	mov	r5, sp
 800310c:	f106 0410 	add.w	r4, r6, #16
 8003110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003120:	1d33      	adds	r3, r6, #4
 8003122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f004 f974 	bl	8007412 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f004 f9bc 	bl	80074ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	687e      	ldr	r6, [r7, #4]
 800313e:	466d      	mov	r5, sp
 8003140:	f106 0410 	add.w	r4, r6, #16
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800314a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003150:	e885 0003 	stmia.w	r5, {r0, r1}
 8003154:	1d33      	adds	r3, r6, #4
 8003156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003158:	6838      	ldr	r0, [r7, #0]
 800315a:	f004 facb 	bl	80076f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003170 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af04      	add	r7, sp, #16
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	70fb      	strb	r3, [r7, #3]
 8003182:	460b      	mov	r3, r1
 8003184:	70bb      	strb	r3, [r7, #2]
 8003186:	4613      	mov	r3, r2
 8003188:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_HCD_HC_Init+0x28>
 8003194:	2302      	movs	r3, #2
 8003196:	e076      	b.n	8003286 <HAL_HCD_HC_Init+0x116>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	333d      	adds	r3, #61	; 0x3d
 80031ae:	2200      	movs	r2, #0
 80031b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	3338      	adds	r3, #56	; 0x38
 80031c0:	787a      	ldrb	r2, [r7, #1]
 80031c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	3340      	adds	r3, #64	; 0x40
 80031d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3339      	adds	r3, #57	; 0x39
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	333f      	adds	r3, #63	; 0x3f
 80031f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	78ba      	ldrb	r2, [r7, #2]
 8003200:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003204:	b2d0      	uxtb	r0, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	333a      	adds	r3, #58	; 0x3a
 8003212:	4602      	mov	r2, r0
 8003214:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003216:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da09      	bge.n	8003232 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	212c      	movs	r1, #44	; 0x2c
 8003224:	fb01 f303 	mul.w	r3, r1, r3
 8003228:	4413      	add	r3, r2
 800322a:	333b      	adds	r3, #59	; 0x3b
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e008      	b.n	8003244 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	333b      	adds	r3, #59	; 0x3b
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	333c      	adds	r3, #60	; 0x3c
 8003252:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003256:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	787c      	ldrb	r4, [r7, #1]
 800325e:	78ba      	ldrb	r2, [r7, #2]
 8003260:	78f9      	ldrb	r1, [r7, #3]
 8003262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4623      	mov	r3, r4
 8003274:	f004 fb82 	bl	800797c <USB_HC_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}

0800328e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_HCD_HC_Halt+0x1e>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e00f      	b.n	80032cc <HAL_HCD_HC_Halt+0x3e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 fd5e 	bl	8007d7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	70fb      	strb	r3, [r7, #3]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70bb      	strb	r3, [r7, #2]
 80032ea:	4613      	mov	r3, r2
 80032ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	333b      	adds	r3, #59	; 0x3b
 80032fc:	78ba      	ldrb	r2, [r7, #2]
 80032fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	333f      	adds	r3, #63	; 0x3f
 800330e:	787a      	ldrb	r2, [r7, #1]
 8003310:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003312:	7c3b      	ldrb	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d112      	bne.n	800333e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3342      	adds	r3, #66	; 0x42
 8003326:	2203      	movs	r2, #3
 8003328:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	333d      	adds	r3, #61	; 0x3d
 8003338:	7f3a      	ldrb	r2, [r7, #28]
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e008      	b.n	8003350 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	3342      	adds	r3, #66	; 0x42
 800334c:	2202      	movs	r2, #2
 800334e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b03      	cmp	r3, #3
 8003354:	f200 80c6 	bhi.w	80034e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	080034d1 	.word	0x080034d1
 8003368:	080033d5 	.word	0x080033d5
 800336c:	08003453 	.word	0x08003453
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003370:	7c3b      	ldrb	r3, [r7, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	f040 80b8 	bne.w	80034e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003378:	78bb      	ldrb	r3, [r7, #2]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80b4 	bne.w	80034e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003380:	8b3b      	ldrh	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	3355      	adds	r3, #85	; 0x55
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3355      	adds	r3, #85	; 0x55
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3342      	adds	r3, #66	; 0x42
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033be:	e093      	b.n	80034e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3342      	adds	r3, #66	; 0x42
 80033ce:	2202      	movs	r2, #2
 80033d0:	701a      	strb	r2, [r3, #0]
      break;
 80033d2:	e089      	b.n	80034e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033d4:	78bb      	ldrb	r3, [r7, #2]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11d      	bne.n	8003416 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3355      	adds	r3, #85	; 0x55
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3342      	adds	r3, #66	; 0x42
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003400:	e073      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	3342      	adds	r3, #66	; 0x42
 8003410:	2202      	movs	r2, #2
 8003412:	701a      	strb	r2, [r3, #0]
      break;
 8003414:	e069      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3354      	adds	r3, #84	; 0x54
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3342      	adds	r3, #66	; 0x42
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
      break;
 800343c:	e055      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3342      	adds	r3, #66	; 0x42
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
      break;
 8003450:	e04b      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003452:	78bb      	ldrb	r3, [r7, #2]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11d      	bne.n	8003494 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3355      	adds	r3, #85	; 0x55
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3342      	adds	r3, #66	; 0x42
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800347e:	e034      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3342      	adds	r3, #66	; 0x42
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
      break;
 8003492:	e02a      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3354      	adds	r3, #84	; 0x54
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3342      	adds	r3, #66	; 0x42
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	e016      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3342      	adds	r3, #66	; 0x42
 80034ca:	2202      	movs	r2, #2
 80034cc:	701a      	strb	r2, [r3, #0]
      break;
 80034ce:	e00c      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3342      	adds	r3, #66	; 0x42
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80034e4:	bf00      	nop
 80034e6:	e000      	b.n	80034ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80034e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3344      	adds	r3, #68	; 0x44
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	8b3a      	ldrh	r2, [r7, #24]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	202c      	movs	r0, #44	; 0x2c
 8003504:	fb00 f303 	mul.w	r3, r0, r3
 8003508:	440b      	add	r3, r1
 800350a:	334c      	adds	r3, #76	; 0x4c
 800350c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3360      	adds	r3, #96	; 0x60
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3350      	adds	r3, #80	; 0x50
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3339      	adds	r3, #57	; 0x39
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3361      	adds	r3, #97	; 0x61
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	222c      	movs	r2, #44	; 0x2c
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	3338      	adds	r3, #56	; 0x38
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
 8003568:	4619      	mov	r1, r3
 800356a:	f004 faff 	bl	8007b6c <USB_HC_StartXfer>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f86d 	bl	800766e <USB_GetMode>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	f040 80ef 	bne.w	800377a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f004 f851 	bl	8007648 <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80e5 	beq.w	8003778 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 f848 	bl	8007648 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c2:	d104      	bne.n	80035ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f838 	bl	8007648 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e2:	d104      	bne.n	80035ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f004 f828 	bl	8007648 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003602:	d104      	bne.n	800360e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800360c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f004 f818 	bl	8007648 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d103      	bne.n	800362a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2202      	movs	r2, #2
 8003628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f004 f80a 	bl	8007648 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363e:	d115      	bne.n	800366c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003648:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe ff30 	bl	80024c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f004 f8c2 	bl	80077f0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f003 ffe9 	bl	8007648 <USB_ReadInterrupts>
 8003676:	4603      	mov	r3, r0
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003680:	d102      	bne.n	8003688 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 f98a 	bl	800499c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f003 ffdb 	bl	8007648 <USB_ReadInterrupts>
 8003692:	4603      	mov	r3, r0
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d106      	bne.n	80036aa <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe fef3 	bl	8002488 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2208      	movs	r2, #8
 80036a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 ffca 	bl	8007648 <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d101      	bne.n	80036c2 <HAL_HCD_IRQHandler+0x14a>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_HCD_IRQHandler+0x14c>
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d012      	beq.n	80036ee <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0210 	bic.w	r2, r2, #16
 80036d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f001 f88d 	bl	80047f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0210 	orr.w	r2, r2, #16
 80036ec:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 ffa8 	bl	8007648 <USB_ReadInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003702:	d13a      	bne.n	800377a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f004 fb27 	bl	8007d5c <USB_HC_ReadInterrupt>
 800370e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e025      	b.n	8003762 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d018      	beq.n	800375c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	d106      	bne.n	8003750 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8bf 	bl	80038cc <HCD_HC_IN_IRQHandler>
 800374e:	e005      	b.n	800375c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fcb8 	bl	80040cc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	d3d4      	bcc.n	8003716 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003774:	615a      	str	r2, [r3, #20]
 8003776:	e000      	b.n	800377a <HAL_HCD_IRQHandler+0x202>
      return;
 8003778:	bf00      	nop
    }
  }
}
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_HCD_Start+0x16>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e013      	b.n	80037e6 <HAL_HCD_Start+0x3e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fe4d 	bl	800746a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 f86e 	bl	80078b8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_HCD_Stop+0x16>
 8003800:	2302      	movs	r3, #2
 8003802:	e00d      	b.n	8003820 <HAL_HCD_Stop+0x32>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fbd0 	bl	8007fb6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f004 f815 	bl	8007864 <USB_ResetPort>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	3360      	adds	r3, #96	; 0x60
 800385e:	781b      	ldrb	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3350      	adds	r3, #80	; 0x50
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f859 	bl	8007958 <USB_GetCurrentFrame>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f004 f834 	bl	800792a <USB_GetHostSpeed>
 80038c2:	4603      	mov	r3, r0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d119      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	461a      	mov	r2, r3
 800390a:	2304      	movs	r3, #4
 800390c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	440a      	add	r2, r1
 8003924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	60d3      	str	r3, [r2, #12]
 800392e:	e101      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4413      	add	r3, r2
 8003938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003946:	d12b      	bne.n	80039a0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	3361      	adds	r3, #97	; 0x61
 800396a:	2207      	movs	r2, #7
 800396c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	0151      	lsls	r1, r2, #5
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	440a      	add	r2, r1
 8003984:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 f9f0 	bl	8007d7e <USB_HC_Halt>
 800399e:	e0c9      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d109      	bne.n	80039ca <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2320      	movs	r3, #32
 80039c6:	6093      	str	r3, [r2, #8]
 80039c8:	e0b4      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d133      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	0151      	lsls	r1, r2, #5
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	440a      	add	r2, r1
 80039f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3361      	adds	r3, #97	; 0x61
 8003a0e:	2205      	movs	r2, #5
 8003a10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2310      	movs	r3, #16
 8003a22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	461a      	mov	r2, r3
 8003a32:	2308      	movs	r3, #8
 8003a34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 f99c 	bl	8007d7e <USB_HC_Halt>
 8003a46:	e075      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d134      	bne.n	8003aca <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7a:	f043 0302 	orr.w	r3, r3, #2
 8003a7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	2208      	movs	r2, #8
 8003a90:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 f95b 	bl	8007d7e <USB_HC_Halt>
 8003ac8:	e034      	b.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d129      	bne.n	8003b34 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	0151      	lsls	r1, r2, #5
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	440a      	add	r2, r1
 8003af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3361      	adds	r3, #97	; 0x61
 8003b0e:	2206      	movs	r2, #6
 8003b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f004 f92e 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4a:	d122      	bne.n	8003b92 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b66:	f043 0302 	orr.w	r3, r3, #2
 8003b6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 f901 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003b90:	e298      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 80fd 	bne.w	8003da4 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3361      	adds	r3, #97	; 0x61
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	335c      	adds	r3, #92	; 0x5c
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	333f      	adds	r3, #63	; 0x3f
 8003c02:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d121      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	0151      	lsls	r1, r2, #5
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	4611      	mov	r1, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f004 f8a3 	bl	8007d7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2310      	movs	r3, #16
 8003c48:	6093      	str	r3, [r2, #8]
 8003c4a:	e066      	b.n	8003d1a <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	333f      	adds	r3, #63	; 0x3f
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d127      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3360      	adds	r3, #96	; 0x60
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	b2d9      	uxtb	r1, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	202c      	movs	r0, #44	; 0x2c
 8003c9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3360      	adds	r3, #96	; 0x60
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fe fc17 	bl	80024dc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cae:	e034      	b.n	8003d1a <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	333f      	adds	r3, #63	; 0x3f
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d12a      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3360      	adds	r3, #96	; 0x60
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3354      	adds	r3, #84	; 0x54
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	f083 0301 	eor.w	r3, r3, #1
 8003cea:	b2d8      	uxtb	r0, r3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3354      	adds	r3, #84	; 0x54
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	b2d9      	uxtb	r1, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	202c      	movs	r0, #44	; 0x2c
 8003d08:	fb00 f303 	mul.w	r3, r0, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3360      	adds	r3, #96	; 0x60
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fe fbe1 	bl	80024dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d12b      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3348      	adds	r3, #72	; 0x48
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	202c      	movs	r0, #44	; 0x2c
 8003d38:	fb00 f202 	mul.w	r2, r0, r2
 8003d3c:	440a      	add	r2, r1
 8003d3e:	3240      	adds	r2, #64	; 0x40
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 81ba 	beq.w	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3354      	adds	r3, #84	; 0x54
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2d8      	uxtb	r0, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	212c      	movs	r1, #44	; 0x2c
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	4413      	add	r3, r2
 8003d72:	3354      	adds	r3, #84	; 0x54
 8003d74:	4602      	mov	r2, r0
 8003d76:	701a      	strb	r2, [r3, #0]
}
 8003d78:	e1a4      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	212c      	movs	r1, #44	; 0x2c
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3354      	adds	r3, #84	; 0x54
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	f083 0301 	eor.w	r3, r3, #1
 8003d8e:	b2d8      	uxtb	r0, r3
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3354      	adds	r3, #84	; 0x54
 8003d9e:	4602      	mov	r2, r0
 8003da0:	701a      	strb	r2, [r3, #0]
}
 8003da2:	e18f      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	f040 8106 	bne.w	8003fc8 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd6:	f023 0302 	bic.w	r3, r3, #2
 8003dda:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3361      	adds	r3, #97	; 0x61
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d109      	bne.n	8003e04 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	212c      	movs	r1, #44	; 0x2c
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3360      	adds	r3, #96	; 0x60
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e0c9      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3361      	adds	r3, #97	; 0x61
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b05      	cmp	r3, #5
 8003e16:	d109      	bne.n	8003e2c <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	2205      	movs	r2, #5
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	e0b5      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3361      	adds	r3, #97	; 0x61
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d009      	beq.n	8003e54 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3361      	adds	r3, #97	; 0x61
 8003e4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d150      	bne.n	8003ef6 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	335c      	adds	r3, #92	; 0x5c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	202c      	movs	r0, #44	; 0x2c
 8003e6c:	fb00 f303 	mul.w	r3, r0, r3
 8003e70:	440b      	add	r3, r1
 8003e72:	335c      	adds	r3, #92	; 0x5c
 8003e74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	212c      	movs	r1, #44	; 0x2c
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	335c      	adds	r3, #92	; 0x5c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d912      	bls.n	8003eb0 <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	212c      	movs	r1, #44	; 0x2c
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	4413      	add	r3, r2
 8003e96:	335c      	adds	r3, #92	; 0x5c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3360      	adds	r3, #96	; 0x60
 8003eaa:	2204      	movs	r2, #4
 8003eac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003eae:	e073      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ed8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ee0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ef4:	e050      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	212c      	movs	r1, #44	; 0x2c
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	4413      	add	r3, r2
 8003f02:	3361      	adds	r3, #97	; 0x61
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d122      	bne.n	8003f50 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	3360      	adds	r3, #96	; 0x60
 8003f18:	2202      	movs	r2, #2
 8003f1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e023      	b.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3361      	adds	r3, #97	; 0x61
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	d119      	bne.n	8003f98 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	335c      	adds	r3, #92	; 0x5c
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	202c      	movs	r0, #44	; 0x2c
 8003f7c:	fb00 f303 	mul.w	r3, r0, r3
 8003f80:	440b      	add	r3, r1
 8003f82:	335c      	adds	r3, #92	; 0x5c
 8003f84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	212c      	movs	r1, #44	; 0x2c
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	4413      	add	r3, r2
 8003f92:	3360      	adds	r3, #96	; 0x60
 8003f94:	2204      	movs	r2, #4
 8003f96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	202c      	movs	r0, #44	; 0x2c
 8003fb4:	fb00 f303 	mul.w	r3, r0, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	3360      	adds	r3, #96	; 0x60
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fe fa8b 	bl	80024dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fc6:	e07d      	b.n	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d172      	bne.n	80040c4 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	333f      	adds	r3, #63	; 0x3f
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d121      	bne.n	8004036 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	212c      	movs	r1, #44	; 0x2c
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	335c      	adds	r3, #92	; 0x5c
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	440a      	add	r2, r1
 800401a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f003 fea5 	bl	8007d7e <USB_HC_Halt>
 8004034:	e03d      	b.n	80040b2 <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	212c      	movs	r1, #44	; 0x2c
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	333f      	adds	r3, #63	; 0x3f
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	333f      	adds	r3, #63	; 0x3f
 8004058:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800405a:	2b02      	cmp	r3, #2
 800405c:	d129      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	212c      	movs	r1, #44	; 0x2c
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	4413      	add	r3, r2
 800406a:	335c      	adds	r3, #92	; 0x5c
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	3361      	adds	r3, #97	; 0x61
 800407e:	2203      	movs	r2, #3
 8004080:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	440a      	add	r2, r1
 8004098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fe66 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	461a      	mov	r2, r3
 80040c0:	2310      	movs	r3, #16
 80040c2:	6093      	str	r3, [r2, #8]
}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d119      	bne.n	8004130 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	2304      	movs	r3, #4
 800410c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	440a      	add	r2, r1
 8004124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800412e:	e35f      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d13e      	bne.n	80041c4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2320      	movs	r3, #32
 8004156:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	333d      	adds	r3, #61	; 0x3d
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	f040 8341 	bne.w	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
      hhcd->hc[ch_num].do_ping = 0U;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	333d      	adds	r3, #61	; 0x3d
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3360      	adds	r3, #96	; 0x60
 800418e:	2202      	movs	r2, #2
 8004190:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f003 fdde 	bl	8007d7e <USB_HC_Halt>
}
 80041c2:	e315      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041da:	d122      	bne.n	8004222 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f003 fdb9 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800421e:	6093      	str	r3, [r2, #8]
}
 8004220:	e2e6      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d150      	bne.n	80042da <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	335c      	adds	r3, #92	; 0x5c
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	4413      	add	r3, r2
 8004252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d111      	bne.n	8004284 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	333d      	adds	r3, #61	; 0x3d
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	4413      	add	r3, r2
 800427a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427e:	461a      	mov	r2, r3
 8004280:	2340      	movs	r3, #64	; 0x40
 8004282:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	0151      	lsls	r1, r2, #5
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	440a      	add	r2, r1
 800429a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fd65 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3361      	adds	r3, #97	; 0x61
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
}
 80042d8:	e28a      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d13c      	bne.n	800436a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	3361      	adds	r3, #97	; 0x61
 80042fe:	2204      	movs	r2, #4
 8004300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	333d      	adds	r3, #61	; 0x3d
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	335c      	adds	r3, #92	; 0x5c
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	440a      	add	r2, r1
 800433c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fd14 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	461a      	mov	r2, r3
 8004364:	2340      	movs	r3, #64	; 0x40
 8004366:	6093      	str	r3, [r2, #8]
}
 8004368:	e242      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d12a      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	2308      	movs	r3, #8
 8004390:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	0151      	lsls	r1, r2, #5
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	440a      	add	r2, r1
 80043a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f003 fcde 	bl	8007d7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3361      	adds	r3, #97	; 0x61
 80043d0:	2205      	movs	r2, #5
 80043d2:	701a      	strb	r2, [r3, #0]
}
 80043d4:	e20c      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d133      	bne.n	8004454 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	335c      	adds	r3, #92	; 0x5c
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	3361      	adds	r3, #97	; 0x61
 800440c:	2203      	movs	r2, #3
 800440e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	440a      	add	r2, r1
 8004426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800442a:	f043 0302 	orr.w	r3, r3, #2
 800442e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fc9f 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	461a      	mov	r2, r3
 800444e:	2310      	movs	r3, #16
 8004450:	6093      	str	r3, [r2, #8]
}
 8004452:	e1cd      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d12a      	bne.n	80044c0 <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	3361      	adds	r3, #97	; 0x61
 8004478:	2206      	movs	r2, #6
 800447a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	440a      	add	r2, r1
 8004492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	4611      	mov	r1, r2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 fc69 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	6093      	str	r3, [r2, #8]
}
 80044be:	e197      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d134      	bne.n	8004542 <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fc3b 	bl	8007d7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	461a      	mov	r2, r3
 8004516:	2310      	movs	r3, #16
 8004518:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004526:	461a      	mov	r2, r3
 8004528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800452c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	2208      	movs	r2, #8
 800453e:	701a      	strb	r2, [r3, #0]
}
 8004540:	e156      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4413      	add	r3, r2
 800454a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	f040 814b 	bne.w	80047f0 <HCD_HC_OUT_IRQHandler+0x724>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	0151      	lsls	r1, r2, #5
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	440a      	add	r2, r1
 8004570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004574:	f023 0302 	bic.w	r3, r3, #2
 8004578:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	212c      	movs	r1, #44	; 0x2c
 8004580:	fb01 f303 	mul.w	r3, r1, r3
 8004584:	4413      	add	r3, r2
 8004586:	3361      	adds	r3, #97	; 0x61
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d179      	bne.n	8004682 <HCD_HC_OUT_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3360      	adds	r3, #96	; 0x60
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	333f      	adds	r3, #63	; 0x3f
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d00a      	beq.n	80045ca <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	212c      	movs	r1, #44	; 0x2c
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	4413      	add	r3, r2
 80045c0:	333f      	adds	r3, #63	; 0x3f
 80045c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	f040 80fc 	bne.w	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
        if (hhcd->Init.dma_enable == 1U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d142      	bne.n	8004658 <HCD_HC_OUT_IRQHandler+0x58c>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	212c      	movs	r1, #44	; 0x2c
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	4413      	add	r3, r2
 80045de:	334c      	adds	r3, #76	; 0x4c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80ed 	beq.w	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	212c      	movs	r1, #44	; 0x2c
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	4413      	add	r3, r2
 80045f4:	334c      	adds	r3, #76	; 0x4c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	202c      	movs	r0, #44	; 0x2c
 80045fe:	fb00 f202 	mul.w	r2, r0, r2
 8004602:	440a      	add	r2, r1
 8004604:	3240      	adds	r2, #64	; 0x40
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	4413      	add	r3, r2
 800460a:	3b01      	subs	r3, #1
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	202c      	movs	r0, #44	; 0x2c
 8004612:	fb00 f202 	mul.w	r2, r0, r2
 8004616:	440a      	add	r2, r1
 8004618:	3240      	adds	r2, #64	; 0x40
 800461a:	8812      	ldrh	r2, [r2, #0]
 800461c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80ca 	beq.w	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3355      	adds	r3, #85	; 0x55
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	f083 0301 	eor.w	r3, r3, #1
 8004642:	b2d8      	uxtb	r0, r3
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3355      	adds	r3, #85	; 0x55
 8004652:	4602      	mov	r2, r0
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e0b4      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	212c      	movs	r1, #44	; 0x2c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	3355      	adds	r3, #85	; 0x55
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f083 0301 	eor.w	r3, r3, #1
 800466c:	b2d8      	uxtb	r0, r3
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	3355      	adds	r3, #85	; 0x55
 800467c:	4602      	mov	r2, r0
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	e09f      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3361      	adds	r3, #97	; 0x61
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d109      	bne.n	80046aa <HCD_HC_OUT_IRQHandler+0x5de>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	212c      	movs	r1, #44	; 0x2c
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	4413      	add	r3, r2
 80046a2:	3360      	adds	r3, #96	; 0x60
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e08b      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	3361      	adds	r3, #97	; 0x61
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d109      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0x606>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	212c      	movs	r1, #44	; 0x2c
 80046c4:	fb01 f303 	mul.w	r3, r1, r3
 80046c8:	4413      	add	r3, r2
 80046ca:	3360      	adds	r3, #96	; 0x60
 80046cc:	2202      	movs	r2, #2
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	e077      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	3361      	adds	r3, #97	; 0x61
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d109      	bne.n	80046fa <HCD_HC_OUT_IRQHandler+0x62e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3360      	adds	r3, #96	; 0x60
 80046f4:	2205      	movs	r2, #5
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e063      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	212c      	movs	r1, #44	; 0x2c
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	4413      	add	r3, r2
 8004706:	3361      	adds	r3, #97	; 0x61
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d009      	beq.n	8004722 <HCD_HC_OUT_IRQHandler+0x656>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	212c      	movs	r1, #44	; 0x2c
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	4413      	add	r3, r2
 800471a:	3361      	adds	r3, #97	; 0x61
 800471c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800471e:	2b08      	cmp	r3, #8
 8004720:	d14f      	bne.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
      hhcd->hc[ch_num].ErrCnt++;
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	335c      	adds	r3, #92	; 0x5c
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	202c      	movs	r0, #44	; 0x2c
 800473a:	fb00 f303 	mul.w	r3, r0, r3
 800473e:	440b      	add	r3, r1
 8004740:	335c      	adds	r3, #92	; 0x5c
 8004742:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	335c      	adds	r3, #92	; 0x5c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d912      	bls.n	800477e <HCD_HC_OUT_IRQHandler+0x6b2>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	335c      	adds	r3, #92	; 0x5c
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	3360      	adds	r3, #96	; 0x60
 8004778:	2204      	movs	r2, #4
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e021      	b.n	80047c2 <HCD_HC_OUT_IRQHandler+0x6f6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	3360      	adds	r3, #96	; 0x60
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	461a      	mov	r2, r3
 80047d0:	2302      	movs	r3, #2
 80047d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	b2d9      	uxtb	r1, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	202c      	movs	r0, #44	; 0x2c
 80047de:	fb00 f303 	mul.w	r3, r0, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	3360      	adds	r3, #96	; 0x60
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd fe76 	bl	80024dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047f0:	bf00      	nop
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	0c5b      	lsrs	r3, r3, #17
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d004      	beq.n	800483e <HCD_RXQLVL_IRQHandler+0x46>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b05      	cmp	r3, #5
 8004838:	f000 80a9 	beq.w	800498e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800483c:	e0aa      	b.n	8004994 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80a6 	beq.w	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3344      	adds	r3, #68	; 0x44
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 809b 	beq.w	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	212c      	movs	r1, #44	; 0x2c
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	4413      	add	r3, r2
 8004868:	3350      	adds	r3, #80	; 0x50
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	441a      	add	r2, r3
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	202c      	movs	r0, #44	; 0x2c
 8004876:	fb00 f303 	mul.w	r3, r0, r3
 800487a:	440b      	add	r3, r1
 800487c:	334c      	adds	r3, #76	; 0x4c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d87a      	bhi.n	800497a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	3344      	adds	r3, #68	; 0x44
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	b292      	uxth	r2, r2
 800489c:	4619      	mov	r1, r3
 800489e:	f002 feaa 	bl	80075f6 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3344      	adds	r3, #68	; 0x44
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	441a      	add	r2, r3
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	202c      	movs	r0, #44	; 0x2c
 80048bc:	fb00 f303 	mul.w	r3, r0, r3
 80048c0:	440b      	add	r3, r1
 80048c2:	3344      	adds	r3, #68	; 0x44
 80048c4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3350      	adds	r3, #80	; 0x50
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	441a      	add	r2, r3
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	202c      	movs	r0, #44	; 0x2c
 80048e0:	fb00 f303 	mul.w	r3, r0, r3
 80048e4:	440b      	add	r3, r1
 80048e6:	3350      	adds	r3, #80	; 0x50
 80048e8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	0cdb      	lsrs	r3, r3, #19
 80048fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3340      	adds	r3, #64	; 0x40
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4293      	cmp	r3, r2
 8004916:	d13c      	bne.n	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d039      	beq.n	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	4413      	add	r3, r2
 8004926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004934:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800493c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	4413      	add	r3, r2
 8004946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494a:	461a      	mov	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	3354      	adds	r3, #84	; 0x54
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	f083 0301 	eor.w	r3, r3, #1
 8004964:	b2d8      	uxtb	r0, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	3354      	adds	r3, #84	; 0x54
 8004974:	4602      	mov	r2, r0
 8004976:	701a      	strb	r2, [r3, #0]
      break;
 8004978:	e00b      	b.n	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3360      	adds	r3, #96	; 0x60
 8004988:	2204      	movs	r2, #4
 800498a:	701a      	strb	r2, [r3, #0]
      break;
 800498c:	e001      	b.n	8004992 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004992:	bf00      	nop
  }
}
 8004994:	bf00      	nop
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d10b      	bne.n	80049ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fd60 	bl	80024a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d132      	bne.n	8004a5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f043 0308 	orr.w	r3, r3, #8
 80049fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d126      	bne.n	8004a56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d113      	bne.n	8004a38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a1a:	d106      	bne.n	8004a2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f002 fee4 	bl	80077f0 <USB_InitFSLSPClkSel>
 8004a28:	e011      	b.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f002 fedd 	bl	80077f0 <USB_InitFSLSPClkSel>
 8004a36:	e00a      	b.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	461a      	mov	r2, r3
 8004a48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004a4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fe fe96 	bl	8003780 <HAL_HCD_PortEnabled_Callback>
 8004a54:	e002      	b.n	8004a5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe fe9c 	bl	8003794 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d103      	bne.n	8004a6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6013      	str	r3, [r2, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e081      	b.n	8004b98 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fd f96b 	bl	8001d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2224      	movs	r2, #36	; 0x24
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af8:	609a      	str	r2, [r3, #8]
 8004afa:	e006      	b.n	8004b0a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d104      	bne.n	8004b1c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	021a      	lsls	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69d9      	ldr	r1, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d138      	bne.n	8004c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e032      	b.n	8004c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d139      	bne.n	8004cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e033      	b.n	8004cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2224      	movs	r2, #36	; 0x24
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40007000 	.word	0x40007000

08004cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfa:	d130      	bne.n	8004d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cfc:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d08:	d038      	beq.n	8004d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d12:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2232      	movs	r2, #50	; 0x32
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
 8004d24:	4a1b      	ldr	r2, [pc, #108]	; (8004d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0c9b      	lsrs	r3, r3, #18
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d30:	e002      	b.n	8004d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d38:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d102      	bne.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f2      	bne.n	8004d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d58:	d110      	bne.n	8004d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6a:	d007      	beq.n	8004d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d74:	4a05      	ldr	r2, [pc, #20]	; (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	20000000 	.word	0x20000000
 8004d94:	431bde83 	.word	0x431bde83

08004d98 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004da6:	6053      	str	r3, [r2, #4]
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40007000 	.word	0x40007000

08004db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e3d4      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dca:	4ba1      	ldr	r3, [pc, #644]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dd4:	4b9e      	ldr	r3, [pc, #632]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80e4 	beq.w	8004fb4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_RCC_OscConfig+0x4a>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	f040 808b 	bne.w	8004f10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f040 8087 	bne.w	8004f10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e02:	4b93      	ldr	r3, [pc, #588]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_RCC_OscConfig+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e3ac      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1a      	ldr	r2, [r3, #32]
 8004e1e:	4b8c      	ldr	r3, [pc, #560]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <HAL_RCC_OscConfig+0x7c>
 8004e2a:	4b89      	ldr	r3, [pc, #548]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e32:	e005      	b.n	8004e40 <HAL_RCC_OscConfig+0x88>
 8004e34:	4b86      	ldr	r3, [pc, #536]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d223      	bcs.n	8004e8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fd73 	bl	8005934 <RCC_SetFlashLatencyFromMSIRange>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e38d      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e58:	4b7d      	ldr	r3, [pc, #500]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a7c      	ldr	r2, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e5e:	f043 0308 	orr.w	r3, r3, #8
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4977      	ldr	r1, [pc, #476]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e76:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4972      	ldr	r1, [pc, #456]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
 8004e8a:	e025      	b.n	8004ed8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e8c:	4b70      	ldr	r3, [pc, #448]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6f      	ldr	r2, [pc, #444]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e92:	f043 0308 	orr.w	r3, r3, #8
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b6d      	ldr	r3, [pc, #436]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	496a      	ldr	r1, [pc, #424]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eaa:	4b69      	ldr	r3, [pc, #420]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	4965      	ldr	r1, [pc, #404]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fd33 	bl	8005934 <RCC_SetFlashLatencyFromMSIRange>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e34d      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed8:	f000 fc36 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	495a      	ldr	r1, [pc, #360]	; (8005054 <HAL_RCC_OscConfig+0x29c>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	4a58      	ldr	r2, [pc, #352]	; (8005058 <HAL_RCC_OscConfig+0x2a0>)
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ef8:	4b58      	ldr	r3, [pc, #352]	; (800505c <HAL_RCC_OscConfig+0x2a4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fd f923 	bl	8002148 <HAL_InitTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d052      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	e331      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d032      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f18:	4b4d      	ldr	r3, [pc, #308]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a4c      	ldr	r2, [pc, #304]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f24:	f7fd fda2 	bl	8002a6c <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f2c:	f7fd fd9e 	bl	8002a6c <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e31a      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f3e:	4b44      	ldr	r3, [pc, #272]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a40      	ldr	r2, [pc, #256]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f50:	f043 0308 	orr.w	r3, r3, #8
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	493b      	ldr	r1, [pc, #236]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	4936      	ldr	r1, [pc, #216]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	e01a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f7e:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a33      	ldr	r2, [pc, #204]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004f84:	f023 0301 	bic.w	r3, r3, #1
 8004f88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fd6f 	bl	8002a6c <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f92:	f7fd fd6b 	bl	8002a6c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e2e7      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fa4:	4b2a      	ldr	r3, [pc, #168]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x1da>
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fb2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d074      	beq.n	80050aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x21a>
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b0c      	cmp	r3, #12
 8004fca:	d10e      	bne.n	8004fea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d10b      	bne.n	8004fea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd2:	4b1f      	ldr	r3, [pc, #124]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d064      	beq.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d160      	bne.n	80050a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e2c4      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x24a>
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e01d      	b.n	800503e <HAL_RCC_OscConfig+0x286>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500a:	d10c      	bne.n	8005026 <HAL_RCC_OscConfig+0x26e>
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8005012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e00b      	b.n	800503e <HAL_RCC_OscConfig+0x286>
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a06      	ldr	r2, [pc, #24]	; (8005050 <HAL_RCC_OscConfig+0x298>)
 8005038:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01c      	beq.n	8005080 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fd fd11 	bl	8002a6c <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504c:	e011      	b.n	8005072 <HAL_RCC_OscConfig+0x2ba>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	0800d814 	.word	0x0800d814
 8005058:	20000000 	.word	0x20000000
 800505c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005060:	f7fd fd04 	bl	8002a6c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	; 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e280      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005072:	4baf      	ldr	r3, [pc, #700]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x2a8>
 800507e:	e014      	b.n	80050aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fd fcf4 	bl	8002a6c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005088:	f7fd fcf0 	bl	8002a6c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e26c      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509a:	4ba5      	ldr	r3, [pc, #660]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x2d0>
 80050a6:	e000      	b.n	80050aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d060      	beq.n	8005178 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_OscConfig+0x310>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d119      	bne.n	80050f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d116      	bne.n	80050f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c8:	4b99      	ldr	r3, [pc, #612]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_RCC_OscConfig+0x328>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e249      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b93      	ldr	r3, [pc, #588]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	4990      	ldr	r1, [pc, #576]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	e040      	b.n	8005178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d023      	beq.n	8005146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fe:	4b8c      	ldr	r3, [pc, #560]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a8b      	ldr	r2, [pc, #556]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fd fcaf 	bl	8002a6c <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005112:	f7fd fcab 	bl	8002a6c <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e227      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005124:	4b82      	ldr	r3, [pc, #520]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b7f      	ldr	r3, [pc, #508]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	497c      	ldr	r1, [pc, #496]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005140:	4313      	orrs	r3, r2
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	e018      	b.n	8005178 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b7a      	ldr	r3, [pc, #488]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a79      	ldr	r2, [pc, #484]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800514c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005152:	f7fd fc8b 	bl	8002a6c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515a:	f7fd fc87 	bl	8002a6c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e203      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516c:	4b70      	ldr	r3, [pc, #448]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03c      	beq.n	80051fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01c      	beq.n	80051c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518c:	4b68      	ldr	r3, [pc, #416]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005192:	4a67      	ldr	r2, [pc, #412]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fd fc66 	bl	8002a6c <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a4:	f7fd fc62 	bl	8002a6c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e1de      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b6:	4b5e      	ldr	r3, [pc, #376]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80051b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ef      	beq.n	80051a4 <HAL_RCC_OscConfig+0x3ec>
 80051c4:	e01b      	b.n	80051fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	4a58      	ldr	r2, [pc, #352]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fd fc49 	bl	8002a6c <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051de:	f7fd fc45 	bl	8002a6c <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e1c1      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f0:	4b4f      	ldr	r3, [pc, #316]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80051f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1ef      	bne.n	80051de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a6 	beq.w	8005358 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520c:	2300      	movs	r3, #0
 800520e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005210:	4b47      	ldr	r3, [pc, #284]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4b44      	ldr	r3, [pc, #272]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	4a43      	ldr	r2, [pc, #268]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	; 0x58
 8005228:	4b41      	ldr	r3, [pc, #260]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005234:	2301      	movs	r3, #1
 8005236:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RCC_OscConfig+0x57c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d118      	bne.n	8005276 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005244:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <HAL_RCC_OscConfig+0x57c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3a      	ldr	r2, [pc, #232]	; (8005334 <HAL_RCC_OscConfig+0x57c>)
 800524a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005250:	f7fd fc0c 	bl	8002a6c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005258:	f7fd fc08 	bl	8002a6c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e184      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800526a:	4b32      	ldr	r3, [pc, #200]	; (8005334 <HAL_RCC_OscConfig+0x57c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d108      	bne.n	8005290 <HAL_RCC_OscConfig+0x4d8>
 800527e:	4b2c      	ldr	r3, [pc, #176]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800528e:	e024      	b.n	80052da <HAL_RCC_OscConfig+0x522>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d110      	bne.n	80052ba <HAL_RCC_OscConfig+0x502>
 8005298:	4b25      	ldr	r3, [pc, #148]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	4a24      	ldr	r2, [pc, #144]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052a0:	f043 0304 	orr.w	r3, r3, #4
 80052a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	4a20      	ldr	r2, [pc, #128]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052b8:	e00f      	b.n	80052da <HAL_RCC_OscConfig+0x522>
 80052ba:	4b1d      	ldr	r3, [pc, #116]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052ca:	4b19      	ldr	r3, [pc, #100]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	4a17      	ldr	r2, [pc, #92]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 80052d2:	f023 0304 	bic.w	r3, r3, #4
 80052d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e2:	f7fd fbc3 	bl	8002a6c <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e8:	e00a      	b.n	8005300 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fd fbbf 	bl	8002a6c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e139      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_OscConfig+0x578>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0ed      	beq.n	80052ea <HAL_RCC_OscConfig+0x532>
 800530e:	e01a      	b.n	8005346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fd fbac 	bl	8002a6c <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005316:	e00f      	b.n	8005338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fd fba8 	bl	8002a6c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d906      	bls.n	8005338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e122      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005338:	4b90      	ldr	r3, [pc, #576]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1e8      	bne.n	8005318 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005346:	7ffb      	ldrb	r3, [r7, #31]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d105      	bne.n	8005358 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534c:	4b8b      	ldr	r3, [pc, #556]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	4a8a      	ldr	r2, [pc, #552]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005356:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8108 	beq.w	8005572 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	2b02      	cmp	r3, #2
 8005368:	f040 80d0 	bne.w	800550c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800536c:	4b83      	ldr	r3, [pc, #524]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0203 	and.w	r2, r3, #3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	429a      	cmp	r2, r3
 800537e:	d130      	bne.n	80053e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	3b01      	subs	r3, #1
 800538c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d127      	bne.n	80053e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d11f      	bne.n	80053e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ac:	2a07      	cmp	r2, #7
 80053ae:	bf14      	ite	ne
 80053b0:	2201      	movne	r2, #1
 80053b2:	2200      	moveq	r2, #0
 80053b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d113      	bne.n	80053e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	3b01      	subs	r3, #1
 80053c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d109      	bne.n	80053e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	3b01      	subs	r3, #1
 80053dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053de:	429a      	cmp	r2, r3
 80053e0:	d06e      	beq.n	80054c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d069      	beq.n	80054bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053e8:	4b64      	ldr	r3, [pc, #400]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053f4:	4b61      	ldr	r3, [pc, #388]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0b7      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005404:	4b5d      	ldr	r3, [pc, #372]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5c      	ldr	r2, [pc, #368]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800540a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005410:	f7fd fb2c 	bl	8002a6c <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd fb28 	bl	8002a6c <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0a4      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542a:	4b54      	ldr	r3, [pc, #336]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005436:	4b51      	ldr	r3, [pc, #324]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <HAL_RCC_OscConfig+0x7c8>)
 800543c:	4013      	ands	r3, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005446:	3a01      	subs	r2, #1
 8005448:	0112      	lsls	r2, r2, #4
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005450:	0212      	lsls	r2, r2, #8
 8005452:	4311      	orrs	r1, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005458:	0852      	lsrs	r2, r2, #1
 800545a:	3a01      	subs	r2, #1
 800545c:	0552      	lsls	r2, r2, #21
 800545e:	4311      	orrs	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005464:	0852      	lsrs	r2, r2, #1
 8005466:	3a01      	subs	r2, #1
 8005468:	0652      	lsls	r2, r2, #25
 800546a:	4311      	orrs	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005470:	0912      	lsrs	r2, r2, #4
 8005472:	0452      	lsls	r2, r2, #17
 8005474:	430a      	orrs	r2, r1
 8005476:	4941      	ldr	r1, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005478:	4313      	orrs	r3, r2
 800547a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800547c:	4b3f      	ldr	r3, [pc, #252]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a3e      	ldr	r2, [pc, #248]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005486:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005488:	4b3c      	ldr	r3, [pc, #240]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4a3b      	ldr	r2, [pc, #236]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800548e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005492:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005494:	f7fd faea 	bl	8002a6c <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fd fae6 	bl	8002a6c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e062      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	4b33      	ldr	r3, [pc, #204]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054ba:	e05a      	b.n	8005572 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e059      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c0:	4b2e      	ldr	r3, [pc, #184]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d152      	bne.n	8005572 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2a      	ldr	r2, [pc, #168]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054d8:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 80054de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054e4:	f7fd fac2 	bl	8002a6c <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fd fabe 	bl	8002a6c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e03a      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054fe:	4b1f      	ldr	r3, [pc, #124]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x734>
 800550a:	e032      	b.n	8005572 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d02d      	beq.n	800556e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	4a13      	ldr	r2, [pc, #76]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005530:	f023 0303 	bic.w	r3, r3, #3
 8005534:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 800553c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005544:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005546:	f7fd fa91 	bl	8002a6c <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554e:	f7fd fa8d 	bl	8002a6c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e009      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_RCC_OscConfig+0x7c4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <HAL_RCC_OscConfig+0x796>
 800556c:	e001      	b.n	8005572 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40021000 	.word	0x40021000
 8005580:	f99d808c 	.word	0xf99d808c

08005584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0c8      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005598:	4b66      	ldr	r3, [pc, #408]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d910      	bls.n	80055c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b63      	ldr	r3, [pc, #396]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0207 	bic.w	r2, r3, #7
 80055ae:	4961      	ldr	r1, [pc, #388]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b5f      	ldr	r3, [pc, #380]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0b0      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d04c      	beq.n	800566e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d107      	bne.n	80055ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055dc:	4b56      	ldr	r3, [pc, #344]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d121      	bne.n	800562c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e09e      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d107      	bne.n	8005604 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f4:	4b50      	ldr	r3, [pc, #320]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d115      	bne.n	800562c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e092      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d107      	bne.n	800561c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800560c:	4b4a      	ldr	r3, [pc, #296]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d109      	bne.n	800562c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e086      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800561c:	4b46      	ldr	r3, [pc, #280]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e07e      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800562c:	4b42      	ldr	r3, [pc, #264]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 0203 	bic.w	r2, r3, #3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	493f      	ldr	r1, [pc, #252]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563e:	f7fd fa15 	bl	8002a6c <HAL_GetTick>
 8005642:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005644:	e00a      	b.n	800565c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005646:	f7fd fa11 	bl	8002a6c <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	f241 3288 	movw	r2, #5000	; 0x1388
 8005654:	4293      	cmp	r3, r2
 8005656:	d901      	bls.n	800565c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e066      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565c:	4b36      	ldr	r3, [pc, #216]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 020c 	and.w	r2, r3, #12
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	429a      	cmp	r2, r3
 800566c:	d1eb      	bne.n	8005646 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	492c      	ldr	r1, [pc, #176]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d210      	bcs.n	80056bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b26      	ldr	r3, [pc, #152]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 0207 	bic.w	r2, r3, #7
 80056a2:	4924      	ldr	r1, [pc, #144]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056aa:	4b22      	ldr	r3, [pc, #136]	; (8005734 <HAL_RCC_ClockConfig+0x1b0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e036      	b.n	800572a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d008      	beq.n	80056da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4918      	ldr	r1, [pc, #96]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4910      	ldr	r1, [pc, #64]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056fa:	f000 f825 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 80056fe:	4602      	mov	r2, r0
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <HAL_RCC_ClockConfig+0x1b4>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	490c      	ldr	r1, [pc, #48]	; (800573c <HAL_RCC_ClockConfig+0x1b8>)
 800570c:	5ccb      	ldrb	r3, [r1, r3]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fc fd12 	bl	8002148 <HAL_InitTick>
 8005724:	4603      	mov	r3, r0
 8005726:	72fb      	strb	r3, [r7, #11]

  return status;
 8005728:	7afb      	ldrb	r3, [r7, #11]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40022000 	.word	0x40022000
 8005738:	40021000 	.word	0x40021000
 800573c:	0800d814 	.word	0x0800d814
 8005740:	20000000 	.word	0x20000000
 8005744:	20000004 	.word	0x20000004

08005748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	2300      	movs	r3, #0
 8005754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005760:	4b3b      	ldr	r3, [pc, #236]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_GetSysClockFreq+0x34>
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b0c      	cmp	r3, #12
 8005774:	d121      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d11e      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d107      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005788:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 800578a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e005      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005798:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057a4:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10d      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d102      	bne.n	80057c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057c0:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_RCC_GetSysClockFreq+0x110>)
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	e004      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <HAL_RCC_GetSysClockFreq+0x114>)
 80057ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d134      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057d6:	4b1e      	ldr	r3, [pc, #120]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d003      	beq.n	80057ee <HAL_RCC_GetSysClockFreq+0xa6>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d003      	beq.n	80057f4 <HAL_RCC_GetSysClockFreq+0xac>
 80057ec:	e005      	b.n	80057fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_RCC_GetSysClockFreq+0x110>)
 80057f0:	617b      	str	r3, [r7, #20]
      break;
 80057f2:	e005      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057f4:	4b19      	ldr	r3, [pc, #100]	; (800585c <HAL_RCC_GetSysClockFreq+0x114>)
 80057f6:	617b      	str	r3, [r7, #20]
      break;
 80057f8:	e002      	b.n	8005800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	617b      	str	r3, [r7, #20]
      break;
 80057fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005800:	4b13      	ldr	r3, [pc, #76]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	3301      	adds	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800580e:	4b10      	ldr	r3, [pc, #64]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	fb02 f203 	mul.w	r2, r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005826:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <HAL_RCC_GetSysClockFreq+0x108>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	0e5b      	lsrs	r3, r3, #25
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	3301      	adds	r3, #1
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005840:	69bb      	ldr	r3, [r7, #24]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3724      	adds	r7, #36	; 0x24
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	0800d82c 	.word	0x0800d82c
 8005858:	00f42400 	.word	0x00f42400
 800585c:	007a1200 	.word	0x007a1200

08005860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005864:	4b03      	ldr	r3, [pc, #12]	; (8005874 <HAL_RCC_GetHCLKFreq+0x14>)
 8005866:	681b      	ldr	r3, [r3, #0]
}
 8005868:	4618      	mov	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000000 	.word	0x20000000

08005878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800587c:	f7ff fff0 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8005880:	4602      	mov	r2, r0
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	4904      	ldr	r1, [pc, #16]	; (80058a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800588e:	5ccb      	ldrb	r3, [r1, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40021000 	.word	0x40021000
 80058a0:	0800d824 	.word	0x0800d824

080058a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058a8:	f7ff ffda 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0adb      	lsrs	r3, r3, #11
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4904      	ldr	r1, [pc, #16]	; (80058cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0800d824 	.word	0x0800d824

080058d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	220f      	movs	r2, #15
 80058de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCC_GetClockConfig+0x5c>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0203 	and.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_RCC_GetClockConfig+0x5c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_RCC_GetClockConfig+0x5c>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_RCC_GetClockConfig+0x5c>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005912:	4b07      	ldr	r3, [pc, #28]	; (8005930 <HAL_RCC_GetClockConfig+0x60>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0207 	and.w	r2, r3, #7
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	601a      	str	r2, [r3, #0]
}
 800591e:	bf00      	nop
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	40022000 	.word	0x40022000

08005934 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005940:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800594c:	f7ff f9c0 	bl	8004cd0 <HAL_PWREx_GetVoltageRange>
 8005950:	6178      	str	r0, [r7, #20]
 8005952:	e014      	b.n	800597e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4a24      	ldr	r2, [pc, #144]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
 8005960:	4b22      	ldr	r3, [pc, #136]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800596c:	f7ff f9b0 	bl	8004cd0 <HAL_PWREx_GetVoltageRange>
 8005970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005972:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005984:	d10b      	bne.n	800599e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d919      	bls.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2ba0      	cmp	r3, #160	; 0xa0
 8005990:	d902      	bls.n	8005998 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005992:	2302      	movs	r3, #2
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	e013      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005998:	2301      	movs	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e010      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d902      	bls.n	80059aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059a4:	2303      	movs	r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e00a      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d102      	bne.n	80059b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059b0:	2302      	movs	r3, #2
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	e004      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b70      	cmp	r3, #112	; 0x70
 80059ba:	d101      	bne.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059bc:	2301      	movs	r3, #1
 80059be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 0207 	bic.w	r2, r3, #7
 80059c8:	4909      	ldr	r1, [pc, #36]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d001      	beq.n	80059e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40022000 	.word	0x40022000

080059f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059fc:	2300      	movs	r3, #0
 80059fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a00:	2300      	movs	r3, #0
 8005a02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d041      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a18:	d02a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a1e:	d824      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a24:	d008      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a2a:	d81e      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a34:	d010      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a36:	e018      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a38:	4b86      	ldr	r3, [pc, #536]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a85      	ldr	r2, [pc, #532]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a44:	e015      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 facb 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a56:	e00c      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3320      	adds	r3, #32
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fbb6 	bl	80061d0 <RCCEx_PLLSAI2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a68:	e003      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	74fb      	strb	r3, [r7, #19]
      break;
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a72:	7cfb      	ldrb	r3, [r7, #19]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10b      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a78:	4b76      	ldr	r3, [pc, #472]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	4973      	ldr	r1, [pc, #460]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a8e:	e001      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d041      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aa8:	d02a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005aaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005aae:	d824      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ab4:	d008      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005aba:	d81e      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ac4:	d010      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ac6:	e018      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac8:	4b62      	ldr	r3, [pc, #392]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a61      	ldr	r2, [pc, #388]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ad4:	e015      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fa83 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ae6:	e00c      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3320      	adds	r3, #32
 8005aec:	2100      	movs	r1, #0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fb6e 	bl	80061d0 <RCCEx_PLLSAI2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	74fb      	strb	r3, [r7, #19]
      break;
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10b      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b08:	4b52      	ldr	r3, [pc, #328]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b16:	494f      	ldr	r1, [pc, #316]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b1e:	e001      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b20:	7cfb      	ldrb	r3, [r7, #19]
 8005b22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80a0 	beq.w	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b32:	2300      	movs	r3, #0
 8005b34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4c:	4b41      	ldr	r3, [pc, #260]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6593      	str	r3, [r2, #88]	; 0x58
 8005b58:	4b3e      	ldr	r3, [pc, #248]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b64:	2301      	movs	r3, #1
 8005b66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b68:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a3a      	ldr	r2, [pc, #232]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b74:	f7fc ff7a 	bl	8002a6c <HAL_GetTick>
 8005b78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b7a:	e009      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7c:	f7fc ff76 	bl	8002a6c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d902      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	74fb      	strb	r3, [r7, #19]
        break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b90:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ef      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d15c      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01f      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d019      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bcc:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fc ff35 	bl	8002a6c <HAL_GetTick>
 8005c02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c04:	e00b      	b.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c06:	f7fc ff31 	bl	8002a6c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d902      	bls.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c1c:	e006      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ec      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005c2c:	7cfb      	ldrb	r3, [r7, #19]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10c      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c42:	4904      	ldr	r1, [pc, #16]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c4a:	e009      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	74bb      	strb	r3, [r7, #18]
 8005c50:	e006      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000
 8005c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c60:	7c7b      	ldrb	r3, [r7, #17]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d105      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c66:	4b9e      	ldr	r3, [pc, #632]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	4a9d      	ldr	r2, [pc, #628]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c7e:	4b98      	ldr	r3, [pc, #608]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f023 0203 	bic.w	r2, r3, #3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	4994      	ldr	r1, [pc, #592]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca0:	4b8f      	ldr	r3, [pc, #572]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f023 020c 	bic.w	r2, r3, #12
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	498c      	ldr	r1, [pc, #560]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0304 	and.w	r3, r3, #4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc2:	4b87      	ldr	r3, [pc, #540]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	4983      	ldr	r1, [pc, #524]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ce4:	4b7e      	ldr	r3, [pc, #504]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	497b      	ldr	r1, [pc, #492]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d06:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d14:	4972      	ldr	r1, [pc, #456]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0320 	and.w	r3, r3, #32
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d28:	4b6d      	ldr	r3, [pc, #436]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d36:	496a      	ldr	r1, [pc, #424]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d4a:	4b65      	ldr	r3, [pc, #404]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	4961      	ldr	r1, [pc, #388]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d6c:	4b5c      	ldr	r3, [pc, #368]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	4959      	ldr	r1, [pc, #356]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d8e:	4b54      	ldr	r3, [pc, #336]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	4950      	ldr	r1, [pc, #320]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db0:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	4948      	ldr	r1, [pc, #288]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dd2:	4b43      	ldr	r3, [pc, #268]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	493f      	ldr	r1, [pc, #252]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d028      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df4:	4b3a      	ldr	r3, [pc, #232]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e02:	4937      	ldr	r1, [pc, #220]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e12:	d106      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e14:	4b32      	ldr	r3, [pc, #200]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a31      	ldr	r2, [pc, #196]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1e:	60d3      	str	r3, [r2, #12]
 8005e20:	e011      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2a:	d10c      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 f8d8 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e3c:	7cfb      	ldrb	r3, [r7, #19]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005e42:	7cfb      	ldrb	r3, [r7, #19]
 8005e44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d028      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e52:	4b23      	ldr	r3, [pc, #140]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	491f      	ldr	r1, [pc, #124]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e70:	d106      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e7c:	60d3      	str	r3, [r2, #12]
 8005e7e:	e011      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	2101      	movs	r1, #1
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f8a9 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e9a:	7cfb      	ldrb	r3, [r7, #19]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ea0:	7cfb      	ldrb	r3, [r7, #19]
 8005ea2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02b      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ebe:	4908      	ldr	r1, [pc, #32]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ece:	d109      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a02      	ldr	r2, [pc, #8]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
 8005edc:	e014      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ede:	bf00      	nop
 8005ee0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f877 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
 8005f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02f      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f14:	4b2b      	ldr	r3, [pc, #172]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f22:	4928      	ldr	r1, [pc, #160]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f32:	d10d      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3304      	adds	r3, #4
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 f854 	bl	8005fe8 <RCCEx_PLLSAI1_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d014      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f4a:	7cfb      	ldrb	r3, [r7, #19]
 8005f4c:	74bb      	strb	r3, [r7, #18]
 8005f4e:	e011      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	2102      	movs	r1, #2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 f935 	bl	80061d0 <RCCEx_PLLSAI2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f6a:	7cfb      	ldrb	r3, [r7, #19]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005f70:	7cfb      	ldrb	r3, [r7, #19]
 8005f72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f80:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f8e:	490d      	ldr	r1, [pc, #52]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb2:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005fba:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40021000 	.word	0x40021000

08005fc8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ff6:	4b75      	ldr	r3, [pc, #468]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d018      	beq.n	8006034 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006002:	4b72      	ldr	r3, [pc, #456]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0203 	and.w	r2, r3, #3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d10d      	bne.n	800602e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
       ||
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800601a:	4b6c      	ldr	r3, [pc, #432]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
       ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d047      	beq.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e044      	b.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b03      	cmp	r3, #3
 800603a:	d018      	beq.n	800606e <RCCEx_PLLSAI1_Config+0x86>
 800603c:	2b03      	cmp	r3, #3
 800603e:	d825      	bhi.n	800608c <RCCEx_PLLSAI1_Config+0xa4>
 8006040:	2b01      	cmp	r3, #1
 8006042:	d002      	beq.n	800604a <RCCEx_PLLSAI1_Config+0x62>
 8006044:	2b02      	cmp	r3, #2
 8006046:	d009      	beq.n	800605c <RCCEx_PLLSAI1_Config+0x74>
 8006048:	e020      	b.n	800608c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800604a:	4b60      	ldr	r3, [pc, #384]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11d      	bne.n	8006092 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800605a:	e01a      	b.n	8006092 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800605c:	4b5b      	ldr	r3, [pc, #364]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d116      	bne.n	8006096 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606c:	e013      	b.n	8006096 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800606e:	4b57      	ldr	r3, [pc, #348]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800607a:	4b54      	ldr	r3, [pc, #336]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800608a:	e006      	b.n	800609a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e004      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800609a:	bf00      	nop
    }

    if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060a2:	4b4a      	ldr	r3, [pc, #296]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	430b      	orrs	r3, r1
 80060b8:	4944      	ldr	r1, [pc, #272]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d17d      	bne.n	80061c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060c4:	4b41      	ldr	r3, [pc, #260]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a40      	ldr	r2, [pc, #256]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d0:	f7fc fccc 	bl	8002a6c <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060d6:	e009      	b.n	80060ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060d8:	f7fc fcc8 	bl	8002a6c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d902      	bls.n	80060ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ea:	e005      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80060ec:	4b37      	ldr	r3, [pc, #220]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1ef      	bne.n	80060d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d160      	bne.n	80061c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d111      	bne.n	8006128 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006104:	4b31      	ldr	r3, [pc, #196]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800610c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6892      	ldr	r2, [r2, #8]
 8006114:	0211      	lsls	r1, r2, #8
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	0912      	lsrs	r2, r2, #4
 800611c:	0452      	lsls	r2, r2, #17
 800611e:	430a      	orrs	r2, r1
 8006120:	492a      	ldr	r1, [pc, #168]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	610b      	str	r3, [r1, #16]
 8006126:	e027      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d112      	bne.n	8006154 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800612e:	4b27      	ldr	r3, [pc, #156]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006136:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6892      	ldr	r2, [r2, #8]
 800613e:	0211      	lsls	r1, r2, #8
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6912      	ldr	r2, [r2, #16]
 8006144:	0852      	lsrs	r2, r2, #1
 8006146:	3a01      	subs	r2, #1
 8006148:	0552      	lsls	r2, r2, #21
 800614a:	430a      	orrs	r2, r1
 800614c:	491f      	ldr	r1, [pc, #124]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800614e:	4313      	orrs	r3, r2
 8006150:	610b      	str	r3, [r1, #16]
 8006152:	e011      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006154:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800615c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	0211      	lsls	r1, r2, #8
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6952      	ldr	r2, [r2, #20]
 800616a:	0852      	lsrs	r2, r2, #1
 800616c:	3a01      	subs	r2, #1
 800616e:	0652      	lsls	r2, r2, #25
 8006170:	430a      	orrs	r2, r1
 8006172:	4916      	ldr	r1, [pc, #88]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006174:	4313      	orrs	r3, r2
 8006176:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006178:	4b14      	ldr	r3, [pc, #80]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a13      	ldr	r2, [pc, #76]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800617e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fc fc72 	bl	8002a6c <HAL_GetTick>
 8006188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800618a:	e009      	b.n	80061a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800618c:	f7fc fc6e 	bl	8002a6c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d902      	bls.n	80061a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	73fb      	strb	r3, [r7, #15]
          break;
 800619e:	e005      	b.n	80061ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061a0:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0ef      	beq.n	800618c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d106      	bne.n	80061c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	4904      	ldr	r1, [pc, #16]	; (80061cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40021000 	.word	0x40021000

080061d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80061de:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d018      	beq.n	800621c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80061ea:	4b67      	ldr	r3, [pc, #412]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f003 0203 	and.w	r2, r3, #3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d10d      	bne.n	8006216 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
       ||
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006202:	4b61      	ldr	r3, [pc, #388]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	091b      	lsrs	r3, r3, #4
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
       ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d047      	beq.n	80062a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	e044      	b.n	80062a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d018      	beq.n	8006256 <RCCEx_PLLSAI2_Config+0x86>
 8006224:	2b03      	cmp	r3, #3
 8006226:	d825      	bhi.n	8006274 <RCCEx_PLLSAI2_Config+0xa4>
 8006228:	2b01      	cmp	r3, #1
 800622a:	d002      	beq.n	8006232 <RCCEx_PLLSAI2_Config+0x62>
 800622c:	2b02      	cmp	r3, #2
 800622e:	d009      	beq.n	8006244 <RCCEx_PLLSAI2_Config+0x74>
 8006230:	e020      	b.n	8006274 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006232:	4b55      	ldr	r3, [pc, #340]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11d      	bne.n	800627a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006242:	e01a      	b.n	800627a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006244:	4b50      	ldr	r3, [pc, #320]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624c:	2b00      	cmp	r3, #0
 800624e:	d116      	bne.n	800627e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006254:	e013      	b.n	800627e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006256:	4b4c      	ldr	r3, [pc, #304]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006262:	4b49      	ldr	r3, [pc, #292]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006272:	e006      	b.n	8006282 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e004      	b.n	8006284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006282:	bf00      	nop
    }

    if(status == HAL_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800628a:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6819      	ldr	r1, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	3b01      	subs	r3, #1
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	430b      	orrs	r3, r1
 80062a0:	4939      	ldr	r1, [pc, #228]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d167      	bne.n	800637c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80062ac:	4b36      	ldr	r3, [pc, #216]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a35      	ldr	r2, [pc, #212]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b8:	f7fc fbd8 	bl	8002a6c <HAL_GetTick>
 80062bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062be:	e009      	b.n	80062d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80062c0:	f7fc fbd4 	bl	8002a6c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d902      	bls.n	80062d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	73fb      	strb	r3, [r7, #15]
        break;
 80062d2:	e005      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80062d4:	4b2c      	ldr	r3, [pc, #176]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1ef      	bne.n	80062c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d14a      	bne.n	800637c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80062ec:	4b26      	ldr	r3, [pc, #152]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6892      	ldr	r2, [r2, #8]
 80062fc:	0211      	lsls	r1, r2, #8
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68d2      	ldr	r2, [r2, #12]
 8006302:	0912      	lsrs	r2, r2, #4
 8006304:	0452      	lsls	r2, r2, #17
 8006306:	430a      	orrs	r2, r1
 8006308:	491f      	ldr	r1, [pc, #124]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800630a:	4313      	orrs	r3, r2
 800630c:	614b      	str	r3, [r1, #20]
 800630e:	e011      	b.n	8006334 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006310:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6892      	ldr	r2, [r2, #8]
 8006320:	0211      	lsls	r1, r2, #8
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6912      	ldr	r2, [r2, #16]
 8006326:	0852      	lsrs	r2, r2, #1
 8006328:	3a01      	subs	r2, #1
 800632a:	0652      	lsls	r2, r2, #25
 800632c:	430a      	orrs	r2, r1
 800632e:	4916      	ldr	r1, [pc, #88]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006330:	4313      	orrs	r3, r2
 8006332:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006334:	4b14      	ldr	r3, [pc, #80]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a13      	ldr	r2, [pc, #76]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fc fb94 	bl	8002a6c <HAL_GetTick>
 8006344:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006346:	e009      	b.n	800635c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006348:	f7fc fb90 	bl	8002a6c <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	73fb      	strb	r3, [r7, #15]
          break;
 800635a:	e005      	b.n	8006368 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0ef      	beq.n	8006348 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	4904      	ldr	r1, [pc, #16]	; (8006388 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006378:	4313      	orrs	r3, r2
 800637a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40021000 	.word	0x40021000

0800638c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e042      	b.n	8006424 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	795b      	ldrb	r3, [r3, #5]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7fb fe5c 	bl	800206c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f042 0204 	orr.w	r2, r2, #4
 80063c8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d104      	bne.n	80063e2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2204      	movs	r2, #4
 80063dc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e020      	b.n	8006424 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80063e2:	f7fc fb43 	bl	8002a6c <HAL_GetTick>
 80063e6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80063e8:	e00e      	b.n	8006408 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80063ea:	f7fc fb3f 	bl	8002a6c <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d907      	bls.n	8006408 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2204      	movs	r2, #4
 80063fc:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e00d      	b.n	8006424 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d0e9      	beq.n	80063ea <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	791b      	ldrb	r3, [r3, #4]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006442:	2302      	movs	r3, #2
 8006444:	e03d      	b.n	80064c2 <HAL_RNG_GenerateRandomNumber+0x96>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	795b      	ldrb	r3, [r3, #5]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d12c      	bne.n	80064b0 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800645c:	f7fc fb06 	bl	8002a6c <HAL_GetTick>
 8006460:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006462:	e011      	b.n	8006488 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006464:	f7fc fb02 	bl	8002a6c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d90a      	bls.n	8006488 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e01c      	b.n	80064c2 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d1e6      	bne.n	8006464 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	715a      	strb	r2, [r3, #5]
 80064ae:	e004      	b.n	80064ba <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2204      	movs	r2, #4
 80064b4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	711a      	strb	r2, [r3, #4]

  return status;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e049      	b.n	8006570 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f841 	bl	8006578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 f9f7 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2201      	movs	r2, #1
 800653a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d001      	beq.n	80065a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e04f      	b.n	8006644 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a23      	ldr	r2, [pc, #140]	; (8006650 <HAL_TIM_Base_Start_IT+0xc4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01d      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d018      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_Base_Start_IT+0xc8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIM_Base_Start_IT+0xcc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_TIM_Base_Start_IT+0xd0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <HAL_TIM_Base_Start_IT+0xd4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_TIM_Base_Start_IT+0x76>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a19      	ldr	r2, [pc, #100]	; (8006664 <HAL_TIM_Base_Start_IT+0xd8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d115      	bne.n	800662e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4b17      	ldr	r3, [pc, #92]	; (8006668 <HAL_TIM_Base_Start_IT+0xdc>)
 800660a:	4013      	ands	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b06      	cmp	r3, #6
 8006612:	d015      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0xb4>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661a:	d011      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	e008      	b.n	8006640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	e000      	b.n	8006642 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	00010007 	.word	0x00010007

0800666c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b02      	cmp	r3, #2
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0202 	mvn.w	r2, #2
 8006698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f905 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8f7 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f908 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0204 	mvn.w	r2, #4
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8db 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8cd 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8de 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b08      	cmp	r3, #8
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b08      	cmp	r3, #8
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0208 	mvn.w	r2, #8
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f8b1 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8a3 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f8b4 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b10      	cmp	r3, #16
 800677c:	d122      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b10      	cmp	r3, #16
 800678a:	d11b      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0210 	mvn.w	r2, #16
 8006794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2208      	movs	r2, #8
 800679a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f887 	bl	80068be <HAL_TIM_IC_CaptureCallback>
 80067b0:	e005      	b.n	80067be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f879 	bl	80068aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f88a 	bl	80068d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0201 	mvn.w	r2, #1
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fb fbf6 	bl	8001fdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f914 	bl	8006a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682a:	d10e      	bne.n	800684a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d107      	bne.n	800684a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f907 	bl	8006a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	d10e      	bne.n	8006876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d107      	bne.n	8006876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800686e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f838 	bl	80068e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b20      	cmp	r3, #32
 8006882:	d10e      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b20      	cmp	r3, #32
 8006890:	d107      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0220 	mvn.w	r2, #32
 800689a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f8c7 	bl	8006a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00f      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3d      	ldr	r2, [pc, #244]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3c      	ldr	r2, [pc, #240]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3b      	ldr	r2, [pc, #236]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01f      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695c:	d01b      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2c      	ldr	r2, [pc, #176]	; (8006a14 <TIM_Base_SetConfig+0x118>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d017      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2b      	ldr	r2, [pc, #172]	; (8006a18 <TIM_Base_SetConfig+0x11c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <TIM_Base_SetConfig+0x120>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a29      	ldr	r2, [pc, #164]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a28      	ldr	r2, [pc, #160]	; (8006a24 <TIM_Base_SetConfig+0x128>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a27      	ldr	r2, [pc, #156]	; (8006a28 <TIM_Base_SetConfig+0x12c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_Base_SetConfig+0x9a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <TIM_Base_SetConfig+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d108      	bne.n	80069a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <TIM_Base_SetConfig+0x114>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00f      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <TIM_Base_SetConfig+0x124>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00b      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <TIM_Base_SetConfig+0x128>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <TIM_Base_SetConfig+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0xf8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a0f      	ldr	r2, [pc, #60]	; (8006a2c <TIM_Base_SetConfig+0x130>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d103      	bne.n	80069fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691a      	ldr	r2, [r3, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	615a      	str	r2, [r3, #20]
}
 8006a02:	bf00      	nop
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40000400 	.word	0x40000400
 8006a18:	40000800 	.word	0x40000800
 8006a1c:	40000c00 	.word	0x40000c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e040      	b.n	8006b00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fb fc34 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	; 0x24
 8006a98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f8c0 	bl	8006c30 <UART_SetConfig>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e022      	b.n	8006b00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb3e 	bl	8007144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ad6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ae6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fbc5 	bl	8007288 <UART_CheckIdleState>
 8006afe:	4603      	mov	r3, r0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	603b      	str	r3, [r7, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	f040 8082 	bne.w	8006c26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <HAL_UART_Transmit+0x26>
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e07a      	b.n	8006c28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UART_Transmit+0x38>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e073      	b.n	8006c28 <HAL_UART_Transmit+0x120>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2221      	movs	r2, #33	; 0x21
 8006b54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b56:	f7fb ff89 	bl	8002a6c <HAL_GetTick>
 8006b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	88fa      	ldrh	r2, [r7, #6]
 8006b60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	88fa      	ldrh	r2, [r7, #6]
 8006b68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b74:	d108      	bne.n	8006b88 <HAL_UART_Transmit+0x80>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d104      	bne.n	8006b88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e003      	b.n	8006b90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b98:	e02d      	b.n	8006bf6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2180      	movs	r1, #128	; 0x80
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 fbb8 	bl	800731a <UART_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e039      	b.n	8006c28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	881a      	ldrh	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	3302      	adds	r3, #2
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	e008      	b.n	8006be4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3301      	adds	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1cb      	bne.n	8006b9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2140      	movs	r1, #64	; 0x40
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fb84 	bl	800731a <UART_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e005      	b.n	8006c28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e000      	b.n	8006c28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006c26:	2302      	movs	r3, #2
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c30:	b5b0      	push	{r4, r5, r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4bad      	ldr	r3, [pc, #692]	; (8006f10 <UART_SetConfig+0x2e0>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	69f9      	ldr	r1, [r7, #28]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4aa2      	ldr	r2, [pc, #648]	; (8006f14 <UART_SetConfig+0x2e4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a99      	ldr	r2, [pc, #612]	; (8006f18 <UART_SetConfig+0x2e8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d121      	bne.n	8006cfa <UART_SetConfig+0xca>
 8006cb6:	4b99      	ldr	r3, [pc, #612]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d817      	bhi.n	8006cf4 <UART_SetConfig+0xc4>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <UART_SetConfig+0x9c>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006ce3 	.word	0x08006ce3
 8006cd8:	08006cef 	.word	0x08006cef
 8006cdc:	2301      	movs	r3, #1
 8006cde:	76fb      	strb	r3, [r7, #27]
 8006ce0:	e0e7      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	76fb      	strb	r3, [r7, #27]
 8006ce6:	e0e4      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	76fb      	strb	r3, [r7, #27]
 8006cec:	e0e1      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006cee:	2308      	movs	r3, #8
 8006cf0:	76fb      	strb	r3, [r7, #27]
 8006cf2:	e0de      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	76fb      	strb	r3, [r7, #27]
 8006cf8:	e0db      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a88      	ldr	r2, [pc, #544]	; (8006f20 <UART_SetConfig+0x2f0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d132      	bne.n	8006d6a <UART_SetConfig+0x13a>
 8006d04:	4b85      	ldr	r3, [pc, #532]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0a:	f003 030c 	and.w	r3, r3, #12
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d828      	bhi.n	8006d64 <UART_SetConfig+0x134>
 8006d12:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <UART_SetConfig+0xe8>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d65 	.word	0x08006d65
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d59 	.word	0x08006d59
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d53 	.word	0x08006d53
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d65 	.word	0x08006d65
 8006d48:	08006d5f 	.word	0x08006d5f
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	76fb      	strb	r3, [r7, #27]
 8006d50:	e0af      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d52:	2302      	movs	r3, #2
 8006d54:	76fb      	strb	r3, [r7, #27]
 8006d56:	e0ac      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	76fb      	strb	r3, [r7, #27]
 8006d5c:	e0a9      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	76fb      	strb	r3, [r7, #27]
 8006d62:	e0a6      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d64:	2310      	movs	r3, #16
 8006d66:	76fb      	strb	r3, [r7, #27]
 8006d68:	e0a3      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a6d      	ldr	r2, [pc, #436]	; (8006f24 <UART_SetConfig+0x2f4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d120      	bne.n	8006db6 <UART_SetConfig+0x186>
 8006d74:	4b69      	ldr	r3, [pc, #420]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d7e:	2b30      	cmp	r3, #48	; 0x30
 8006d80:	d013      	beq.n	8006daa <UART_SetConfig+0x17a>
 8006d82:	2b30      	cmp	r3, #48	; 0x30
 8006d84:	d814      	bhi.n	8006db0 <UART_SetConfig+0x180>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d009      	beq.n	8006d9e <UART_SetConfig+0x16e>
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d810      	bhi.n	8006db0 <UART_SetConfig+0x180>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <UART_SetConfig+0x168>
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d006      	beq.n	8006da4 <UART_SetConfig+0x174>
 8006d96:	e00b      	b.n	8006db0 <UART_SetConfig+0x180>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	76fb      	strb	r3, [r7, #27]
 8006d9c:	e089      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006d9e:	2302      	movs	r3, #2
 8006da0:	76fb      	strb	r3, [r7, #27]
 8006da2:	e086      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006da4:	2304      	movs	r3, #4
 8006da6:	76fb      	strb	r3, [r7, #27]
 8006da8:	e083      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006daa:	2308      	movs	r3, #8
 8006dac:	76fb      	strb	r3, [r7, #27]
 8006dae:	e080      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006db0:	2310      	movs	r3, #16
 8006db2:	76fb      	strb	r3, [r7, #27]
 8006db4:	e07d      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a5b      	ldr	r2, [pc, #364]	; (8006f28 <UART_SetConfig+0x2f8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d120      	bne.n	8006e02 <UART_SetConfig+0x1d2>
 8006dc0:	4b56      	ldr	r3, [pc, #344]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dca:	2bc0      	cmp	r3, #192	; 0xc0
 8006dcc:	d013      	beq.n	8006df6 <UART_SetConfig+0x1c6>
 8006dce:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd0:	d814      	bhi.n	8006dfc <UART_SetConfig+0x1cc>
 8006dd2:	2b80      	cmp	r3, #128	; 0x80
 8006dd4:	d009      	beq.n	8006dea <UART_SetConfig+0x1ba>
 8006dd6:	2b80      	cmp	r3, #128	; 0x80
 8006dd8:	d810      	bhi.n	8006dfc <UART_SetConfig+0x1cc>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <UART_SetConfig+0x1b4>
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d006      	beq.n	8006df0 <UART_SetConfig+0x1c0>
 8006de2:	e00b      	b.n	8006dfc <UART_SetConfig+0x1cc>
 8006de4:	2300      	movs	r3, #0
 8006de6:	76fb      	strb	r3, [r7, #27]
 8006de8:	e063      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006dea:	2302      	movs	r3, #2
 8006dec:	76fb      	strb	r3, [r7, #27]
 8006dee:	e060      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006df0:	2304      	movs	r3, #4
 8006df2:	76fb      	strb	r3, [r7, #27]
 8006df4:	e05d      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006df6:	2308      	movs	r3, #8
 8006df8:	76fb      	strb	r3, [r7, #27]
 8006dfa:	e05a      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	76fb      	strb	r3, [r7, #27]
 8006e00:	e057      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a49      	ldr	r2, [pc, #292]	; (8006f2c <UART_SetConfig+0x2fc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d125      	bne.n	8006e58 <UART_SetConfig+0x228>
 8006e0c:	4b43      	ldr	r3, [pc, #268]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e1a:	d017      	beq.n	8006e4c <UART_SetConfig+0x21c>
 8006e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e20:	d817      	bhi.n	8006e52 <UART_SetConfig+0x222>
 8006e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e26:	d00b      	beq.n	8006e40 <UART_SetConfig+0x210>
 8006e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2c:	d811      	bhi.n	8006e52 <UART_SetConfig+0x222>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <UART_SetConfig+0x20a>
 8006e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e36:	d006      	beq.n	8006e46 <UART_SetConfig+0x216>
 8006e38:	e00b      	b.n	8006e52 <UART_SetConfig+0x222>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	76fb      	strb	r3, [r7, #27]
 8006e3e:	e038      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e40:	2302      	movs	r3, #2
 8006e42:	76fb      	strb	r3, [r7, #27]
 8006e44:	e035      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e46:	2304      	movs	r3, #4
 8006e48:	76fb      	strb	r3, [r7, #27]
 8006e4a:	e032      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	76fb      	strb	r3, [r7, #27]
 8006e50:	e02f      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e52:	2310      	movs	r3, #16
 8006e54:	76fb      	strb	r3, [r7, #27]
 8006e56:	e02c      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2d      	ldr	r2, [pc, #180]	; (8006f14 <UART_SetConfig+0x2e4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d125      	bne.n	8006eae <UART_SetConfig+0x27e>
 8006e62:	4b2e      	ldr	r3, [pc, #184]	; (8006f1c <UART_SetConfig+0x2ec>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e70:	d017      	beq.n	8006ea2 <UART_SetConfig+0x272>
 8006e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e76:	d817      	bhi.n	8006ea8 <UART_SetConfig+0x278>
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7c:	d00b      	beq.n	8006e96 <UART_SetConfig+0x266>
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e82:	d811      	bhi.n	8006ea8 <UART_SetConfig+0x278>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <UART_SetConfig+0x260>
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8c:	d006      	beq.n	8006e9c <UART_SetConfig+0x26c>
 8006e8e:	e00b      	b.n	8006ea8 <UART_SetConfig+0x278>
 8006e90:	2300      	movs	r3, #0
 8006e92:	76fb      	strb	r3, [r7, #27]
 8006e94:	e00d      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e96:	2302      	movs	r3, #2
 8006e98:	76fb      	strb	r3, [r7, #27]
 8006e9a:	e00a      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	76fb      	strb	r3, [r7, #27]
 8006ea0:	e007      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	76fb      	strb	r3, [r7, #27]
 8006ea6:	e004      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	76fb      	strb	r3, [r7, #27]
 8006eac:	e001      	b.n	8006eb2 <UART_SetConfig+0x282>
 8006eae:	2310      	movs	r3, #16
 8006eb0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a17      	ldr	r2, [pc, #92]	; (8006f14 <UART_SetConfig+0x2e4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f040 8087 	bne.w	8006fcc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ebe:	7efb      	ldrb	r3, [r7, #27]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d837      	bhi.n	8006f34 <UART_SetConfig+0x304>
 8006ec4:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <UART_SetConfig+0x29c>)
 8006ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eca:	bf00      	nop
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006f35 	.word	0x08006f35
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f35 	.word	0x08006f35
 8006edc:	08006eff 	.word	0x08006eff
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	08006f35 	.word	0x08006f35
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f07 	.word	0x08006f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef0:	f7fe fcc2 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 8006ef4:	6178      	str	r0, [r7, #20]
        break;
 8006ef6:	e022      	b.n	8006f3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef8:	4b0d      	ldr	r3, [pc, #52]	; (8006f30 <UART_SetConfig+0x300>)
 8006efa:	617b      	str	r3, [r7, #20]
        break;
 8006efc:	e01f      	b.n	8006f3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efe:	f7fe fc23 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8006f02:	6178      	str	r0, [r7, #20]
        break;
 8006f04:	e01b      	b.n	8006f3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f0a:	617b      	str	r3, [r7, #20]
        break;
 8006f0c:	e017      	b.n	8006f3e <UART_SetConfig+0x30e>
 8006f0e:	bf00      	nop
 8006f10:	efff69f3 	.word	0xefff69f3
 8006f14:	40008000 	.word	0x40008000
 8006f18:	40013800 	.word	0x40013800
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	40004400 	.word	0x40004400
 8006f24:	40004800 	.word	0x40004800
 8006f28:	40004c00 	.word	0x40004c00
 8006f2c:	40005000 	.word	0x40005000
 8006f30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	76bb      	strb	r3, [r7, #26]
        break;
 8006f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80f1 	beq.w	8007128 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d305      	bcc.n	8006f62 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d902      	bls.n	8006f68 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	76bb      	strb	r3, [r7, #26]
 8006f66:	e0df      	b.n	8007128 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f04f 0100 	mov.w	r1, #0
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	020b      	lsls	r3, r1, #8
 8006f7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f7e:	0202      	lsls	r2, r0, #8
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	6849      	ldr	r1, [r1, #4]
 8006f84:	0849      	lsrs	r1, r1, #1
 8006f86:	4608      	mov	r0, r1
 8006f88:	f04f 0100 	mov.w	r1, #0
 8006f8c:	1814      	adds	r4, r2, r0
 8006f8e:	eb43 0501 	adc.w	r5, r3, r1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 fd8c 	bl	8000abc <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4613      	mov	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb2:	d308      	bcc.n	8006fc6 <UART_SetConfig+0x396>
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fba:	d204      	bcs.n	8006fc6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	60da      	str	r2, [r3, #12]
 8006fc4:	e0b0      	b.n	8007128 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	76bb      	strb	r3, [r7, #26]
 8006fca:	e0ad      	b.n	8007128 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd4:	d15c      	bne.n	8007090 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006fd6:	7efb      	ldrb	r3, [r7, #27]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d828      	bhi.n	800702e <UART_SetConfig+0x3fe>
 8006fdc:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x3b4>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fe fc36 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 800700c:	6178      	str	r0, [r7, #20]
        break;
 800700e:	e013      	b.n	8007038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fe fc48 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8007014:	6178      	str	r0, [r7, #20]
        break;
 8007016:	e00f      	b.n	8007038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b49      	ldr	r3, [pc, #292]	; (8007140 <UART_SetConfig+0x510>)
 800701a:	617b      	str	r3, [r7, #20]
        break;
 800701c:	e00c      	b.n	8007038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fe fb93 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 8007022:	6178      	str	r0, [r7, #20]
        break;
 8007024:	e008      	b.n	8007038 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702a:	617b      	str	r3, [r7, #20]
        break;
 800702c:	e004      	b.n	8007038 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	76bb      	strb	r3, [r7, #26]
        break;
 8007036:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d074      	beq.n	8007128 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	005a      	lsls	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	441a      	add	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007052:	b29b      	uxth	r3, r3
 8007054:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b0f      	cmp	r3, #15
 800705a:	d916      	bls.n	800708a <UART_SetConfig+0x45a>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007062:	d212      	bcs.n	800708a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f023 030f 	bic.w	r3, r3, #15
 800706c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	b29a      	uxth	r2, r3
 800707a:	89fb      	ldrh	r3, [r7, #14]
 800707c:	4313      	orrs	r3, r2
 800707e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	89fa      	ldrh	r2, [r7, #14]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e04e      	b.n	8007128 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	76bb      	strb	r3, [r7, #26]
 800708e:	e04b      	b.n	8007128 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007090:	7efb      	ldrb	r3, [r7, #27]
 8007092:	2b08      	cmp	r3, #8
 8007094:	d827      	bhi.n	80070e6 <UART_SetConfig+0x4b6>
 8007096:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0x46c>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c9 	.word	0x080070c9
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	080070e7 	.word	0x080070e7
 80070ac:	080070d7 	.word	0x080070d7
 80070b0:	080070e7 	.word	0x080070e7
 80070b4:	080070e7 	.word	0x080070e7
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	080070df 	.word	0x080070df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c0:	f7fe fbda 	bl	8005878 <HAL_RCC_GetPCLK1Freq>
 80070c4:	6178      	str	r0, [r7, #20]
        break;
 80070c6:	e013      	b.n	80070f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fe fbec 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 80070cc:	6178      	str	r0, [r7, #20]
        break;
 80070ce:	e00f      	b.n	80070f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d0:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <UART_SetConfig+0x510>)
 80070d2:	617b      	str	r3, [r7, #20]
        break;
 80070d4:	e00c      	b.n	80070f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fe fb37 	bl	8005748 <HAL_RCC_GetSysClockFreq>
 80070da:	6178      	str	r0, [r7, #20]
        break;
 80070dc:	e008      	b.n	80070f0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	617b      	str	r3, [r7, #20]
        break;
 80070e4:	e004      	b.n	80070f0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	76bb      	strb	r3, [r7, #26]
        break;
 80070ee:	bf00      	nop
    }

    if (pclk != 0U)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d018      	beq.n	8007128 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	085a      	lsrs	r2, r3, #1
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	441a      	add	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	fbb2 f3f3 	udiv	r3, r2, r3
 8007108:	b29b      	uxth	r3, r3
 800710a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b0f      	cmp	r3, #15
 8007110:	d908      	bls.n	8007124 <UART_SetConfig+0x4f4>
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007118:	d204      	bcs.n	8007124 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	60da      	str	r2, [r3, #12]
 8007122:	e001      	b.n	8007128 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007134:	7ebb      	ldrb	r3, [r7, #26]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bdb0      	pop	{r4, r5, r7, pc}
 800713e:	bf00      	nop
 8007140:	00f42400 	.word	0x00f42400

08007144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01a      	beq.n	800725a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007242:	d10a      	bne.n	800725a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	605a      	str	r2, [r3, #4]
  }
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007298:	f7fb fbe8 	bl	8002a6c <HAL_GetTick>
 800729c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d10e      	bne.n	80072ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f82d 	bl	800731a <UART_WaitOnFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e023      	b.n	8007312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d10e      	bne.n	80072f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f817 	bl	800731a <UART_WaitOnFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e00d      	b.n	8007312 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732a:	e05e      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d05a      	beq.n	80073ea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007334:	f7fb fb9a 	bl	8002a6c <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	429a      	cmp	r2, r3
 8007342:	d302      	bcc.n	800734a <UART_WaitOnFlagUntilTimeout+0x30>
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11b      	bne.n	8007382 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007358:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2220      	movs	r2, #32
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e043      	b.n	800740a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d02c      	beq.n	80073ea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800739a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739e:	d124      	bne.n	80073ea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073a8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e00f      	b.n	800740a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4013      	ands	r3, r2
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	429a      	cmp	r2, r3
 8007406:	d091      	beq.n	800732c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007412:	b084      	sub	sp, #16
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	f107 001c 	add.w	r0, r7, #28
 8007420:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f92b 	bl	800768c <USB_CoreReset>
 8007436:	4603      	mov	r3, r0
 8007438:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800743a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d106      	bne.n	800744e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
 800744c:	e005      	b.n	800745a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007466:	b004      	add	sp, #16
 8007468:	4770      	bx	lr

0800746a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f043 0201 	orr.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f023 0201 	bic.w	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d106      	bne.n	80074da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]
 80074d8:	e00b      	b.n	80074f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d106      	bne.n	80074ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]
 80074ec:	e001      	b.n	80074f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e003      	b.n	80074fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80074f2:	2032      	movs	r0, #50	; 0x32
 80074f4:	f7fb fac6 	bl	8002a84 <HAL_Delay>

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	019b      	lsls	r3, r3, #6
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4a09      	ldr	r2, [pc, #36]	; (800754c <USB_FlushTxFifo+0x48>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d901      	bls.n	8007530 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e006      	b.n	800753e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b20      	cmp	r3, #32
 800753a:	d0f0      	beq.n	800751e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	00030d40 	.word	0x00030d40

08007550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2210      	movs	r2, #16
 8007560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3301      	adds	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <USB_FlushRxFifo+0x40>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d901      	bls.n	8007574 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e006      	b.n	8007582 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b10      	cmp	r3, #16
 800757e:	d0f0      	beq.n	8007562 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	00030d40 	.word	0x00030d40

08007594 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	460b      	mov	r3, r1
 80075a4:	71fb      	strb	r3, [r7, #7]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80075b2:	88bb      	ldrh	r3, [r7, #4]
 80075b4:	3303      	adds	r3, #3
 80075b6:	089b      	lsrs	r3, r3, #2
 80075b8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e00f      	b.n	80075e0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	031a      	lsls	r2, r3, #12
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075cc:	461a      	mov	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3304      	adds	r3, #4
 80075d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	3301      	adds	r3, #1
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3eb      	bcc.n	80075c0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b089      	sub	sp, #36	; 0x24
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	4613      	mov	r3, r2
 8007602:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	3303      	adds	r3, #3
 8007610:	089b      	lsrs	r3, r3, #2
 8007612:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e00b      	b.n	8007632 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	601a      	str	r2, [r3, #0]
    pDest++;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	3304      	adds	r3, #4
 800762a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	3301      	adds	r3, #1
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	429a      	cmp	r2, r3
 8007638:	d3ef      	bcc.n	800761a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800763a:	69fb      	ldr	r3, [r7, #28]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3724      	adds	r7, #36	; 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	4013      	ands	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007660:	68fb      	ldr	r3, [r7, #12]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	f003 0301 	and.w	r3, r3, #1
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <USB_CoreReset+0x64>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d901      	bls.n	80076aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e01b      	b.n	80076e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	daf2      	bge.n	8007698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f043 0201 	orr.w	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a09      	ldr	r2, [pc, #36]	; (80076f0 <USB_CoreReset+0x64>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d901      	bls.n	80076d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e006      	b.n	80076e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d0f0      	beq.n	80076c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	00030d40 	.word	0x00030d40

080076f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076f4:	b084      	sub	sp, #16
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	f107 001c 	add.w	r0, r7, #28
 8007702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007710:	461a      	mov	r2, r3
 8007712:	2300      	movs	r3, #0
 8007714:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800773c:	f023 0304 	bic.w	r3, r3, #4
 8007740:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007742:	2110      	movs	r1, #16
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff fedd 	bl	8007504 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff ff00 	bl	8007550 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e015      	b.n	8007782 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007762:	461a      	mov	r2, r3
 8007764:	f04f 33ff 	mov.w	r3, #4294967295
 8007768:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007776:	461a      	mov	r2, r3
 8007778:	2300      	movs	r3, #0
 800777a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3301      	adds	r3, #1
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	429a      	cmp	r2, r3
 8007788:	d3e5      	bcc.n	8007756 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f893 	bl	80078b8 <USB_DriveVbus>

  HAL_Delay(200U);
 8007792:	20c8      	movs	r0, #200	; 0xc8
 8007794:	f7fb f976 	bl	8002a84 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a0d      	ldr	r2, [pc, #52]	; (80077e4 <USB_HostInit+0xf0>)
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a0c      	ldr	r2, [pc, #48]	; (80077e8 <USB_HostInit+0xf4>)
 80077b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f043 0210 	orr.w	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699a      	ldr	r2, [r3, #24]
 80077ca:	4b08      	ldr	r3, [pc, #32]	; (80077ec <USB_HostInit+0xf8>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077de:	b004      	add	sp, #16
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	00600080 	.word	0x00600080
 80077e8:	004000e0 	.word	0x004000e0
 80077ec:	a3200008 	.word	0xa3200008

080077f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007828:	4313      	orrs	r3, r2
 800782a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800782c:	78fb      	ldrb	r3, [r7, #3]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d107      	bne.n	8007842 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007838:	461a      	mov	r2, r3
 800783a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800783e:	6053      	str	r3, [r2, #4]
 8007840:	e009      	b.n	8007856 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d106      	bne.n	8007856 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800784e:	461a      	mov	r2, r3
 8007850:	f241 7370 	movw	r3, #6000	; 0x1770
 8007854:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007884:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800788e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007892:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007894:	2064      	movs	r0, #100	; 0x64
 8007896:	f7fb f8f5 	bl	8002a84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078a8:	200a      	movs	r0, #10
 80078aa:	f7fb f8eb 	bl	8002a84 <HAL_Delay>

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <USB_DriveVbus+0x44>
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d106      	bne.n	80078fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007906:	d109      	bne.n	800791c <USB_DriveVbus+0x64>
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	0c5b      	lsrs	r3, r3, #17
 8007948:	f003 0303 	and.w	r3, r3, #3
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	b29b      	uxth	r3, r3
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	4608      	mov	r0, r1
 8007986:	4611      	mov	r1, r2
 8007988:	461a      	mov	r2, r3
 800798a:	4603      	mov	r3, r0
 800798c:	70fb      	strb	r3, [r7, #3]
 800798e:	460b      	mov	r3, r1
 8007990:	70bb      	strb	r3, [r7, #2]
 8007992:	4613      	mov	r3, r2
 8007994:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079aa:	461a      	mov	r2, r3
 80079ac:	f04f 33ff 	mov.w	r3, #4294967295
 80079b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d867      	bhi.n	8007a8a <USB_HC_Init+0x10e>
 80079ba:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <USB_HC_Init+0x44>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	08007a4d 	.word	0x08007a4d
 80079c8:	080079d1 	.word	0x080079d1
 80079cc:	08007a0f 	.word	0x08007a0f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079dc:	461a      	mov	r2, r3
 80079de:	f240 439d 	movw	r3, #1181	; 0x49d
 80079e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	da51      	bge.n	8007a90 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0a:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a0c:	e040      	b.n	8007a90 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da34      	bge.n	8007a94 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a48:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a4a:	e023      	b.n	8007a94 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f240 2325 	movw	r3, #549	; 0x225
 8007a5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	da17      	bge.n	8007a98 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a82:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007a86:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a88:	e006      	b.n	8007a98 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	77fb      	strb	r3, [r7, #31]
      break;
 8007a8e:	e004      	b.n	8007a9a <USB_HC_Init+0x11e>
      break;
 8007a90:	bf00      	nop
 8007a92:	e002      	b.n	8007a9a <USB_HC_Init+0x11e>
      break;
 8007a94:	bf00      	nop
 8007a96:	e000      	b.n	8007a9a <USB_HC_Init+0x11e>
      break;
 8007a98:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007aae:	6939      	ldr	r1, [r7, #16]
 8007ab0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ac4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da03      	bge.n	8007ad4 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	e001      	b.n	8007ad8 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7ff ff26 	bl	800792a <USB_GetHostSpeed>
 8007ade:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d106      	bne.n	8007af6 <USB_HC_Init+0x17a>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d003      	beq.n	8007af6 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007aee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e001      	b.n	8007afa <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007afa:	787b      	ldrb	r3, [r7, #1]
 8007afc:	059b      	lsls	r3, r3, #22
 8007afe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b02:	78bb      	ldrb	r3, [r7, #2]
 8007b04:	02db      	lsls	r3, r3, #11
 8007b06:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b0a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b10:	049b      	lsls	r3, r3, #18
 8007b12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b16:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b18:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	0159      	lsls	r1, r3, #5
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b36:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007b38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b3c:	2b03      	cmp	r3, #3
 8007b3e:	d10f      	bne.n	8007b60 <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b60:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop

08007b6c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b84:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d018      	beq.n	8007bc0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	8912      	ldrh	r2, [r2, #8]
 8007b96:	4413      	add	r3, r2
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	8912      	ldrh	r2, [r2, #8]
 8007b9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007ba4:	8bfa      	ldrh	r2, [r7, #30]
 8007ba6:	8a7b      	ldrh	r3, [r7, #18]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d90b      	bls.n	8007bc4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007bac:	8a7b      	ldrh	r3, [r7, #18]
 8007bae:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	8912      	ldrh	r2, [r2, #8]
 8007bb6:	fb02 f203 	mul.w	r2, r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	611a      	str	r2, [r3, #16]
 8007bbe:	e001      	b.n	8007bc4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bcc:	8bfb      	ldrh	r3, [r7, #30]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	8912      	ldrh	r2, [r2, #8]
 8007bd2:	fb02 f203 	mul.w	r2, r2, r3
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	611a      	str	r2, [r3, #16]
 8007bda:	e003      	b.n	8007be4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	695a      	ldr	r2, [r3, #20]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bec:	8bfb      	ldrh	r3, [r7, #30]
 8007bee:	04d9      	lsls	r1, r3, #19
 8007bf0:	4b59      	ldr	r3, [pc, #356]	; (8007d58 <USB_HC_StartXfer+0x1ec>)
 8007bf2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bf4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	7a9b      	ldrb	r3, [r3, #10]
 8007bfa:	075b      	lsls	r3, r3, #29
 8007bfc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	0148      	lsls	r0, r1, #5
 8007c04:	69b9      	ldr	r1, [r7, #24]
 8007c06:	4401      	add	r1, r0
 8007c08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c0e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c46:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	7c7b      	ldrb	r3, [r7, #17]
 8007c58:	075b      	lsls	r3, r3, #29
 8007c5a:	6979      	ldr	r1, [r7, #20]
 8007c5c:	0148      	lsls	r0, r1, #5
 8007c5e:	69b9      	ldr	r1, [r7, #24]
 8007c60:	4401      	add	r1, r0
 8007c62:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c66:	4313      	orrs	r3, r2
 8007c68:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c80:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	e003      	b.n	8007c9c <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c9a:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ca2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d147      	bne.n	8007d4e <USB_HC_StartXfer+0x1e2>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d043      	beq.n	8007d4e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d830      	bhi.n	8007d30 <USB_HC_StartXfer+0x1c4>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USB_HC_StartXfer+0x168>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ce5 	.word	0x08007ce5
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007ce5 	.word	0x08007ce5
 8007ce0:	08007d09 	.word	0x08007d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cee:	89fa      	ldrh	r2, [r7, #14]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d91c      	bls.n	8007d34 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d06:	e015      	b.n	8007d34 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d12:	89fa      	ldrh	r2, [r7, #14]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d90a      	bls.n	8007d38 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d2e:	e003      	b.n	8007d38 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <USB_HC_StartXfer+0x1ce>
        break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <USB_HC_StartXfer+0x1ce>
        break;
 8007d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	785a      	ldrb	r2, [r3, #1]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff fc23 	bl	8007594 <USB_WritePacket>
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3720      	adds	r7, #32
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	1ff80000 	.word	0x1ff80000

08007d5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	b29b      	uxth	r3, r3
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b089      	sub	sp, #36	; 0x24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0c9b      	lsrs	r3, r3, #18
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	0fdb      	lsrs	r3, r3, #31
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d104      	bne.n	8007dd8 <USB_HC_Halt+0x5a>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	e0e8      	b.n	8007faa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <USB_HC_Halt+0x66>
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d173      	bne.n	8007ecc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 0320 	and.w	r3, r3, #32
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 80cb 	bne.w	8007fa8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d143      	bne.n	8007ea6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e3c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e5c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e7c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8a:	d81d      	bhi.n	8007ec8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea2:	d0ec      	beq.n	8007e7e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ea4:	e080      	b.n	8007fa8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	0151      	lsls	r1, r2, #5
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	440a      	add	r2, r1
 8007ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ec6:	e06f      	b.n	8007fa8 <USB_HC_Halt+0x22a>
            break;
 8007ec8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eca:	e06d      	b.n	8007fa8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d143      	bne.n	8007f84 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	0151      	lsls	r1, r2, #5
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	440a      	add	r2, r1
 8007f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	0151      	lsls	r1, r2, #5
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	440a      	add	r2, r1
 8007f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	0151      	lsls	r1, r2, #5
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	440a      	add	r2, r1
 8007f52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f5a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f68:	d81d      	bhi.n	8007fa6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f80:	d0ec      	beq.n	8007f5c <USB_HC_Halt+0x1de>
 8007f82:	e011      	b.n	8007fa8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	e000      	b.n	8007fa8 <USB_HC_Halt+0x22a>
          break;
 8007fa6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3724      	adds	r7, #36	; 0x24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fa60 	bl	800748c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007fcc:	2110      	movs	r1, #16
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7ff fa98 	bl	8007504 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff fabb 	bl	8007550 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	e01f      	b.n	8008020 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ffe:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008006:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b0f      	cmp	r3, #15
 8008024:	d9dc      	bls.n	8007fe0 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	e034      	b.n	8008096 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008042:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800804a:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008052:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008060:	461a      	mov	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	3301      	adds	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008072:	d80c      	bhi.n	800808e <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808a:	d0ec      	beq.n	8008066 <USB_StopHost+0xb0>
 800808c:	e000      	b.n	8008090 <USB_StopHost+0xda>
        break;
 800808e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3301      	adds	r3, #1
 8008094:	613b      	str	r3, [r7, #16]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b0f      	cmp	r3, #15
 800809a:	d9c7      	bls.n	800802c <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	461a      	mov	r2, r3
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff f9d9 	bl	800746a <USB_EnableGlobalInt>

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80080c2:	b590      	push	{r4, r7, lr}
 80080c4:	b089      	sub	sp, #36	; 0x24
 80080c6:	af04      	add	r7, sp, #16
 80080c8:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80080ca:	2301      	movs	r3, #1
 80080cc:	2202      	movs	r2, #2
 80080ce:	2102      	movs	r1, #2
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fcb9 	bl	8008a48 <USBH_FindInterface>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	2bff      	cmp	r3, #255	; 0xff
 80080de:	d002      	beq.n	80080e6 <USBH_CDC_InterfaceInit+0x24>
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d901      	bls.n	80080ea <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80080e6:	2302      	movs	r3, #2
 80080e8:	e13d      	b.n	8008366 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fc8e 	bl	8008a10 <USBH_SelectInterface>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80080fe:	2302      	movs	r3, #2
 8008100:	e131      	b.n	8008366 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008108:	2050      	movs	r0, #80	; 0x50
 800810a:	f004 fd6b 	bl	800cbe4 <malloc>
 800810e:	4603      	mov	r3, r0
 8008110:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008122:	2302      	movs	r3, #2
 8008124:	e11f      	b.n	8008366 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008126:	2250      	movs	r2, #80	; 0x50
 8008128:	2100      	movs	r1, #0
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f004 fd78 	bl	800cc20 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	211a      	movs	r1, #26
 8008136:	fb01 f303 	mul.w	r3, r1, r3
 800813a:	4413      	add	r3, r2
 800813c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b25b      	sxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	da15      	bge.n	8008174 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	211a      	movs	r1, #26
 800814e:	fb01 f303 	mul.w	r3, r1, r3
 8008152:	4413      	add	r3, r2
 8008154:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	211a      	movs	r1, #26
 8008164:	fb01 f303 	mul.w	r3, r1, r3
 8008168:	4413      	add	r3, r2
 800816a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800816e:	881a      	ldrh	r2, [r3, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f002 f869 	bl	800a252 <USBH_AllocPipe>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	7858      	ldrb	r0, [r3, #1]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	8952      	ldrh	r2, [r2, #10]
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	2203      	movs	r2, #3
 80081a4:	9201      	str	r2, [sp, #4]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4623      	mov	r3, r4
 80081aa:	4602      	mov	r2, r0
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f002 f821 	bl	800a1f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2200      	movs	r2, #0
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fa fba0 	bl	8002900 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80081c0:	2300      	movs	r3, #0
 80081c2:	2200      	movs	r2, #0
 80081c4:	210a      	movs	r1, #10
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc3e 	bl	8008a48 <USBH_FindInterface>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	2bff      	cmp	r3, #255	; 0xff
 80081d4:	d002      	beq.n	80081dc <USBH_CDC_InterfaceInit+0x11a>
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d901      	bls.n	80081e0 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80081dc:	2302      	movs	r3, #2
 80081de:	e0c2      	b.n	8008366 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	211a      	movs	r1, #26
 80081e6:	fb01 f303 	mul.w	r3, r1, r3
 80081ea:	4413      	add	r3, r2
 80081ec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da16      	bge.n	8008226 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	211a      	movs	r1, #26
 80081fe:	fb01 f303 	mul.w	r3, r1, r3
 8008202:	4413      	add	r3, r2
 8008204:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008208:	781a      	ldrb	r2, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	211a      	movs	r1, #26
 8008214:	fb01 f303 	mul.w	r3, r1, r3
 8008218:	4413      	add	r3, r2
 800821a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800821e:	881a      	ldrh	r2, [r3, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	835a      	strh	r2, [r3, #26]
 8008224:	e015      	b.n	8008252 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	211a      	movs	r1, #26
 800822c:	fb01 f303 	mul.w	r3, r1, r3
 8008230:	4413      	add	r3, r2
 8008232:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	211a      	movs	r1, #26
 8008242:	fb01 f303 	mul.w	r3, r1, r3
 8008246:	4413      	add	r3, r2
 8008248:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800824c:	881a      	ldrh	r2, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	211a      	movs	r1, #26
 8008258:	fb01 f303 	mul.w	r3, r1, r3
 800825c:	4413      	add	r3, r2
 800825e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b25b      	sxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	da16      	bge.n	8008298 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	211a      	movs	r1, #26
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	4413      	add	r3, r2
 8008276:	f203 3356 	addw	r3, r3, #854	; 0x356
 800827a:	781a      	ldrb	r2, [r3, #0]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	211a      	movs	r1, #26
 8008286:	fb01 f303 	mul.w	r3, r1, r3
 800828a:	4413      	add	r3, r2
 800828c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008290:	881a      	ldrh	r2, [r3, #0]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	835a      	strh	r2, [r3, #26]
 8008296:	e015      	b.n	80082c4 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	211a      	movs	r1, #26
 800829e:	fb01 f303 	mul.w	r3, r1, r3
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	211a      	movs	r1, #26
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082be:	881a      	ldrh	r2, [r3, #0]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	7b9b      	ldrb	r3, [r3, #14]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 ffc1 	bl	800a252 <USBH_AllocPipe>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	7bdb      	ldrb	r3, [r3, #15]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 ffb7 	bl	800a252 <USBH_AllocPipe>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	7b59      	ldrb	r1, [r3, #13]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	7b98      	ldrb	r0, [r3, #14]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	8b12      	ldrh	r2, [r2, #24]
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	2202      	movs	r2, #2
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	4623      	mov	r3, r4
 800830e:	4602      	mov	r2, r0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 ff6f 	bl	800a1f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	7b19      	ldrb	r1, [r3, #12]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	7bd8      	ldrb	r0, [r3, #15]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	8b52      	ldrh	r2, [r2, #26]
 800832e:	9202      	str	r2, [sp, #8]
 8008330:	2202      	movs	r2, #2
 8008332:	9201      	str	r2, [sp, #4]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4623      	mov	r3, r4
 8008338:	4602      	mov	r2, r0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 ff5a 	bl	800a1f4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	7b5b      	ldrb	r3, [r3, #13]
 800834c:	2200      	movs	r2, #0
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fa fad5 	bl	8002900 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	7b1b      	ldrb	r3, [r3, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fa face 	bl	8002900 <USBH_LL_SetToggle>

  return USBH_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	bd90      	pop	{r4, r7, pc}

0800836e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00e      	beq.n	80083a6 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 ff4f 	bl	800a232 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 ff7a 	bl	800a294 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	7b1b      	ldrb	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00e      	beq.n	80083cc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	7b1b      	ldrb	r3, [r3, #12]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 ff3c 	bl	800a232 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	7b1b      	ldrb	r3, [r3, #12]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f001 ff67 	bl	800a294 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	7b5b      	ldrb	r3, [r3, #13]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	7b5b      	ldrb	r3, [r3, #13]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 ff29 	bl	800a232 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	7b5b      	ldrb	r3, [r3, #13]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 ff54 	bl	800a294 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	4618      	mov	r0, r3
 8008408:	f004 fbf4 	bl	800cbf4 <free>
    phost->pActiveClass->pData = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008412:	2200      	movs	r2, #0
 8008414:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3340      	adds	r3, #64	; 0x40
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f8b2 	bl	80085a2 <GetLineCoding>
 800843e:	4603      	mov	r3, r0
 8008440:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d105      	bne.n	8008454 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800844e:	2102      	movs	r1, #2
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008454:	7afb      	ldrb	r3, [r7, #11]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008480:	2b04      	cmp	r3, #4
 8008482:	d877      	bhi.n	8008574 <USBH_CDC_Process+0x114>
 8008484:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBH_CDC_Process+0x2c>)
 8008486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848a:	bf00      	nop
 800848c:	080084a1 	.word	0x080084a1
 8008490:	080084a7 	.word	0x080084a7
 8008494:	080084d7 	.word	0x080084d7
 8008498:	0800854b 	.word	0x0800854b
 800849c:	08008559 	.word	0x08008559
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e06d      	b.n	8008582 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f897 	bl	80085e0 <SetLineCoding>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084c4:	e058      	b.n	8008578 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d055      	beq.n	8008578 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2204      	movs	r2, #4
 80084d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80084d4:	e050      	b.n	8008578 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	3340      	adds	r3, #64	; 0x40
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 f860 	bl	80085a2 <GetLineCoding>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d126      	bne.n	800853a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fe:	791b      	ldrb	r3, [r3, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d13b      	bne.n	800857c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800850e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008510:	429a      	cmp	r2, r3
 8008512:	d133      	bne.n	800857c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800851e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008520:	429a      	cmp	r2, r3
 8008522:	d12b      	bne.n	800857c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800852c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800852e:	429a      	cmp	r2, r3
 8008530:	d124      	bne.n	800857c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f982 	bl	800883c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008538:	e020      	b.n	800857c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d01d      	beq.n	800857c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2204      	movs	r2, #4
 8008544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008548:	e018      	b.n	800857c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f867 	bl	800861e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f8f6 	bl	8008742 <CDC_ProcessReception>
      break;
 8008556:	e014      	b.n	8008582 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008558:	2100      	movs	r1, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f001 f929 	bl	80097b2 <USBH_ClrFeature>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008572:	e005      	b.n	8008580 <USBH_CDC_Process+0x120>

    default:
      break;
 8008574:	bf00      	nop
 8008576:	e004      	b.n	8008582 <USBH_CDC_Process+0x122>
      break;
 8008578:	bf00      	nop
 800857a:	e002      	b.n	8008582 <USBH_CDC_Process+0x122>
      break;
 800857c:	bf00      	nop
 800857e:	e000      	b.n	8008582 <USBH_CDC_Process+0x122>
      break;
 8008580:	bf00      	nop

  }

  return status;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	22a1      	movs	r2, #161	; 0xa1
 80085b0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2221      	movs	r2, #33	; 0x21
 80085b6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2207      	movs	r2, #7
 80085c8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2207      	movs	r2, #7
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 face 	bl	8009b72 <USBH_CtlReq>
 80085d6:	4603      	mov	r3, r0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2221      	movs	r2, #33	; 0x21
 80085ee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2207      	movs	r2, #7
 8008606:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2207      	movs	r2, #7
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 faaf 	bl	8009b72 <USBH_CtlReq>
 8008614:	4603      	mov	r3, r0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af02      	add	r7, sp, #8
 8008624:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008630:	2300      	movs	r3, #0
 8008632:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800863a:	2b01      	cmp	r3, #1
 800863c:	d002      	beq.n	8008644 <CDC_ProcessTransmission+0x26>
 800863e:	2b02      	cmp	r3, #2
 8008640:	d023      	beq.n	800868a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008642:	e07a      	b.n	800873a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	8b12      	ldrh	r2, [r2, #24]
 800864c:	4293      	cmp	r3, r2
 800864e:	d90b      	bls.n	8008668 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	69d9      	ldr	r1, [r3, #28]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8b1a      	ldrh	r2, [r3, #24]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	7b5b      	ldrb	r3, [r3, #13]
 800865c:	2001      	movs	r0, #1
 800865e:	9000      	str	r0, [sp, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 fd84 	bl	800a16e <USBH_BulkSendData>
 8008666:	e00b      	b.n	8008680 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7b5b      	ldrb	r3, [r3, #13]
 8008676:	2001      	movs	r0, #1
 8008678:	9000      	str	r0, [sp, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fd77 	bl	800a16e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008688:	e057      	b.n	800873a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	7b5b      	ldrb	r3, [r3, #13]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7fa f90b 	bl	80028ac <USBH_LL_GetURBState>
 8008696:	4603      	mov	r3, r0
 8008698:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d136      	bne.n	800870e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	8b12      	ldrh	r2, [r2, #24]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d90e      	bls.n	80086ca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	8b12      	ldrh	r2, [r2, #24]
 80086b4:	1a9a      	subs	r2, r3, r2
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	8b12      	ldrh	r2, [r2, #24]
 80086c2:	441a      	add	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	61da      	str	r2, [r3, #28]
 80086c8:	e002      	b.n	80086d0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80086e0:	e006      	b.n	80086f0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f892 	bl	8008814 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2204      	movs	r2, #4
 80086f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008704:	2200      	movs	r2, #0
 8008706:	4619      	mov	r1, r3
 8008708:	f001 fe84 	bl	800a414 <osMessagePut>
      break;
 800870c:	e014      	b.n	8008738 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800870e:	7afb      	ldrb	r3, [r7, #11]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d111      	bne.n	8008738 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2204      	movs	r2, #4
 8008720:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008730:	2200      	movs	r2, #0
 8008732:	4619      	mov	r1, r3
 8008734:	f001 fe6e 	bl	800a414 <osMessagePut>
      break;
 8008738:	bf00      	nop
  }
}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008754:	2300      	movs	r3, #0
 8008756:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800875e:	2b03      	cmp	r3, #3
 8008760:	d002      	beq.n	8008768 <CDC_ProcessReception+0x26>
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00e      	beq.n	8008784 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008766:	e051      	b.n	800880c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	6a19      	ldr	r1, [r3, #32]
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	8b5a      	ldrh	r2, [r3, #26]
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	7b1b      	ldrb	r3, [r3, #12]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fd1f 	bl	800a1b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2204      	movs	r2, #4
 800877e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008782:	e043      	b.n	800880c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	7b1b      	ldrb	r3, [r3, #12]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fa f88e 	bl	80028ac <USBH_LL_GetURBState>
 8008790:	4603      	mov	r3, r0
 8008792:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008794:	7cfb      	ldrb	r3, [r7, #19]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d137      	bne.n	800880a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	7b1b      	ldrb	r3, [r3, #12]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7f9 ffab 	bl	80026fc <USBH_LL_GetLastXferSize>
 80087a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d016      	beq.n	80087e0 <CDC_ProcessReception+0x9e>
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	8b5b      	ldrh	r3, [r3, #26]
 80087b6:	461a      	mov	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d910      	bls.n	80087e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	1ad2      	subs	r2, r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	441a      	add	r2, r3
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2203      	movs	r2, #3
 80087da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80087de:	e006      	b.n	80087ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f81d 	bl	8008828 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2204      	movs	r2, #4
 80087f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008802:	2200      	movs	r2, #0
 8008804:	4619      	mov	r1, r3
 8008806:	f001 fe05 	bl	800a414 <osMessagePut>
      break;
 800880a:	bf00      	nop
  }
}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008850:	b5b0      	push	{r4, r5, r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008864:	2302      	movs	r3, #2
 8008866:	e04c      	b.n	8008902 <USBH_Init+0xb2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	79fa      	ldrb	r2, [r7, #7]
 800886c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f847 	bl	8008914 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80088b4:	4a15      	ldr	r2, [pc, #84]	; (800890c <USBH_Init+0xbc>)
 80088b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088be:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80088c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fd91 	bl	800a3f0 <osMessageCreate>
 80088ce:	4602      	mov	r2, r0
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80088d6:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <USBH_Init+0xc0>)
 80088d8:	f107 0414 	add.w	r4, r7, #20
 80088dc:	461d      	mov	r5, r3
 80088de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088e2:	682b      	ldr	r3, [r5, #0]
 80088e4:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80088e6:	f107 0314 	add.w	r3, r7, #20
 80088ea:	68f9      	ldr	r1, [r7, #12]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fd44 	bl	800a37a <osThreadCreate>
 80088f2:	4602      	mov	r2, r0
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f7f9 fe00 	bl	8002500 <USBH_LL_Init>

  return USBH_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3730      	adds	r7, #48	; 0x30
 8008906:	46bd      	mov	sp, r7
 8008908:	bdb0      	pop	{r4, r5, r7, pc}
 800890a:	bf00      	nop
 800890c:	0800d7f0 	.word	0x0800d7f0
 8008910:	0800d7f8 	.word	0x0800d7f8

08008914 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
 8008924:	e009      	b.n	800893a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	33e0      	adds	r3, #224	; 0xe0
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	2200      	movs	r2, #0
 8008932:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b0e      	cmp	r3, #14
 800893e:	d9f2      	bls.n	8008926 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e009      	b.n	800895a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008960:	d3f1      	bcc.n	8008946 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2240      	movs	r2, #64	; 0x40
 8008986:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d016      	beq.n	80089fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10e      	bne.n	80089f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80089e0:	1c59      	adds	r1, r3, #1
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	33de      	adds	r3, #222	; 0xde
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
 80089f6:	e004      	b.n	8008a02 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80089f8:	2302      	movs	r3, #2
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	e001      	b.n	8008a02 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80089fe:	2302      	movs	r3, #2
 8008a00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d204      	bcs.n	8008a36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008a34:	e001      	b.n	8008a3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008a36:	2302      	movs	r3, #2
 8008a38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	70fb      	strb	r3, [r7, #3]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70bb      	strb	r3, [r7, #2]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a72:	e025      	b.n	8008ac0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	221a      	movs	r2, #26
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4413      	add	r3, r2
 8008a82:	3302      	adds	r3, #2
 8008a84:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	795b      	ldrb	r3, [r3, #5]
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d002      	beq.n	8008a96 <USBH_FindInterface+0x4e>
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	2bff      	cmp	r3, #255	; 0xff
 8008a94:	d111      	bne.n	8008aba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a9a:	78ba      	ldrb	r2, [r7, #2]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d002      	beq.n	8008aa6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008aa0:	78bb      	ldrb	r3, [r7, #2]
 8008aa2:	2bff      	cmp	r3, #255	; 0xff
 8008aa4:	d109      	bne.n	8008aba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008aaa:	787a      	ldrb	r2, [r7, #1]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d002      	beq.n	8008ab6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ab0:	787b      	ldrb	r3, [r7, #1]
 8008ab2:	2bff      	cmp	r3, #255	; 0xff
 8008ab4:	d101      	bne.n	8008aba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	e006      	b.n	8008ac8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	3301      	adds	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d9d6      	bls.n	8008a74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ac6:	23ff      	movs	r3, #255	; 0xff
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7f9 fd4f 	bl	8002580 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7f9 fef4 	bl	80028d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af04      	add	r7, sp, #16
 8008afa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008afc:	2302      	movs	r3, #2
 8008afe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d102      	bne.n	8008b16 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2203      	movs	r2, #3
 8008b14:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b0b      	cmp	r3, #11
 8008b1e:	f200 823c 	bhi.w	8008f9a <USBH_Process+0x4a6>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <USBH_Process+0x34>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b59 	.word	0x08008b59
 8008b2c:	08008ba7 	.word	0x08008ba7
 8008b30:	08008c2b 	.word	0x08008c2b
 8008b34:	08008f19 	.word	0x08008f19
 8008b38:	08008f9b 	.word	0x08008f9b
 8008b3c:	08008ceb 	.word	0x08008ceb
 8008b40:	08008ea3 	.word	0x08008ea3
 8008b44:	08008d3d 	.word	0x08008d3d
 8008b48:	08008d79 	.word	0x08008d79
 8008b4c:	08008db3 	.word	0x08008db3
 8008b50:	08008dfb 	.word	0x08008dfb
 8008b54:	08008f01 	.word	0x08008f01
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 821c 	beq.w	8008f9e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b6c:	20c8      	movs	r0, #200	; 0xc8
 8008b6e:	f7f9 fef7 	bl	8002960 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f9 fd90 	bl	8002698 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f001 fc38 	bl	800a414 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008ba4:	e1fb      	b.n	8008f9e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d107      	bne.n	8008bc0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e025      	b.n	8008c0c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bca:	d914      	bls.n	8008bf6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d903      	bls.n	8008bee <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	220d      	movs	r2, #13
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	e00e      	b.n	8008c0c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	e00a      	b.n	8008c0c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008bfc:	f103 020a 	add.w	r2, r3, #10
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c06:	200a      	movs	r0, #10
 8008c08:	f7f9 feaa 	bl	8002960 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c20:	2200      	movs	r2, #0
 8008c22:	4619      	mov	r1, r3
 8008c24:	f001 fbf6 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c28:	e1c0      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008c40:	2064      	movs	r0, #100	; 0x64
 8008c42:	f7f9 fe8d 	bl	8002960 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7f9 fcfe 	bl	8002648 <USBH_LL_GetSpeed>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	461a      	mov	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2205      	movs	r2, #5
 8008c5a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 faf7 	bl	800a252 <USBH_AllocPipe>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008c6c:	2180      	movs	r1, #128	; 0x80
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 faef 	bl	800a252 <USBH_AllocPipe>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7919      	ldrb	r1, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008c90:	b292      	uxth	r2, r2
 8008c92:	9202      	str	r2, [sp, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	9201      	str	r2, [sp, #4]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2280      	movs	r2, #128	; 0x80
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 faa8 	bl	800a1f4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	7959      	ldrb	r1, [r3, #5]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	9202      	str	r2, [sp, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	9201      	str	r2, [sp, #4]
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fa94 	bl	800a1f4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f001 fb96 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ce8:	e160      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f964 	bl	8008fb8 <USBH_HandleEnum>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f040 8152 	bne.w	8008fa2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d103      	bne.n	8008d18 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2208      	movs	r2, #8
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e002      	b.n	8008d1e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2207      	movs	r2, #7
 8008d1c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2205      	movs	r2, #5
 8008d22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d32:	2200      	movs	r2, #0
 8008d34:	4619      	mov	r1, r3
 8008d36:	f001 fb6d 	bl	800a414 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d3a:	e132      	b.n	8008fa2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 812f 	beq.w	8008fa6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d4e:	2101      	movs	r1, #1
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2208      	movs	r2, #8
 8008d58:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2205      	movs	r2, #5
 8008d5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4619      	mov	r1, r3
 8008d72:	f001 fb4f 	bl	800a414 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008d76:	e116      	b.n	8008fa6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fcce 	bl	8009724 <USBH_SetCfg>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2209      	movs	r2, #9
 8008d92:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008da8:	2200      	movs	r2, #0
 8008daa:	4619      	mov	r1, r3
 8008dac:	f001 fb32 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008db0:	e0fc      	b.n	8008fac <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fcd1 	bl	800976a <USBH_SetFeature>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	701a      	strb	r2, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	220a      	movs	r2, #10
 8008dda:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008df0:	2200      	movs	r2, #0
 8008df2:	4619      	mov	r1, r3
 8008df4:	f001 fb0e 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008df8:	e0d8      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d03f      	beq.n	8008e84 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e016      	b.n	8008e40 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e12:	7bfa      	ldrb	r2, [r7, #15]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	32de      	adds	r2, #222	; 0xde
 8008e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1c:	791a      	ldrb	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d108      	bne.n	8008e3a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e28:	7bfa      	ldrb	r2, [r7, #15]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32de      	adds	r2, #222	; 0xde
 8008e2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e38:	e005      	b.n	8008e46 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0e5      	beq.n	8008e12 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d016      	beq.n	8008e7e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	4798      	blx	r3
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2206      	movs	r2, #6
 8008e66:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e6e:	2103      	movs	r1, #3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	4798      	blx	r3
 8008e74:	e006      	b.n	8008e84 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	220d      	movs	r2, #13
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e002      	b.n	8008e84 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	220d      	movs	r2, #13
 8008e82:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2205      	movs	r2, #5
 8008e88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	f001 faba 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ea0:	e084      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	220b      	movs	r2, #11
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e00a      	b.n	8008ee2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d106      	bne.n	8008ee2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	220d      	movs	r2, #13
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	220d      	movs	r2, #13
 8008ee0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f001 fa8b 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008efe:	e055      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d04f      	beq.n	8008faa <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
      }
      break;
 8008f16:	e048      	b.n	8008faa <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7ff fcf7 	bl	8008914 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f54:	2105      	movs	r1, #5
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d107      	bne.n	8008f76 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fdb0 	bl	8008ad4 <USBH_Start>
 8008f74:	e002      	b.n	8008f7c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7f9 fb02 	bl	8002580 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f90:	2200      	movs	r2, #0
 8008f92:	4619      	mov	r1, r3
 8008f94:	f001 fa3e 	bl	800a414 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f98:	e008      	b.n	8008fac <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f9a:	bf00      	nop
 8008f9c:	e006      	b.n	8008fac <USBH_Process+0x4b8>
      break;
 8008f9e:	bf00      	nop
 8008fa0:	e004      	b.n	8008fac <USBH_Process+0x4b8>
      break;
 8008fa2:	bf00      	nop
 8008fa4:	e002      	b.n	8008fac <USBH_Process+0x4b8>
    break;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <USBH_Process+0x4b8>
      break;
 8008faa:	bf00      	nop
  }
  return USBH_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop

08008fb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af04      	add	r7, sp, #16
 8008fbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b07      	cmp	r3, #7
 8008fce:	f200 8208 	bhi.w	80093e2 <USBH_HandleEnum+0x42a>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBH_HandleEnum+0x20>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008ff9 	.word	0x08008ff9
 8008fdc:	080090b7 	.word	0x080090b7
 8008fe0:	08009121 	.word	0x08009121
 8008fe4:	080091af 	.word	0x080091af
 8008fe8:	08009219 	.word	0x08009219
 8008fec:	08009289 	.word	0x08009289
 8008ff0:	08009325 	.word	0x08009325
 8008ff4:	080093a3 	.word	0x080093a3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ff8:	2108      	movs	r1, #8
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fac2 	bl	8009584 <USBH_Get_DevDesc>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d130      	bne.n	800906c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7919      	ldrb	r1, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800902e:	b292      	uxth	r2, r2
 8009030:	9202      	str	r2, [sp, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	4603      	mov	r3, r0
 800903a:	2280      	movs	r2, #128	; 0x80
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f8d9 	bl	800a1f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	7959      	ldrb	r1, [r3, #5]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009056:	b292      	uxth	r2, r2
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	9201      	str	r2, [sp, #4]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4603      	mov	r3, r0
 8009062:	2200      	movs	r2, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f8c5 	bl	800a1f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800906a:	e1bc      	b.n	80093e6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b03      	cmp	r3, #3
 8009070:	f040 81b9 	bne.w	80093e6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800907a:	3301      	adds	r3, #1
 800907c:	b2da      	uxtb	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800908a:	2b03      	cmp	r3, #3
 800908c:	d903      	bls.n	8009096 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	220d      	movs	r2, #13
 8009092:	701a      	strb	r2, [r3, #0]
      break;
 8009094:	e1a7      	b.n	80093e6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	795b      	ldrb	r3, [r3, #5]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f8f9 	bl	800a294 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	791b      	ldrb	r3, [r3, #4]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 f8f3 	bl	800a294 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
      break;
 80090b4:	e197      	b.n	80093e6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80090b6:	2112      	movs	r1, #18
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fa63 	bl	8009584 <USBH_Get_DevDesc>
 80090be:	4603      	mov	r3, r0
 80090c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090ce:	e18c      	b.n	80093ea <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	f040 8189 	bne.w	80093ea <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090de:	3301      	adds	r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d903      	bls.n	80090fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220d      	movs	r2, #13
 80090f6:	701a      	strb	r2, [r3, #0]
      break;
 80090f8:	e177      	b.n	80093ea <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	795b      	ldrb	r3, [r3, #5]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f8c7 	bl	800a294 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f8c1 	bl	800a294 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
      break;
 800911e:	e164      	b.n	80093ea <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009120:	2101      	movs	r1, #1
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fada 	bl	80096dc <USBH_SetAddress>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d132      	bne.n	8009198 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009132:	2002      	movs	r0, #2
 8009134:	f7f9 fc14 	bl	8002960 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2203      	movs	r2, #3
 8009144:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7919      	ldrb	r1, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800915a:	b292      	uxth	r2, r2
 800915c:	9202      	str	r2, [sp, #8]
 800915e:	2200      	movs	r2, #0
 8009160:	9201      	str	r2, [sp, #4]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4603      	mov	r3, r0
 8009166:	2280      	movs	r2, #128	; 0x80
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 f843 	bl	800a1f4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7959      	ldrb	r1, [r3, #5]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009182:	b292      	uxth	r2, r2
 8009184:	9202      	str	r2, [sp, #8]
 8009186:	2200      	movs	r2, #0
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	4603      	mov	r3, r0
 800918e:	2200      	movs	r2, #0
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f82f 	bl	800a1f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009196:	e12a      	b.n	80093ee <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b03      	cmp	r3, #3
 800919c:	f040 8127 	bne.w	80093ee <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	220d      	movs	r2, #13
 80091a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	705a      	strb	r2, [r3, #1]
      break;
 80091ac:	e11f      	b.n	80093ee <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80091ae:	2109      	movs	r1, #9
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa0f 	bl	80095d4 <USBH_Get_CfgDesc>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091ba:	7bbb      	ldrb	r3, [r7, #14]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2204      	movs	r2, #4
 80091c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091c6:	e114      	b.n	80093f2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	f040 8111 	bne.w	80093f2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091d6:	3301      	adds	r3, #1
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d903      	bls.n	80091f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	220d      	movs	r2, #13
 80091ee:	701a      	strb	r2, [r3, #0]
      break;
 80091f0:	e0ff      	b.n	80093f2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	795b      	ldrb	r3, [r3, #5]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f84b 	bl	800a294 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	791b      	ldrb	r3, [r3, #4]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 f845 	bl	800a294 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
      break;
 8009216:	e0ec      	b.n	80093f2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9d7 	bl	80095d4 <USBH_Get_CfgDesc>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d103      	bne.n	8009238 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2205      	movs	r2, #5
 8009234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009236:	e0de      	b.n	80093f6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b03      	cmp	r3, #3
 800923c:	f040 80db 	bne.w	80093f6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009246:	3301      	adds	r3, #1
 8009248:	b2da      	uxtb	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009256:	2b03      	cmp	r3, #3
 8009258:	d903      	bls.n	8009262 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	220d      	movs	r2, #13
 800925e:	701a      	strb	r2, [r3, #0]
      break;
 8009260:	e0c9      	b.n	80093f6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	795b      	ldrb	r3, [r3, #5]
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 f813 	bl	800a294 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	791b      	ldrb	r3, [r3, #4]
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 f80d 	bl	800a294 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e0b6      	b.n	80093f6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800928e:	2b00      	cmp	r3, #0
 8009290:	d036      	beq.n	8009300 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800929e:	23ff      	movs	r3, #255	; 0xff
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9bb 	bl	800961c <USBH_Get_StringDesc>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d111      	bne.n	80092d4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2206      	movs	r2, #6
 80092b4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2205      	movs	r2, #5
 80092ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092ca:	2200      	movs	r2, #0
 80092cc:	4619      	mov	r1, r3
 80092ce:	f001 f8a1 	bl	800a414 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80092d2:	e092      	b.n	80093fa <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	f040 808f 	bne.w	80093fa <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2206      	movs	r2, #6
 80092e0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2205      	movs	r2, #5
 80092e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092f6:	2200      	movs	r2, #0
 80092f8:	4619      	mov	r1, r3
 80092fa:	f001 f88b 	bl	800a414 <osMessagePut>
      break;
 80092fe:	e07c      	b.n	80093fa <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2206      	movs	r2, #6
 8009304:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2205      	movs	r2, #5
 800930a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800931a:	2200      	movs	r2, #0
 800931c:	4619      	mov	r1, r3
 800931e:	f001 f879 	bl	800a414 <osMessagePut>
      break;
 8009322:	e06a      	b.n	80093fa <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800932a:	2b00      	cmp	r3, #0
 800932c:	d027      	beq.n	800937e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800933a:	23ff      	movs	r3, #255	; 0xff
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f96d 	bl	800961c <USBH_Get_StringDesc>
 8009342:	4603      	mov	r3, r0
 8009344:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2207      	movs	r2, #7
 8009350:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009352:	e054      	b.n	80093fe <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b03      	cmp	r3, #3
 8009358:	d151      	bne.n	80093fe <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2207      	movs	r2, #7
 800935e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2205      	movs	r2, #5
 8009364:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009374:	2200      	movs	r2, #0
 8009376:	4619      	mov	r1, r3
 8009378:	f001 f84c 	bl	800a414 <osMessagePut>
      break;
 800937c:	e03f      	b.n	80093fe <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2207      	movs	r2, #7
 8009382:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2205      	movs	r2, #5
 8009388:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009398:	2200      	movs	r2, #0
 800939a:	4619      	mov	r1, r3
 800939c:	f001 f83a 	bl	800a414 <osMessagePut>
      break;
 80093a0:	e02d      	b.n	80093fe <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d017      	beq.n	80093dc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093b8:	23ff      	movs	r3, #255	; 0xff
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f92e 	bl	800961c <USBH_Get_StringDesc>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093ce:	e018      	b.n	8009402 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d115      	bne.n	8009402 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
      break;
 80093da:	e012      	b.n	8009402 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e00f      	b.n	8009402 <USBH_HandleEnum+0x44a>

    default:
      break;
 80093e2:	bf00      	nop
 80093e4:	e00e      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093e6:	bf00      	nop
 80093e8:	e00c      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093ea:	bf00      	nop
 80093ec:	e00a      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093ee:	bf00      	nop
 80093f0:	e008      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093f2:	bf00      	nop
 80093f4:	e006      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093f6:	bf00      	nop
 80093f8:	e004      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093fa:	bf00      	nop
 80093fc:	e002      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 80093fe:	bf00      	nop
 8009400:	e000      	b.n	8009404 <USBH_HandleEnum+0x44c>
      break;
 8009402:	bf00      	nop
  }
  return Status;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop

08009410 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f804 	bl	8009452 <USBH_HandleSof>
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b0b      	cmp	r3, #11
 8009462:	d10a      	bne.n	800947a <USBH_HandleSof+0x28>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800946a:	2b00      	cmp	r3, #0
 800946c:	d005      	beq.n	800947a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
  }
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80094b6:	2200      	movs	r2, #0
 80094b8:	4619      	mov	r1, r3
 80094ba:	f000 ffab 	bl	800a414 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7f9 f87b 	bl	80025e4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	791b      	ldrb	r3, [r3, #4]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fecd 	bl	800a294 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	795b      	ldrb	r3, [r3, #5]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fec7 	bl	800a294 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800951a:	2200      	movs	r2, #0
 800951c:	4619      	mov	r1, r3
 800951e:	f000 ff79 	bl	800a414 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	f04f 32ff 	mov.w	r2, #4294967295
 8009542:	4618      	mov	r0, r3
 8009544:	f000 ffa6 	bl	800a494 <osMessageGet>
    if (event.status == osEventMessage)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b10      	cmp	r3, #16
 800954c:	d1f2      	bne.n	8009534 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fad0 	bl	8008af4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009554:	e7ee      	b.n	8009534 <USBH_Process_OS+0x8>

08009556 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009572:	2200      	movs	r2, #0
 8009574:	4619      	mov	r1, r3
 8009576:	f000 ff4d 	bl	800a414 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af02      	add	r7, sp, #8
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009596:	78fb      	ldrb	r3, [r7, #3]
 8009598:	b29b      	uxth	r3, r3
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	4613      	mov	r3, r2
 800959e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095a2:	2100      	movs	r1, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f864 	bl	8009672 <USBH_GetDescriptor>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	b292      	uxth	r2, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	f000 f918 	bl	80097fa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af02      	add	r7, sp, #8
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	331c      	adds	r3, #28
 80095e4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80095e6:	887b      	ldrh	r3, [r7, #2]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f83d 	bl	8009672 <USBH_GetDescriptor>
 80095f8:	4603      	mov	r3, r0
 80095fa:	72fb      	strb	r3, [r7, #11]
 80095fc:	7afb      	ldrb	r3, [r7, #11]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d107      	bne.n	8009612 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	68f9      	ldr	r1, [r7, #12]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f964 	bl	80098da <USBH_ParseCfgDesc>
  }

  return status;
 8009612:	7afb      	ldrb	r3, [r7, #11]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	607a      	str	r2, [r7, #4]
 8009626:	461a      	mov	r2, r3
 8009628:	460b      	mov	r3, r1
 800962a:	72fb      	strb	r3, [r7, #11]
 800962c:	4613      	mov	r3, r2
 800962e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009630:	7afb      	ldrb	r3, [r7, #11]
 8009632:	b29b      	uxth	r3, r3
 8009634:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009638:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009640:	893b      	ldrh	r3, [r7, #8]
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	460b      	mov	r3, r1
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f812 	bl	8009672 <USBH_GetDescriptor>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d107      	bne.n	8009668 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800965e:	893a      	ldrh	r2, [r7, #8]
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fa37 	bl	8009ad6 <USBH_ParseStringDesc>
  }

  return status;
 8009668:	7dfb      	ldrb	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	607b      	str	r3, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	72fb      	strb	r3, [r7, #11]
 8009680:	4613      	mov	r3, r2
 8009682:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	789b      	ldrb	r3, [r3, #2]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d11c      	bne.n	80096c6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009692:	b2da      	uxtb	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2206      	movs	r2, #6
 800969c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	893a      	ldrh	r2, [r7, #8]
 80096a2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80096a4:	893b      	ldrh	r3, [r7, #8]
 80096a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80096aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ae:	d104      	bne.n	80096ba <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f240 4209 	movw	r2, #1033	; 0x409
 80096b6:	829a      	strh	r2, [r3, #20]
 80096b8:	e002      	b.n	80096c0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8b3a      	ldrh	r2, [r7, #24]
 80096c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80096c6:	8b3b      	ldrh	r3, [r7, #24]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fa50 	bl	8009b72 <USBH_CtlReq>
 80096d2:	4603      	mov	r3, r0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	789b      	ldrb	r3, [r3, #2]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d10f      	bne.n	8009710 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2205      	movs	r2, #5
 80096fa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	b29a      	uxth	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009710:	2200      	movs	r2, #0
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fa2c 	bl	8009b72 <USBH_CtlReq>
 800971a:	4603      	mov	r3, r0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	789b      	ldrb	r3, [r3, #2]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d10e      	bne.n	8009756 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2209      	movs	r2, #9
 8009742:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	887a      	ldrh	r2, [r7, #2]
 8009748:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fa09 	bl	8009b72 <USBH_CtlReq>
 8009760:	4603      	mov	r3, r0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	789b      	ldrb	r3, [r3, #2]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d10f      	bne.n	800979e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2203      	movs	r2, #3
 8009788:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f9e5 	bl	8009b72 <USBH_CtlReq>
 80097a8:	4603      	mov	r3, r0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d10f      	bne.n	80097e6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f9c1 	bl	8009b72 <USBH_CtlReq>
 80097f0:	4603      	mov	r3, r0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	4613      	mov	r3, r2
 8009806:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	785a      	ldrb	r2, [r3, #1]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3302      	adds	r3, #2
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29a      	uxth	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3303      	adds	r3, #3
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	791a      	ldrb	r2, [r3, #4]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	795a      	ldrb	r2, [r3, #5]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	799a      	ldrb	r2, [r3, #6]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	79da      	ldrb	r2, [r3, #7]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	2b08      	cmp	r3, #8
 8009858:	d939      	bls.n	80098ce <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	3308      	adds	r3, #8
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	b29a      	uxth	r2, r3
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3309      	adds	r3, #9
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	b29b      	uxth	r3, r3
 800986e:	4313      	orrs	r3, r2
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	330a      	adds	r3, #10
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b29a      	uxth	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	330b      	adds	r3, #11
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	021b      	lsls	r3, r3, #8
 8009888:	b29b      	uxth	r3, r3
 800988a:	4313      	orrs	r3, r2
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	330c      	adds	r3, #12
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	b29a      	uxth	r2, r3
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	330d      	adds	r3, #13
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	021b      	lsls	r3, r3, #8
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4313      	orrs	r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	7b9a      	ldrb	r2, [r3, #14]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	7bda      	ldrb	r2, [r3, #15]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	7c1a      	ldrb	r2, [r3, #16]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	7c5a      	ldrb	r2, [r3, #17]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	745a      	strb	r2, [r3, #17]
  }
}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b08a      	sub	sp, #40	; 0x28
 80098de:	af00      	add	r7, sp, #0
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	781a      	ldrb	r2, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	785a      	ldrb	r2, [r3, #1]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	3302      	adds	r3, #2
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	b29a      	uxth	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3303      	adds	r3, #3
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	021b      	lsls	r3, r3, #8
 800991e:	b29b      	uxth	r3, r3
 8009920:	4313      	orrs	r3, r2
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	791a      	ldrb	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	795a      	ldrb	r2, [r3, #5]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	799a      	ldrb	r2, [r3, #6]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	79da      	ldrb	r2, [r3, #7]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	7a1a      	ldrb	r2, [r3, #8]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009950:	88fb      	ldrh	r3, [r7, #6]
 8009952:	2b09      	cmp	r3, #9
 8009954:	d95f      	bls.n	8009a16 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009956:	2309      	movs	r3, #9
 8009958:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800995e:	e051      	b.n	8009a04 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009960:	f107 0316 	add.w	r3, r7, #22
 8009964:	4619      	mov	r1, r3
 8009966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009968:	f000 f8e8 	bl	8009b3c <USBH_GetNextDesc>
 800996c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	2b04      	cmp	r3, #4
 8009974:	d146      	bne.n	8009a04 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800997a:	221a      	movs	r2, #26
 800997c:	fb02 f303 	mul.w	r3, r2, r3
 8009980:	3308      	adds	r3, #8
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	3302      	adds	r3, #2
 8009988:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800998a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800998c:	69f8      	ldr	r0, [r7, #28]
 800998e:	f000 f846 	bl	8009a1e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009998:	2300      	movs	r3, #0
 800999a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800999c:	e022      	b.n	80099e4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800999e:	f107 0316 	add.w	r3, r7, #22
 80099a2:	4619      	mov	r1, r3
 80099a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a6:	f000 f8c9 	bl	8009b3c <USBH_GetNextDesc>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b05      	cmp	r3, #5
 80099b2:	d117      	bne.n	80099e4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80099bc:	3201      	adds	r2, #1
 80099be:	00d2      	lsls	r2, r2, #3
 80099c0:	211a      	movs	r1, #26
 80099c2:	fb01 f303 	mul.w	r3, r1, r3
 80099c6:	4413      	add	r3, r2
 80099c8:	3308      	adds	r3, #8
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	3304      	adds	r3, #4
 80099d0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80099d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099d4:	69b8      	ldr	r0, [r7, #24]
 80099d6:	f000 f851 	bl	8009a7c <USBH_ParseEPDesc>
            ep_ix++;
 80099da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80099de:	3301      	adds	r3, #1
 80099e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	791b      	ldrb	r3, [r3, #4]
 80099e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d204      	bcs.n	80099fa <USBH_ParseCfgDesc+0x120>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	885a      	ldrh	r2, [r3, #2]
 80099f4:	8afb      	ldrh	r3, [r7, #22]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d8d1      	bhi.n	800999e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80099fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099fe:	3301      	adds	r3, #1
 8009a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d804      	bhi.n	8009a16 <USBH_ParseCfgDesc+0x13c>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	885a      	ldrh	r2, [r3, #2]
 8009a10:	8afb      	ldrh	r3, [r7, #22]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d8a4      	bhi.n	8009960 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009a16:	bf00      	nop
 8009a18:	3728      	adds	r7, #40	; 0x28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	785a      	ldrb	r2, [r3, #1]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	789a      	ldrb	r2, [r3, #2]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	78da      	ldrb	r2, [r3, #3]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	791a      	ldrb	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	795a      	ldrb	r2, [r3, #5]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	799a      	ldrb	r2, [r3, #6]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	79da      	ldrb	r2, [r3, #7]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	7a1a      	ldrb	r2, [r3, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	721a      	strb	r2, [r3, #8]
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	785a      	ldrb	r2, [r3, #1]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	789a      	ldrb	r2, [r3, #2]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	78da      	ldrb	r2, [r3, #3]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	3305      	adds	r3, #5
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4313      	orrs	r3, r2
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	799a      	ldrb	r2, [r3, #6]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	719a      	strb	r2, [r3, #6]
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b087      	sub	sp, #28
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d120      	bne.n	8009b30 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	1e9a      	subs	r2, r3, #2
 8009af4:	88fb      	ldrh	r3, [r7, #6]
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bf28      	it	cs
 8009afa:	4613      	movcs	r3, r2
 8009afc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3302      	adds	r3, #2
 8009b02:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b04:	2300      	movs	r3, #0
 8009b06:	82fb      	strh	r3, [r7, #22]
 8009b08:	e00b      	b.n	8009b22 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b0a:	8afb      	ldrh	r3, [r7, #22]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	781a      	ldrb	r2, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b1c:	8afb      	ldrh	r3, [r7, #22]
 8009b1e:	3302      	adds	r3, #2
 8009b20:	82fb      	strh	r3, [r7, #22]
 8009b22:	8afa      	ldrh	r2, [r7, #22]
 8009b24:	8abb      	ldrh	r3, [r7, #20]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d3ef      	bcc.n	8009b0a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	701a      	strb	r2, [r3, #0]
  }
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	881a      	ldrh	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4413      	add	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b64:	68fb      	ldr	r3, [r7, #12]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	789b      	ldrb	r3, [r3, #2]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d002      	beq.n	8009b92 <USBH_CtlReq+0x20>
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d01d      	beq.n	8009bcc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009b90:	e043      	b.n	8009c1a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	88fa      	ldrh	r2, [r7, #6]
 8009b9c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009baa:	2301      	movs	r3, #1
 8009bac:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f000 fc25 	bl	800a414 <osMessagePut>
      break;
 8009bca:	e026      	b.n	8009c1a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f829 	bl	8009c24 <USBH_HandleControl>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <USBH_CtlReq+0x70>
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d106      	bne.n	8009bf0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	761a      	strb	r2, [r3, #24]
 8009bee:	e005      	b.n	8009bfc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009bf0:	7dfb      	ldrb	r3, [r7, #23]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d102      	bne.n	8009bfc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2203      	movs	r2, #3
 8009c00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009c10:	2200      	movs	r2, #0
 8009c12:	4619      	mov	r1, r3
 8009c14:	f000 fbfe 	bl	800a414 <osMessagePut>
      break;
 8009c18:	bf00      	nop
  }
  return status;
 8009c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7e1b      	ldrb	r3, [r3, #24]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	2b0a      	cmp	r3, #10
 8009c3c:	f200 8229 	bhi.w	800a092 <USBH_HandleControl+0x46e>
 8009c40:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <USBH_HandleControl+0x24>)
 8009c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c46:	bf00      	nop
 8009c48:	08009c75 	.word	0x08009c75
 8009c4c:	08009c8f 	.word	0x08009c8f
 8009c50:	08009d31 	.word	0x08009d31
 8009c54:	08009d57 	.word	0x08009d57
 8009c58:	08009de3 	.word	0x08009de3
 8009c5c:	08009e0d 	.word	0x08009e0d
 8009c60:	08009ecf 	.word	0x08009ecf
 8009c64:	08009ef1 	.word	0x08009ef1
 8009c68:	08009f83 	.word	0x08009f83
 8009c6c:	08009fa9 	.word	0x08009fa9
 8009c70:	0800a03b 	.word	0x0800a03b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f103 0110 	add.w	r1, r3, #16
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	795b      	ldrb	r3, [r3, #5]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa17 	bl	800a0b4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	761a      	strb	r2, [r3, #24]
      break;
 8009c8c:	e20c      	b.n	800a0a8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	795b      	ldrb	r3, [r3, #5]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7f8 fe09 	bl	80028ac <USBH_LL_GetURBState>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d12c      	bne.n	8009cfe <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	7c1b      	ldrb	r3, [r3, #16]
 8009ca8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	8adb      	ldrh	r3, [r3, #22]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00a      	beq.n	8009ccc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009cb6:	7b7b      	ldrb	r3, [r7, #13]
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d103      	bne.n	8009cc4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	761a      	strb	r2, [r3, #24]
 8009cc2:	e00d      	b.n	8009ce0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2205      	movs	r2, #5
 8009cc8:	761a      	strb	r2, [r3, #24]
 8009cca:	e009      	b.n	8009ce0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009ccc:	7b7b      	ldrb	r3, [r7, #13]
 8009cce:	2b80      	cmp	r3, #128	; 0x80
 8009cd0:	d103      	bne.n	8009cda <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2209      	movs	r2, #9
 8009cd6:	761a      	strb	r2, [r3, #24]
 8009cd8:	e002      	b.n	8009ce0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2207      	movs	r2, #7
 8009cde:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2203      	movs	r2, #3
 8009ce4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f000 fb8c 	bl	800a414 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cfc:	e1cb      	b.n	800a096 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d003      	beq.n	8009d0c <USBH_HandleControl+0xe8>
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	f040 81c5 	bne.w	800a096 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	220b      	movs	r2, #11
 8009d10:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2203      	movs	r2, #3
 8009d16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d26:	2200      	movs	r2, #0
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f000 fb73 	bl	800a414 <osMessagePut>
      break;
 8009d2e:	e1b2      	b.n	800a096 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6899      	ldr	r1, [r3, #8]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	899a      	ldrh	r2, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	791b      	ldrb	r3, [r3, #4]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f9f2 	bl	800a132 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2204      	movs	r2, #4
 8009d52:	761a      	strb	r2, [r3, #24]
      break;
 8009d54:	e1a8      	b.n	800a0a8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	791b      	ldrb	r3, [r3, #4]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7f8 fda5 	bl	80028ac <USBH_LL_GetURBState>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d110      	bne.n	8009d8e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2209      	movs	r2, #9
 8009d70:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2203      	movs	r2, #3
 8009d76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d86:	2200      	movs	r2, #0
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f000 fb43 	bl	800a414 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d110      	bne.n	8009db6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009d94:	2303      	movs	r3, #3
 8009d96:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dac:	2200      	movs	r2, #0
 8009dae:	4619      	mov	r1, r3
 8009db0:	f000 fb30 	bl	800a414 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009db4:	e171      	b.n	800a09a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	f040 816e 	bne.w	800a09a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	220b      	movs	r2, #11
 8009dc2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4619      	mov	r1, r3
 8009ddc:	f000 fb1a 	bl	800a414 <osMessagePut>
      break;
 8009de0:	e15b      	b.n	800a09a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6899      	ldr	r1, [r3, #8]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	899a      	ldrh	r2, [r3, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	795b      	ldrb	r3, [r3, #5]
 8009dee:	2001      	movs	r0, #1
 8009df0:	9000      	str	r0, [sp, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f978 	bl	800a0e8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2206      	movs	r2, #6
 8009e08:	761a      	strb	r2, [r3, #24]
      break;
 8009e0a:	e14d      	b.n	800a0a8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	795b      	ldrb	r3, [r3, #5]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7f8 fd4a 	bl	80028ac <USBH_LL_GetURBState>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d111      	bne.n	8009e46 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2207      	movs	r2, #7
 8009e26:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4619      	mov	r1, r3
 8009e40:	f000 fae8 	bl	800a414 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e44:	e12b      	b.n	800a09e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	d113      	bne.n	8009e74 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220c      	movs	r2, #12
 8009e50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e52:	2303      	movs	r3, #3
 8009e54:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2203      	movs	r2, #3
 8009e5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f000 fad1 	bl	800a414 <osMessagePut>
      break;
 8009e72:	e114      	b.n	800a09e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d111      	bne.n	8009e9e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2203      	movs	r2, #3
 8009e84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e94:	2200      	movs	r2, #0
 8009e96:	4619      	mov	r1, r3
 8009e98:	f000 fabc 	bl	800a414 <osMessagePut>
      break;
 8009e9c:	e0ff      	b.n	800a09e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b04      	cmp	r3, #4
 8009ea2:	f040 80fc 	bne.w	800a09e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	220b      	movs	r2, #11
 8009eaa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009eac:	2302      	movs	r3, #2
 8009eae:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	f000 faa4 	bl	800a414 <osMessagePut>
      break;
 8009ecc:	e0e7      	b.n	800a09e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f92b 	bl	800a132 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2208      	movs	r2, #8
 8009eec:	761a      	strb	r2, [r3, #24]

      break;
 8009eee:	e0db      	b.n	800a0a8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7f8 fcd8 	bl	80028ac <USBH_LL_GetURBState>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d113      	bne.n	8009f2e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	220d      	movs	r2, #13
 8009f0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2203      	movs	r2, #3
 8009f14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f24:	2200      	movs	r2, #0
 8009f26:	4619      	mov	r1, r3
 8009f28:	f000 fa74 	bl	800a414 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f2c:	e0b9      	b.n	800a0a2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d111      	bne.n	8009f58 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	220b      	movs	r2, #11
 8009f38:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4619      	mov	r1, r3
 8009f52:	f000 fa5f 	bl	800a414 <osMessagePut>
      break;
 8009f56:	e0a4      	b.n	800a0a2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	f040 80a1 	bne.w	800a0a2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009f60:	2303      	movs	r3, #3
 8009f62:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2203      	movs	r2, #3
 8009f68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f000 fa4a 	bl	800a414 <osMessagePut>
      break;
 8009f80:	e08f      	b.n	800a0a2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	795b      	ldrb	r3, [r3, #5]
 8009f86:	2201      	movs	r2, #1
 8009f88:	9200      	str	r2, [sp, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f8aa 	bl	800a0e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	220a      	movs	r2, #10
 8009fa4:	761a      	strb	r2, [r3, #24]
      break;
 8009fa6:	e07f      	b.n	800a0a8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	795b      	ldrb	r3, [r3, #5]
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7f8 fc7c 	bl	80028ac <USBH_LL_GetURBState>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d113      	bne.n	8009fe6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	220d      	movs	r2, #13
 8009fc6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fdc:	2200      	movs	r2, #0
 8009fde:	4619      	mov	r1, r3
 8009fe0:	f000 fa18 	bl	800a414 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009fe4:	e05f      	b.n	800a0a6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d111      	bne.n	800a010 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2209      	movs	r2, #9
 8009ff0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2203      	movs	r2, #3
 8009ff6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a006:	2200      	movs	r2, #0
 800a008:	4619      	mov	r1, r3
 800a00a:	f000 fa03 	bl	800a414 <osMessagePut>
      break;
 800a00e:	e04a      	b.n	800a0a6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a010:	7bbb      	ldrb	r3, [r7, #14]
 800a012:	2b04      	cmp	r3, #4
 800a014:	d147      	bne.n	800a0a6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	220b      	movs	r2, #11
 800a01a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2203      	movs	r2, #3
 800a020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a030:	2200      	movs	r2, #0
 800a032:	4619      	mov	r1, r3
 800a034:	f000 f9ee 	bl	800a414 <osMessagePut>
      break;
 800a038:	e035      	b.n	800a0a6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7e5b      	ldrb	r3, [r3, #25]
 800a03e:	3301      	adds	r3, #1
 800a040:	b2da      	uxtb	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	765a      	strb	r2, [r3, #25]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7e5b      	ldrb	r3, [r3, #25]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d806      	bhi.n	800a05c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a05a:	e025      	b.n	800a0a8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a062:	2106      	movs	r1, #6
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	795b      	ldrb	r3, [r3, #5]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f90d 	bl	800a294 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	791b      	ldrb	r3, [r3, #4]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 f907 	bl	800a294 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a08c:	2302      	movs	r3, #2
 800a08e:	73fb      	strb	r3, [r7, #15]
      break;
 800a090:	e00a      	b.n	800a0a8 <USBH_HandleControl+0x484>

    default:
      break;
 800a092:	bf00      	nop
 800a094:	e008      	b.n	800a0a8 <USBH_HandleControl+0x484>
      break;
 800a096:	bf00      	nop
 800a098:	e006      	b.n	800a0a8 <USBH_HandleControl+0x484>
      break;
 800a09a:	bf00      	nop
 800a09c:	e004      	b.n	800a0a8 <USBH_HandleControl+0x484>
      break;
 800a09e:	bf00      	nop
 800a0a0:	e002      	b.n	800a0a8 <USBH_HandleControl+0x484>
      break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <USBH_HandleControl+0x484>
      break;
 800a0a6:	bf00      	nop
  }

  return status;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a0c2:	79f9      	ldrb	r1, [r7, #7]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9303      	str	r3, [sp, #12]
 800a0c8:	2308      	movs	r3, #8
 800a0ca:	9302      	str	r3, [sp, #8]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	9301      	str	r3, [sp, #4]
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7f8 fb9f 	bl	800281c <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b088      	sub	sp, #32
 800a0ec:	af04      	add	r7, sp, #16
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	80fb      	strh	r3, [r7, #6]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a10c:	7979      	ldrb	r1, [r7, #5]
 800a10e:	7e3b      	ldrb	r3, [r7, #24]
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	88fb      	ldrh	r3, [r7, #6]
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	2301      	movs	r3, #1
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	2300      	movs	r3, #0
 800a120:	2200      	movs	r2, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f7f8 fb7a 	bl	800281c <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b088      	sub	sp, #32
 800a136:	af04      	add	r7, sp, #16
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	4611      	mov	r1, r2
 800a13e:	461a      	mov	r2, r3
 800a140:	460b      	mov	r3, r1
 800a142:	80fb      	strh	r3, [r7, #6]
 800a144:	4613      	mov	r3, r2
 800a146:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a148:	7979      	ldrb	r1, [r7, #5]
 800a14a:	2300      	movs	r3, #0
 800a14c:	9303      	str	r3, [sp, #12]
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	9302      	str	r3, [sp, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	2301      	movs	r3, #1
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	2300      	movs	r3, #0
 800a15c:	2201      	movs	r2, #1
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7f8 fb5c 	bl	800281c <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a164:	2300      	movs	r3, #0

}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b088      	sub	sp, #32
 800a172:	af04      	add	r7, sp, #16
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	4611      	mov	r1, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	460b      	mov	r3, r1
 800a17e:	80fb      	strh	r3, [r7, #6]
 800a180:	4613      	mov	r3, r2
 800a182:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a18e:	2300      	movs	r3, #0
 800a190:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a192:	7979      	ldrb	r1, [r7, #5]
 800a194:	7e3b      	ldrb	r3, [r7, #24]
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	9302      	str	r3, [sp, #8]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7f8 fb37 	bl	800281c <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b088      	sub	sp, #32
 800a1bc:	af04      	add	r7, sp, #16
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	80fb      	strh	r3, [r7, #6]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a1ce:	7979      	ldrb	r1, [r7, #5]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	9302      	str	r3, [sp, #8]
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	2301      	movs	r3, #1
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	f7f8 fb19 	bl	800281c <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af04      	add	r7, sp, #16
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	4611      	mov	r1, r2
 800a200:	461a      	mov	r2, r3
 800a202:	4603      	mov	r3, r0
 800a204:	70fb      	strb	r3, [r7, #3]
 800a206:	460b      	mov	r3, r1
 800a208:	70bb      	strb	r3, [r7, #2]
 800a20a:	4613      	mov	r3, r2
 800a20c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a20e:	7878      	ldrb	r0, [r7, #1]
 800a210:	78ba      	ldrb	r2, [r7, #2]
 800a212:	78f9      	ldrb	r1, [r7, #3]
 800a214:	8b3b      	ldrh	r3, [r7, #24]
 800a216:	9302      	str	r3, [sp, #8]
 800a218:	7d3b      	ldrb	r3, [r7, #20]
 800a21a:	9301      	str	r3, [sp, #4]
 800a21c:	7c3b      	ldrb	r3, [r7, #16]
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	4603      	mov	r3, r0
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7f8 fa7e 	bl	8002724 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a23e:	78fb      	ldrb	r3, [r7, #3]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7f8 fab4 	bl	80027b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f836 	bl	800a2d0 <USBH_GetFreePipe>
 800a264:	4603      	mov	r3, r0
 800a266:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a268:	89fb      	ldrh	r3, [r7, #14]
 800a26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00a      	beq.n	800a288 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	89fb      	ldrh	r3, [r7, #14]
 800a276:	f003 030f 	and.w	r3, r3, #15
 800a27a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	33e0      	adds	r3, #224	; 0xe0
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a288:	89fb      	ldrh	r3, [r7, #14]
 800a28a:	b2db      	uxtb	r3, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	2b0a      	cmp	r3, #10
 800a2a4:	d80d      	bhi.n	800a2c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a2a6:	78fb      	ldrb	r3, [r7, #3]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	33e0      	adds	r3, #224	; 0xe0
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	33e0      	adds	r3, #224	; 0xe0
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	440b      	add	r3, r1
 800a2c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
 800a2e0:	e00f      	b.n	800a302 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	33e0      	adds	r3, #224	; 0xe0
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	e007      	b.n	800a30c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	3301      	adds	r3, #1
 800a300:	73fb      	strb	r3, [r7, #15]
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b0a      	cmp	r3, #10
 800a306:	d9ec      	bls.n	800a2e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a308:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a322:	2300      	movs	r3, #0
 800a324:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a32a:	2b84      	cmp	r3, #132	; 0x84
 800a32c:	d005      	beq.n	800a33a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a32e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	4413      	add	r3, r2
 800a336:	3303      	adds	r3, #3
 800a338:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a33a:	68fb      	ldr	r3, [r7, #12]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a34e:	f3ef 8305 	mrs	r3, IPSR
 800a352:	607b      	str	r3, [r7, #4]
  return(result);
 800a354:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a356:	2b00      	cmp	r3, #0
 800a358:	bf14      	ite	ne
 800a35a:	2301      	movne	r3, #1
 800a35c:	2300      	moveq	r3, #0
 800a35e:	b2db      	uxtb	r3, r3
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a370:	f001 f9e4 	bl	800b73c <vTaskStartScheduler>
  
  return osOK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	bd80      	pop	{r7, pc}

0800a37a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37c:	b087      	sub	sp, #28
 800a37e:	af02      	add	r7, sp, #8
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685c      	ldr	r4, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a390:	b29e      	uxth	r6, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ffbd 	bl	800a318 <makeFreeRtosPriority>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	9200      	str	r2, [sp, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 ffe0 	bl	800b374 <xTaskCreate>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d001      	beq.n	800a3be <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e000      	b.n	800a3c0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a3be:	68fb      	ldr	r3, [r7, #12]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <osDelay+0x16>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	e000      	b.n	800a3e0 <osDelay+0x18>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f001 f977 	bl	800b6d4 <vTaskDelay>
  
  return osOK;
 800a3e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6818      	ldr	r0, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	4619      	mov	r1, r3
 800a406:	f000 f9e1 	bl	800a7cc <xQueueGenericCreate>
 800a40a:	4603      	mov	r3, r0
#endif
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a420:	2300      	movs	r3, #0
 800a422:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <osMessagePut+0x1e>
    ticks = 1;
 800a42e:	2301      	movs	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a432:	f7ff ff89 	bl	800a348 <inHandlerMode>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d018      	beq.n	800a46e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a43c:	f107 0210 	add.w	r2, r7, #16
 800a440:	f107 0108 	add.w	r1, r7, #8
 800a444:	2300      	movs	r3, #0
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 fb46 	bl	800aad8 <xQueueGenericSendFromISR>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d001      	beq.n	800a456 <osMessagePut+0x42>
      return osErrorOS;
 800a452:	23ff      	movs	r3, #255	; 0xff
 800a454:	e018      	b.n	800a488 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d014      	beq.n	800a486 <osMessagePut+0x72>
 800a45c:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <osMessagePut+0x7c>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	e00b      	b.n	800a486 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a46e:	f107 0108 	add.w	r1, r7, #8
 800a472:	2300      	movs	r3, #0
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fa30 	bl	800a8dc <xQueueGenericSend>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d001      	beq.n	800a486 <osMessagePut+0x72>
      return osErrorOS;
 800a482:	23ff      	movs	r3, #255	; 0xff
 800a484:	e000      	b.n	800a488 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b08b      	sub	sp, #44	; 0x2c
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a4ae:	2380      	movs	r3, #128	; 0x80
 800a4b0:	617b      	str	r3, [r7, #20]
    return event;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	461c      	mov	r4, r3
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4c2:	e054      	b.n	800a56e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d103      	bne.n	800a4dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4da:	e009      	b.n	800a4f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d101      	bne.n	800a4f0 <osMessageGet+0x5c>
      ticks = 1;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a4f0:	f7ff ff2a 	bl	800a348 <inHandlerMode>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d01c      	beq.n	800a534 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a4fa:	f107 0220 	add.w	r2, r7, #32
 800a4fe:	f107 0314 	add.w	r3, r7, #20
 800a502:	3304      	adds	r3, #4
 800a504:	4619      	mov	r1, r3
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	f000 fd6e 	bl	800afe8 <xQueueReceiveFromISR>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d102      	bne.n	800a518 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a512:	2310      	movs	r3, #16
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	e001      	b.n	800a51c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a518:	2300      	movs	r3, #0
 800a51a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01d      	beq.n	800a55e <osMessageGet+0xca>
 800a522:	4b15      	ldr	r3, [pc, #84]	; (800a578 <osMessageGet+0xe4>)
 800a524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	e014      	b.n	800a55e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a534:	f107 0314 	add.w	r3, r7, #20
 800a538:	3304      	adds	r3, #4
 800a53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a53c:	4619      	mov	r1, r3
 800a53e:	68b8      	ldr	r0, [r7, #8]
 800a540:	f000 fb66 	bl	800ac10 <xQueueReceive>
 800a544:	4603      	mov	r3, r0
 800a546:	2b01      	cmp	r3, #1
 800a548:	d102      	bne.n	800a550 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a54a:	2310      	movs	r3, #16
 800a54c:	617b      	str	r3, [r7, #20]
 800a54e:	e006      	b.n	800a55e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <osMessageGet+0xc6>
 800a556:	2300      	movs	r3, #0
 800a558:	e000      	b.n	800a55c <osMessageGet+0xc8>
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	461c      	mov	r4, r3
 800a562:	f107 0314 	add.w	r3, r7, #20
 800a566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a56a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	372c      	adds	r7, #44	; 0x2c
 800a572:	46bd      	mov	sp, r7
 800a574:	bd90      	pop	{r4, r7, pc}
 800a576:	bf00      	nop
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a580:	f001 fcb4 	bl	800beec <xTaskGetSchedulerState>
 800a584:	4603      	mov	r3, r0
 800a586:	2b01      	cmp	r3, #1
 800a588:	d001      	beq.n	800a58e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a58a:	f002 f88d 	bl	800c6a8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a58e:	bf00      	nop
 800a590:	bd80      	pop	{r7, pc}

0800a592 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f103 0208 	add.w	r2, r3, #8
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f103 0208 	add.w	r2, r3, #8
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f103 0208 	add.w	r2, r3, #8
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	689a      	ldr	r2, [r3, #8]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	683a      	ldr	r2, [r7, #0]
 800a616:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	601a      	str	r2, [r3, #0]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d103      	bne.n	800a654 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	e00c      	b.n	800a66e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3308      	adds	r3, #8
 800a658:	60fb      	str	r3, [r7, #12]
 800a65a:	e002      	b.n	800a662 <vListInsert+0x2e>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	60fb      	str	r3, [r7, #12]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d2f6      	bcs.n	800a65c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	6892      	ldr	r2, [r2, #8]
 800a6bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6852      	ldr	r2, [r2, #4]
 800a6c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d103      	bne.n	800a6da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
	...

0800a6fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a722:	bf00      	nop
 800a724:	e7fe      	b.n	800a724 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a726:	f001 ff2d 	bl	800c584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a736:	fb01 f303 	mul.w	r3, r1, r3
 800a73a:	441a      	add	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a756:	3b01      	subs	r3, #1
 800a758:	68f9      	ldr	r1, [r7, #12]
 800a75a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a75c:	fb01 f303 	mul.w	r3, r1, r3
 800a760:	441a      	add	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	22ff      	movs	r2, #255	; 0xff
 800a76a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	22ff      	movs	r2, #255	; 0xff
 800a772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d114      	bne.n	800a7a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01a      	beq.n	800a7ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	3310      	adds	r3, #16
 800a788:	4618      	mov	r0, r3
 800a78a:	f001 fa11 	bl	800bbb0 <xTaskRemoveFromEventList>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d012      	beq.n	800a7ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a794:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <xQueueGenericReset+0xcc>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	e009      	b.n	800a7ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3310      	adds	r3, #16
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff fef1 	bl	800a592 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3324      	adds	r3, #36	; 0x24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff feec 	bl	800a592 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7ba:	f001 ff13 	bl	800c5e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7be:	2301      	movs	r3, #1
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08a      	sub	sp, #40	; 0x28
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	613b      	str	r3, [r7, #16]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	3348      	adds	r3, #72	; 0x48
 800a804:	4618      	mov	r0, r3
 800a806:	f001 ffdf 	bl	800c7c8 <pvPortMalloc>
 800a80a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00d      	beq.n	800a82e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	3348      	adds	r3, #72	; 0x48
 800a81a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a81c:	79fa      	ldrb	r2, [r7, #7]
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f805 	bl	800a838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a82e:	69bb      	ldr	r3, [r7, #24]
	}
 800a830:	4618      	mov	r0, r3
 800a832:	3720      	adds	r7, #32
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d103      	bne.n	800a854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	69ba      	ldr	r2, [r7, #24]
 800a850:	601a      	str	r2, [r3, #0]
 800a852:	e002      	b.n	800a85a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a866:	2101      	movs	r1, #1
 800a868:	69b8      	ldr	r0, [r7, #24]
 800a86a:	f7ff ff47 	bl	800a6fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a876:	b580      	push	{r7, lr}
 800a878:	b082      	sub	sp, #8
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00e      	beq.n	800a8a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a896:	2300      	movs	r3, #0
 800a898:	2200      	movs	r2, #0
 800a89a:	2100      	movs	r1, #0
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f81d 	bl	800a8dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a8a2:	bf00      	nop
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}

0800a8aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b086      	sub	sp, #24
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6939      	ldr	r1, [r7, #16]
 800a8c2:	6978      	ldr	r0, [r7, #20]
 800a8c4:	f7ff ff82 	bl	800a7cc <xQueueGenericCreate>
 800a8c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff ffd3 	bl	800a876 <prvInitialiseMutex>

		return xNewQueue;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
	}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08e      	sub	sp, #56	; 0x38
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <xQueueGenericSend+0x32>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d103      	bne.n	800a91c <xQueueGenericSend+0x40>
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <xQueueGenericSend+0x44>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e000      	b.n	800a922 <xQueueGenericSend+0x46>
 800a920:	2300      	movs	r3, #0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10a      	bne.n	800a93c <xQueueGenericSend+0x60>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d103      	bne.n	800a94a <xQueueGenericSend+0x6e>
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <xQueueGenericSend+0x72>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <xQueueGenericSend+0x74>
 800a94e:	2300      	movs	r3, #0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10a      	bne.n	800a96a <xQueueGenericSend+0x8e>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	623b      	str	r3, [r7, #32]
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a96a:	f001 fabf 	bl	800beec <xTaskGetSchedulerState>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <xQueueGenericSend+0x9e>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <xQueueGenericSend+0xa2>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <xQueueGenericSend+0xa4>
 800a97e:	2300      	movs	r3, #0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <xQueueGenericSend+0xbe>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61fb      	str	r3, [r7, #28]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a99a:	f001 fdf3 	bl	800c584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <xQueueGenericSend+0xd4>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d129      	bne.n	800aa04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b6:	f000 fbcd 	bl	800b154 <prvCopyDataToQueue>
 800a9ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d010      	beq.n	800a9e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	3324      	adds	r3, #36	; 0x24
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 f8f1 	bl	800bbb0 <xTaskRemoveFromEventList>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d013      	beq.n	800a9fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a9d4:	4b3f      	ldr	r3, [pc, #252]	; (800aad4 <xQueueGenericSend+0x1f8>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	e00a      	b.n	800a9fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9ec:	4b39      	ldr	r3, [pc, #228]	; (800aad4 <xQueueGenericSend+0x1f8>)
 800a9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9fc:	f001 fdf2 	bl	800c5e4 <vPortExitCritical>
				return pdPASS;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e063      	b.n	800aacc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d103      	bne.n	800aa12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa0a:	f001 fdeb 	bl	800c5e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e05c      	b.n	800aacc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d106      	bne.n	800aa26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa18:	f107 0314 	add.w	r3, r7, #20
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 f929 	bl	800bc74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa26:	f001 fddd 	bl	800c5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa2a:	f000 fecf 	bl	800b7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa2e:	f001 fda9 	bl	800c584 <vPortEnterCritical>
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa38:	b25b      	sxtb	r3, r3
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3e:	d103      	bne.n	800aa48 <xQueueGenericSend+0x16c>
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa4e:	b25b      	sxtb	r3, r3
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa54:	d103      	bne.n	800aa5e <xQueueGenericSend+0x182>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa5e:	f001 fdc1 	bl	800c5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa62:	1d3a      	adds	r2, r7, #4
 800aa64:	f107 0314 	add.w	r3, r7, #20
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f001 f918 	bl	800bca0 <xTaskCheckForTimeOut>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d124      	bne.n	800aac0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa78:	f000 fc64 	bl	800b344 <prvIsQueueFull>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d018      	beq.n	800aab4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	3310      	adds	r3, #16
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 f86c 	bl	800bb68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa92:	f000 fbef 	bl	800b274 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa96:	f000 fea7 	bl	800b7e8 <xTaskResumeAll>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f47f af7c 	bne.w	800a99a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aaa2:	4b0c      	ldr	r3, [pc, #48]	; (800aad4 <xQueueGenericSend+0x1f8>)
 800aaa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	e772      	b.n	800a99a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aab6:	f000 fbdd 	bl	800b274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaba:	f000 fe95 	bl	800b7e8 <xTaskResumeAll>
 800aabe:	e76c      	b.n	800a99a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aac2:	f000 fbd7 	bl	800b274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aac6:	f000 fe8f 	bl	800b7e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aaca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3738      	adds	r7, #56	; 0x38
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	e000ed04 	.word	0xe000ed04

0800aad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b090      	sub	sp, #64	; 0x40
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d103      	bne.n	800ab14 <xQueueGenericSendFromISR+0x3c>
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <xQueueGenericSendFromISR+0x40>
 800ab14:	2301      	movs	r3, #1
 800ab16:	e000      	b.n	800ab1a <xQueueGenericSendFromISR+0x42>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d103      	bne.n	800ab42 <xQueueGenericSendFromISR+0x6a>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d101      	bne.n	800ab46 <xQueueGenericSendFromISR+0x6e>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e000      	b.n	800ab48 <xQueueGenericSendFromISR+0x70>
 800ab46:	2300      	movs	r3, #0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	623b      	str	r3, [r7, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	e7fe      	b.n	800ab60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab62:	f001 fdf1 	bl	800c748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab66:	f3ef 8211 	mrs	r2, BASEPRI
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	61fa      	str	r2, [r7, #28]
 800ab7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d302      	bcc.n	800ab94 <xQueueGenericSendFromISR+0xbc>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d12f      	bne.n	800abf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	68b9      	ldr	r1, [r7, #8]
 800aba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abaa:	f000 fad3 	bl	800b154 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800abb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb6:	d112      	bne.n	800abde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d016      	beq.n	800abee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fff3 	bl	800bbb0 <xTaskRemoveFromEventList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00e      	beq.n	800abee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2201      	movs	r2, #1
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	e007      	b.n	800abee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abe2:	3301      	adds	r3, #1
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	b25a      	sxtb	r2, r3
 800abe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abee:	2301      	movs	r3, #1
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800abf2:	e001      	b.n	800abf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3740      	adds	r7, #64	; 0x40
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08c      	sub	sp, #48	; 0x30
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10a      	bne.n	800ac40 <xQueueReceive+0x30>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	623b      	str	r3, [r7, #32]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d103      	bne.n	800ac4e <xQueueReceive+0x3e>
 800ac46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <xQueueReceive+0x42>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <xQueueReceive+0x44>
 800ac52:	2300      	movs	r3, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xQueueReceive+0x5e>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	61fb      	str	r3, [r7, #28]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac6e:	f001 f93d 	bl	800beec <xTaskGetSchedulerState>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <xQueueReceive+0x6e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <xQueueReceive+0x72>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <xQueueReceive+0x74>
 800ac82:	2300      	movs	r3, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueReceive+0x8e>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	61bb      	str	r3, [r7, #24]
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac9e:	f001 fc71 	bl	800c584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01f      	beq.n	800acee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb2:	f000 fab9 	bl	800b228 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	1e5a      	subs	r2, r3, #1
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00f      	beq.n	800ace6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc8:	3310      	adds	r3, #16
 800acca:	4618      	mov	r0, r3
 800accc:	f000 ff70 	bl	800bbb0 <xTaskRemoveFromEventList>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d007      	beq.n	800ace6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acd6:	4b3d      	ldr	r3, [pc, #244]	; (800adcc <xQueueReceive+0x1bc>)
 800acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ace6:	f001 fc7d 	bl	800c5e4 <vPortExitCritical>
				return pdPASS;
 800acea:	2301      	movs	r3, #1
 800acec:	e069      	b.n	800adc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d103      	bne.n	800acfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acf4:	f001 fc76 	bl	800c5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acf8:	2300      	movs	r3, #0
 800acfa:	e062      	b.n	800adc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d106      	bne.n	800ad10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad02:	f107 0310 	add.w	r3, r7, #16
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 ffb4 	bl	800bc74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad10:	f001 fc68 	bl	800c5e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad14:	f000 fd5a 	bl	800b7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad18:	f001 fc34 	bl	800c584 <vPortEnterCritical>
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad22:	b25b      	sxtb	r3, r3
 800ad24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad28:	d103      	bne.n	800ad32 <xQueueReceive+0x122>
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad38:	b25b      	sxtb	r3, r3
 800ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3e:	d103      	bne.n	800ad48 <xQueueReceive+0x138>
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad48:	f001 fc4c 	bl	800c5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad4c:	1d3a      	adds	r2, r7, #4
 800ad4e:	f107 0310 	add.w	r3, r7, #16
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 ffa3 	bl	800bca0 <xTaskCheckForTimeOut>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d123      	bne.n	800ada8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad62:	f000 fad9 	bl	800b318 <prvIsQueueEmpty>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d017      	beq.n	800ad9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	3324      	adds	r3, #36	; 0x24
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4611      	mov	r1, r2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 fef7 	bl	800bb68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad7c:	f000 fa7a 	bl	800b274 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad80:	f000 fd32 	bl	800b7e8 <xTaskResumeAll>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d189      	bne.n	800ac9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad8a:	4b10      	ldr	r3, [pc, #64]	; (800adcc <xQueueReceive+0x1bc>)
 800ad8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	e780      	b.n	800ac9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad9e:	f000 fa69 	bl	800b274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ada2:	f000 fd21 	bl	800b7e8 <xTaskResumeAll>
 800ada6:	e77a      	b.n	800ac9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ada8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adaa:	f000 fa63 	bl	800b274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adae:	f000 fd1b 	bl	800b7e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adb4:	f000 fab0 	bl	800b318 <prvIsQueueEmpty>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f43f af6f 	beq.w	800ac9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3730      	adds	r7, #48	; 0x30
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08e      	sub	sp, #56	; 0x38
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800adda:	2300      	movs	r3, #0
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ade2:	2300      	movs	r3, #0
 800ade4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10a      	bne.n	800ae02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	623b      	str	r3, [r7, #32]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	61fb      	str	r3, [r7, #28]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae20:	f001 f864 	bl	800beec <xTaskGetSchedulerState>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d102      	bne.n	800ae30 <xQueueSemaphoreTake+0x60>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <xQueueSemaphoreTake+0x64>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <xQueueSemaphoreTake+0x66>
 800ae34:	2300      	movs	r3, #0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	61bb      	str	r3, [r7, #24]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae50:	f001 fb98 	bl	800c584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d024      	beq.n	800aeaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	1e5a      	subs	r2, r3, #1
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d104      	bne.n	800ae7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae70:	f001 f9e4 	bl	800c23c <pvTaskIncrementMutexHeldCount>
 800ae74:	4602      	mov	r2, r0
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00f      	beq.n	800aea2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	3310      	adds	r3, #16
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 fe92 	bl	800bbb0 <xTaskRemoveFromEventList>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae92:	4b54      	ldr	r3, [pc, #336]	; (800afe4 <xQueueSemaphoreTake+0x214>)
 800ae94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aea2:	f001 fb9f 	bl	800c5e4 <vPortExitCritical>
				return pdPASS;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e097      	b.n	800afda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d111      	bne.n	800aed4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	617b      	str	r3, [r7, #20]
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aecc:	f001 fb8a 	bl	800c5e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aed0:	2300      	movs	r3, #0
 800aed2:	e082      	b.n	800afda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aeda:	f107 030c 	add.w	r3, r7, #12
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fec8 	bl	800bc74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aee4:	2301      	movs	r3, #1
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aee8:	f001 fb7c 	bl	800c5e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeec:	f000 fc6e 	bl	800b7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aef0:	f001 fb48 	bl	800c584 <vPortEnterCritical>
 800aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d103      	bne.n	800af0a <xQueueSemaphoreTake+0x13a>
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af10:	b25b      	sxtb	r3, r3
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d103      	bne.n	800af20 <xQueueSemaphoreTake+0x150>
 800af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af20:	f001 fb60 	bl	800c5e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af24:	463a      	mov	r2, r7
 800af26:	f107 030c 	add.w	r3, r7, #12
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 feb7 	bl	800bca0 <xTaskCheckForTimeOut>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d132      	bne.n	800af9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af3a:	f000 f9ed 	bl	800b318 <prvIsQueueEmpty>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d026      	beq.n	800af92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d109      	bne.n	800af60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af4c:	f001 fb1a 	bl	800c584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 ffe7 	bl	800bf28 <xTaskPriorityInherit>
 800af5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af5c:	f001 fb42 	bl	800c5e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	3324      	adds	r3, #36	; 0x24
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	4611      	mov	r1, r2
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fdfd 	bl	800bb68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af70:	f000 f980 	bl	800b274 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af74:	f000 fc38 	bl	800b7e8 <xTaskResumeAll>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f47f af68 	bne.w	800ae50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af80:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <xQueueSemaphoreTake+0x214>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	e75e      	b.n	800ae50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af94:	f000 f96e 	bl	800b274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af98:	f000 fc26 	bl	800b7e8 <xTaskResumeAll>
 800af9c:	e758      	b.n	800ae50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa0:	f000 f968 	bl	800b274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afa4:	f000 fc20 	bl	800b7e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afaa:	f000 f9b5 	bl	800b318 <prvIsQueueEmpty>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f43f af4d 	beq.w	800ae50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800afbc:	f001 fae2 	bl	800c584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc2:	f000 f8af 	bl	800b124 <prvGetDisinheritPriorityAfterTimeout>
 800afc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800afc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 f8a6 	bl	800c120 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800afd4:	f001 fb06 	bl	800c5e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3738      	adds	r7, #56	; 0x38
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	e000ed04 	.word	0xe000ed04

0800afe8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08e      	sub	sp, #56	; 0x38
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	60b9      	str	r1, [r7, #8]
 800aff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	2b00      	cmp	r3, #0
 800affc:	d10a      	bne.n	800b014 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	623b      	str	r3, [r7, #32]
}
 800b010:	bf00      	nop
 800b012:	e7fe      	b.n	800b012 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d103      	bne.n	800b022 <xQueueReceiveFromISR+0x3a>
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <xQueueReceiveFromISR+0x3e>
 800b022:	2301      	movs	r3, #1
 800b024:	e000      	b.n	800b028 <xQueueReceiveFromISR+0x40>
 800b026:	2300      	movs	r3, #0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10a      	bne.n	800b042 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	61fb      	str	r3, [r7, #28]
}
 800b03e:	bf00      	nop
 800b040:	e7fe      	b.n	800b040 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b042:	f001 fb81 	bl	800c748 <vPortValidateInterruptPriority>
	__asm volatile
 800b046:	f3ef 8211 	mrs	r2, BASEPRI
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	61ba      	str	r2, [r7, #24]
 800b05c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b05e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d02f      	beq.n	800b0ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b07c:	f000 f8d4 	bl	800b228 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	1e5a      	subs	r2, r3, #1
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d112      	bne.n	800b0b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d016      	beq.n	800b0c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	3310      	adds	r3, #16
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fd86 	bl	800bbb0 <xTaskRemoveFromEventList>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00e      	beq.n	800b0c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00b      	beq.n	800b0c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	e007      	b.n	800b0c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0bc:	3301      	adds	r3, #1
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	b25a      	sxtb	r2, r3
 800b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b0cc:	e001      	b.n	800b0d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f383 8811 	msr	BASEPRI, r3
}
 800b0dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3738      	adds	r7, #56	; 0x38
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fa:	f383 8811 	msr	BASEPRI, r3
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	60bb      	str	r3, [r7, #8]
}
 800b108:	bf00      	nop
 800b10a:	e7fe      	b.n	800b10a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b10c:	f001 fa3a 	bl	800c584 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b114:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b116:	f001 fa65 	bl	800c5e4 <vPortExitCritical>

	return uxReturn;
 800b11a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f1c3 0307 	rsb	r3, r3, #7
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e001      	b.n	800b146 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b146:	68fb      	ldr	r3, [r7, #12]
	}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10d      	bne.n	800b18e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d14d      	bne.n	800b216 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 ff48 	bl	800c014 <xTaskPriorityDisinherit>
 800b184:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	609a      	str	r2, [r3, #8]
 800b18c:	e043      	b.n	800b216 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d119      	bne.n	800b1c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6858      	ldr	r0, [r3, #4]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	461a      	mov	r2, r3
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	f001 fd30 	bl	800cc04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	441a      	add	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d32b      	bcc.n	800b216 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	605a      	str	r2, [r3, #4]
 800b1c6:	e026      	b.n	800b216 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	68d8      	ldr	r0, [r3, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	f001 fd16 	bl	800cc04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	425b      	negs	r3, r3
 800b1e2:	441a      	add	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d207      	bcs.n	800b204 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	425b      	negs	r3, r3
 800b1fe:	441a      	add	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b02      	cmp	r3, #2
 800b208:	d105      	bne.n	800b216 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	3b01      	subs	r3, #1
 800b214:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b21e:	697b      	ldr	r3, [r7, #20]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b236:	2b00      	cmp	r3, #0
 800b238:	d018      	beq.n	800b26c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	68da      	ldr	r2, [r3, #12]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	441a      	add	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	429a      	cmp	r2, r3
 800b252:	d303      	bcc.n	800b25c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68d9      	ldr	r1, [r3, #12]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	461a      	mov	r2, r3
 800b266:	6838      	ldr	r0, [r7, #0]
 800b268:	f001 fccc 	bl	800cc04 <memcpy>
	}
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b27c:	f001 f982 	bl	800c584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b286:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b288:	e011      	b.n	800b2ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d012      	beq.n	800b2b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3324      	adds	r3, #36	; 0x24
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fc8a 	bl	800bbb0 <xTaskRemoveFromEventList>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2a2:	f000 fd5f 	bl	800bd64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dce9      	bgt.n	800b28a <prvUnlockQueue+0x16>
 800b2b6:	e000      	b.n	800b2ba <prvUnlockQueue+0x46>
					break;
 800b2b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	22ff      	movs	r2, #255	; 0xff
 800b2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2c2:	f001 f98f 	bl	800c5e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2c6:	f001 f95d 	bl	800c584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2d2:	e011      	b.n	800b2f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d012      	beq.n	800b302 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3310      	adds	r3, #16
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fc65 	bl	800bbb0 <xTaskRemoveFromEventList>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d001      	beq.n	800b2f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2ec:	f000 fd3a 	bl	800bd64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2f0:	7bbb      	ldrb	r3, [r7, #14]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dce9      	bgt.n	800b2d4 <prvUnlockQueue+0x60>
 800b300:	e000      	b.n	800b304 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b302:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	22ff      	movs	r2, #255	; 0xff
 800b308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b30c:	f001 f96a 	bl	800c5e4 <vPortExitCritical>
}
 800b310:	bf00      	nop
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b320:	f001 f930 	bl	800c584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	60fb      	str	r3, [r7, #12]
 800b330:	e001      	b.n	800b336 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b336:	f001 f955 	bl	800c5e4 <vPortExitCritical>

	return xReturn;
 800b33a:	68fb      	ldr	r3, [r7, #12]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b34c:	f001 f91a 	bl	800c584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b358:	429a      	cmp	r2, r3
 800b35a:	d102      	bne.n	800b362 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	60fb      	str	r3, [r7, #12]
 800b360:	e001      	b.n	800b366 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b362:	2300      	movs	r3, #0
 800b364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b366:	f001 f93d 	bl	800c5e4 <vPortExitCritical>

	return xReturn;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08c      	sub	sp, #48	; 0x30
 800b378:	af04      	add	r7, sp, #16
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	603b      	str	r3, [r7, #0]
 800b380:	4613      	mov	r3, r2
 800b382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b384:	88fb      	ldrh	r3, [r7, #6]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 fa1d 	bl	800c7c8 <pvPortMalloc>
 800b38e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00e      	beq.n	800b3b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b396:	2054      	movs	r0, #84	; 0x54
 800b398:	f001 fa16 	bl	800c7c8 <pvPortMalloc>
 800b39c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	631a      	str	r2, [r3, #48]	; 0x30
 800b3aa:	e005      	b.n	800b3b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ac:	6978      	ldr	r0, [r7, #20]
 800b3ae:	f001 fad7 	bl	800c960 <vPortFree>
 800b3b2:	e001      	b.n	800b3b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d013      	beq.n	800b3e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3be:	88fa      	ldrh	r2, [r7, #6]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	9303      	str	r3, [sp, #12]
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	9302      	str	r3, [sp, #8]
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f80e 	bl	800b3f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3da:	69f8      	ldr	r0, [r7, #28]
 800b3dc:	f000 f892 	bl	800b504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	61bb      	str	r3, [r7, #24]
 800b3e4:	e002      	b.n	800b3ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3ec:	69bb      	ldr	r3, [r7, #24]
	}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3720      	adds	r7, #32
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b088      	sub	sp, #32
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	607a      	str	r2, [r7, #4]
 800b402:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b40e:	3b01      	subs	r3, #1
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	f023 0307 	bic.w	r3, r3, #7
 800b41c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	f003 0307 	and.w	r3, r3, #7
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00a      	beq.n	800b43e <prvInitialiseNewTask+0x48>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	617b      	str	r3, [r7, #20]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01f      	beq.n	800b484 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]
 800b448:	e012      	b.n	800b470 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4413      	add	r3, r2
 800b450:	7819      	ldrb	r1, [r3, #0]
 800b452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	3334      	adds	r3, #52	; 0x34
 800b45a:	460a      	mov	r2, r1
 800b45c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d006      	beq.n	800b478 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b0f      	cmp	r3, #15
 800b474:	d9e9      	bls.n	800b44a <prvInitialiseNewTask+0x54>
 800b476:	e000      	b.n	800b47a <prvInitialiseNewTask+0x84>
			{
				break;
 800b478:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b482:	e003      	b.n	800b48c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	2b06      	cmp	r3, #6
 800b490:	d901      	bls.n	800b496 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b492:	2306      	movs	r3, #6
 800b494:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b49a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff f890 	bl	800a5d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	3318      	adds	r3, #24
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff f88b 	bl	800a5d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c4:	f1c3 0207 	rsb	r2, r3, #7
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	68f9      	ldr	r1, [r7, #12]
 800b4e4:	69b8      	ldr	r0, [r7, #24]
 800b4e6:	f000 ff23 	bl	800c330 <pxPortInitialiseStack>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4fc:	bf00      	nop
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b50c:	f001 f83a 	bl	800c584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b510:	4b2a      	ldr	r3, [pc, #168]	; (800b5bc <prvAddNewTaskToReadyList+0xb8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3301      	adds	r3, #1
 800b516:	4a29      	ldr	r2, [pc, #164]	; (800b5bc <prvAddNewTaskToReadyList+0xb8>)
 800b518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b51a:	4b29      	ldr	r3, [pc, #164]	; (800b5c0 <prvAddNewTaskToReadyList+0xbc>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b522:	4a27      	ldr	r2, [pc, #156]	; (800b5c0 <prvAddNewTaskToReadyList+0xbc>)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b528:	4b24      	ldr	r3, [pc, #144]	; (800b5bc <prvAddNewTaskToReadyList+0xb8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d110      	bne.n	800b552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b530:	f000 fc3e 	bl	800bdb0 <prvInitialiseTaskLists>
 800b534:	e00d      	b.n	800b552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b536:	4b23      	ldr	r3, [pc, #140]	; (800b5c4 <prvAddNewTaskToReadyList+0xc0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d109      	bne.n	800b552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b53e:	4b20      	ldr	r3, [pc, #128]	; (800b5c0 <prvAddNewTaskToReadyList+0xbc>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b548:	429a      	cmp	r2, r3
 800b54a:	d802      	bhi.n	800b552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b54c:	4a1c      	ldr	r2, [pc, #112]	; (800b5c0 <prvAddNewTaskToReadyList+0xbc>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b552:	4b1d      	ldr	r3, [pc, #116]	; (800b5c8 <prvAddNewTaskToReadyList+0xc4>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3301      	adds	r3, #1
 800b558:	4a1b      	ldr	r2, [pc, #108]	; (800b5c8 <prvAddNewTaskToReadyList+0xc4>)
 800b55a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	2201      	movs	r2, #1
 800b562:	409a      	lsls	r2, r3
 800b564:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <prvAddNewTaskToReadyList+0xc8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4313      	orrs	r3, r2
 800b56a:	4a18      	ldr	r2, [pc, #96]	; (800b5cc <prvAddNewTaskToReadyList+0xc8>)
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4a15      	ldr	r2, [pc, #84]	; (800b5d0 <prvAddNewTaskToReadyList+0xcc>)
 800b57c:	441a      	add	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	3304      	adds	r3, #4
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f7ff f831 	bl	800a5ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b58a:	f001 f82b 	bl	800c5e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b58e:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <prvAddNewTaskToReadyList+0xc0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00e      	beq.n	800b5b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b596:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <prvAddNewTaskToReadyList+0xbc>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d207      	bcs.n	800b5b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5a4:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <prvAddNewTaskToReadyList+0xd0>)
 800b5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	200001bc 	.word	0x200001bc
 800b5c0:	200000bc 	.word	0x200000bc
 800b5c4:	200001c8 	.word	0x200001c8
 800b5c8:	200001d8 	.word	0x200001d8
 800b5cc:	200001c4 	.word	0x200001c4
 800b5d0:	200000c0 	.word	0x200000c0
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	; 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	617b      	str	r3, [r7, #20]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <vTaskDelayUntil+0x46>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	613b      	str	r3, [r7, #16]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b61e:	4b2a      	ldr	r3, [pc, #168]	; (800b6c8 <vTaskDelayUntil+0xf0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <vTaskDelayUntil+0x64>
	__asm volatile
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	60fb      	str	r3, [r7, #12]
}
 800b638:	bf00      	nop
 800b63a:	e7fe      	b.n	800b63a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b63c:	f000 f8c6 	bl	800b7cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b640:	4b22      	ldr	r3, [pc, #136]	; (800b6cc <vTaskDelayUntil+0xf4>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	4413      	add	r3, r2
 800b64e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6a3a      	ldr	r2, [r7, #32]
 800b656:	429a      	cmp	r2, r3
 800b658:	d20b      	bcs.n	800b672 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	429a      	cmp	r2, r3
 800b662:	d211      	bcs.n	800b688 <vTaskDelayUntil+0xb0>
 800b664:	69fa      	ldr	r2, [r7, #28]
 800b666:	6a3b      	ldr	r3, [r7, #32]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d90d      	bls.n	800b688 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24
 800b670:	e00a      	b.n	800b688 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d303      	bcc.n	800b684 <vTaskDelayUntil+0xac>
 800b67c:	69fa      	ldr	r2, [r7, #28]
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	429a      	cmp	r2, r3
 800b682:	d901      	bls.n	800b688 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	69fa      	ldr	r2, [r7, #28]
 800b68c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d006      	beq.n	800b6a2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b694:	69fa      	ldr	r2, [r7, #28]
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fde1 	bl	800c264 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b6a2:	f000 f8a1 	bl	800b7e8 <xTaskResumeAll>
 800b6a6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d107      	bne.n	800b6be <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b6ae:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <vTaskDelayUntil+0xf8>)
 800b6b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6be:	bf00      	nop
 800b6c0:	3728      	adds	r7, #40	; 0x28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	200001e4 	.word	0x200001e4
 800b6cc:	200001c0 	.word	0x200001c0
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d017      	beq.n	800b716 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6e6:	4b13      	ldr	r3, [pc, #76]	; (800b734 <vTaskDelay+0x60>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <vTaskDelay+0x30>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	60bb      	str	r3, [r7, #8]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b704:	f000 f862 	bl	800b7cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b708:	2100      	movs	r1, #0
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fdaa 	bl	800c264 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b710:	f000 f86a 	bl	800b7e8 <xTaskResumeAll>
 800b714:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d107      	bne.n	800b72c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b71c:	4b06      	ldr	r3, [pc, #24]	; (800b738 <vTaskDelay+0x64>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	200001e4 	.word	0x200001e4
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b742:	4b1c      	ldr	r3, [pc, #112]	; (800b7b4 <vTaskStartScheduler+0x78>)
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	2300      	movs	r3, #0
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	2300      	movs	r3, #0
 800b74c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b750:	4919      	ldr	r1, [pc, #100]	; (800b7b8 <vTaskStartScheduler+0x7c>)
 800b752:	481a      	ldr	r0, [pc, #104]	; (800b7bc <vTaskStartScheduler+0x80>)
 800b754:	f7ff fe0e 	bl	800b374 <xTaskCreate>
 800b758:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d116      	bne.n	800b78e <vTaskStartScheduler+0x52>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	60bb      	str	r3, [r7, #8]
}
 800b772:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b774:	4b12      	ldr	r3, [pc, #72]	; (800b7c0 <vTaskStartScheduler+0x84>)
 800b776:	f04f 32ff 	mov.w	r2, #4294967295
 800b77a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b77c:	4b11      	ldr	r3, [pc, #68]	; (800b7c4 <vTaskStartScheduler+0x88>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b782:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <vTaskStartScheduler+0x8c>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b788:	f000 fe5a 	bl	800c440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b78c:	e00e      	b.n	800b7ac <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b794:	d10a      	bne.n	800b7ac <vTaskStartScheduler+0x70>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	607b      	str	r3, [r7, #4]
}
 800b7a8:	bf00      	nop
 800b7aa:	e7fe      	b.n	800b7aa <vTaskStartScheduler+0x6e>
}
 800b7ac:	bf00      	nop
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	200001e0 	.word	0x200001e0
 800b7b8:	0800d80c 	.word	0x0800d80c
 800b7bc:	0800bd7d 	.word	0x0800bd7d
 800b7c0:	200001dc 	.word	0x200001dc
 800b7c4:	200001c8 	.word	0x200001c8
 800b7c8:	200001c0 	.word	0x200001c0

0800b7cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7d0:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <vTaskSuspendAll+0x18>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4a03      	ldr	r2, [pc, #12]	; (800b7e4 <vTaskSuspendAll+0x18>)
 800b7d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7da:	bf00      	nop
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	200001e4 	.word	0x200001e4

0800b7e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7f6:	4b41      	ldr	r3, [pc, #260]	; (800b8fc <xTaskResumeAll+0x114>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10a      	bne.n	800b814 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	603b      	str	r3, [r7, #0]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b814:	f000 feb6 	bl	800c584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b818:	4b38      	ldr	r3, [pc, #224]	; (800b8fc <xTaskResumeAll+0x114>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	4a37      	ldr	r2, [pc, #220]	; (800b8fc <xTaskResumeAll+0x114>)
 800b820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b822:	4b36      	ldr	r3, [pc, #216]	; (800b8fc <xTaskResumeAll+0x114>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d161      	bne.n	800b8ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b82a:	4b35      	ldr	r3, [pc, #212]	; (800b900 <xTaskResumeAll+0x118>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d05d      	beq.n	800b8ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b832:	e02e      	b.n	800b892 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b834:	4b33      	ldr	r3, [pc, #204]	; (800b904 <xTaskResumeAll+0x11c>)
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3318      	adds	r3, #24
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe ff30 	bl	800a6a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3304      	adds	r3, #4
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fe ff2b 	bl	800a6a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	2201      	movs	r2, #1
 800b856:	409a      	lsls	r2, r3
 800b858:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <xTaskResumeAll+0x120>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	4a2a      	ldr	r2, [pc, #168]	; (800b908 <xTaskResumeAll+0x120>)
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b866:	4613      	mov	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4a27      	ldr	r2, [pc, #156]	; (800b90c <xTaskResumeAll+0x124>)
 800b870:	441a      	add	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3304      	adds	r3, #4
 800b876:	4619      	mov	r1, r3
 800b878:	4610      	mov	r0, r2
 800b87a:	f7fe feb7 	bl	800a5ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b882:	4b23      	ldr	r3, [pc, #140]	; (800b910 <xTaskResumeAll+0x128>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	429a      	cmp	r2, r3
 800b88a:	d302      	bcc.n	800b892 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b88c:	4b21      	ldr	r3, [pc, #132]	; (800b914 <xTaskResumeAll+0x12c>)
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b892:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <xTaskResumeAll+0x11c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1cc      	bne.n	800b834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8a0:	f000 fb04 	bl	800beac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8a4:	4b1c      	ldr	r3, [pc, #112]	; (800b918 <xTaskResumeAll+0x130>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d010      	beq.n	800b8d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8b0:	f000 f846 	bl	800b940 <xTaskIncrementTick>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b8ba:	4b16      	ldr	r3, [pc, #88]	; (800b914 <xTaskResumeAll+0x12c>)
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f1      	bne.n	800b8b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b8cc:	4b12      	ldr	r3, [pc, #72]	; (800b918 <xTaskResumeAll+0x130>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <xTaskResumeAll+0x12c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d009      	beq.n	800b8ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <xTaskResumeAll+0x134>)
 800b8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8ee:	f000 fe79 	bl	800c5e4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200001e4 	.word	0x200001e4
 800b900:	200001bc 	.word	0x200001bc
 800b904:	2000017c 	.word	0x2000017c
 800b908:	200001c4 	.word	0x200001c4
 800b90c:	200000c0 	.word	0x200000c0
 800b910:	200000bc 	.word	0x200000bc
 800b914:	200001d0 	.word	0x200001d0
 800b918:	200001cc 	.word	0x200001cc
 800b91c:	e000ed04 	.word	0xe000ed04

0800b920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b926:	4b05      	ldr	r3, [pc, #20]	; (800b93c <xTaskGetTickCount+0x1c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b92c:	687b      	ldr	r3, [r7, #4]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	200001c0 	.word	0x200001c0

0800b940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b94a:	4b4e      	ldr	r3, [pc, #312]	; (800ba84 <xTaskIncrementTick+0x144>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f040 808e 	bne.w	800ba70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b954:	4b4c      	ldr	r3, [pc, #304]	; (800ba88 <xTaskIncrementTick+0x148>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b95c:	4a4a      	ldr	r2, [pc, #296]	; (800ba88 <xTaskIncrementTick+0x148>)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d120      	bne.n	800b9aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b968:	4b48      	ldr	r3, [pc, #288]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <xTaskIncrementTick+0x48>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	603b      	str	r3, [r7, #0]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <xTaskIncrementTick+0x46>
 800b988:	4b40      	ldr	r3, [pc, #256]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	4b40      	ldr	r3, [pc, #256]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a3e      	ldr	r2, [pc, #248]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	4a3e      	ldr	r2, [pc, #248]	; (800ba90 <xTaskIncrementTick+0x150>)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	4b3d      	ldr	r3, [pc, #244]	; (800ba94 <xTaskIncrementTick+0x154>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	4a3c      	ldr	r2, [pc, #240]	; (800ba94 <xTaskIncrementTick+0x154>)
 800b9a4:	6013      	str	r3, [r2, #0]
 800b9a6:	f000 fa81 	bl	800beac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9aa:	4b3b      	ldr	r3, [pc, #236]	; (800ba98 <xTaskIncrementTick+0x158>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d348      	bcc.n	800ba46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9b4:	4b35      	ldr	r3, [pc, #212]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d104      	bne.n	800b9c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9be:	4b36      	ldr	r3, [pc, #216]	; (800ba98 <xTaskIncrementTick+0x158>)
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	601a      	str	r2, [r3, #0]
					break;
 800b9c6:	e03e      	b.n	800ba46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c8:	4b30      	ldr	r3, [pc, #192]	; (800ba8c <xTaskIncrementTick+0x14c>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d203      	bcs.n	800b9e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9e0:	4a2d      	ldr	r2, [pc, #180]	; (800ba98 <xTaskIncrementTick+0x158>)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9e6:	e02e      	b.n	800ba46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fe5a 	bl	800a6a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3318      	adds	r3, #24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe fe51 	bl	800a6a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	2201      	movs	r2, #1
 800ba0a:	409a      	lsls	r2, r3
 800ba0c:	4b23      	ldr	r3, [pc, #140]	; (800ba9c <xTaskIncrementTick+0x15c>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	4a22      	ldr	r2, [pc, #136]	; (800ba9c <xTaskIncrementTick+0x15c>)
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1a:	4613      	mov	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4413      	add	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4a1f      	ldr	r2, [pc, #124]	; (800baa0 <xTaskIncrementTick+0x160>)
 800ba24:	441a      	add	r2, r3
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f7fe fddd 	bl	800a5ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	4b1b      	ldr	r3, [pc, #108]	; (800baa4 <xTaskIncrementTick+0x164>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d3b9      	bcc.n	800b9b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba44:	e7b6      	b.n	800b9b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba46:	4b17      	ldr	r3, [pc, #92]	; (800baa4 <xTaskIncrementTick+0x164>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	4914      	ldr	r1, [pc, #80]	; (800baa0 <xTaskIncrementTick+0x160>)
 800ba4e:	4613      	mov	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	440b      	add	r3, r1
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d901      	bls.n	800ba62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba62:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <xTaskIncrementTick+0x168>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d007      	beq.n	800ba7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]
 800ba6e:	e004      	b.n	800ba7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba70:	4b0e      	ldr	r3, [pc, #56]	; (800baac <xTaskIncrementTick+0x16c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3301      	adds	r3, #1
 800ba76:	4a0d      	ldr	r2, [pc, #52]	; (800baac <xTaskIncrementTick+0x16c>)
 800ba78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba7a:	697b      	ldr	r3, [r7, #20]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200001e4 	.word	0x200001e4
 800ba88:	200001c0 	.word	0x200001c0
 800ba8c:	20000174 	.word	0x20000174
 800ba90:	20000178 	.word	0x20000178
 800ba94:	200001d4 	.word	0x200001d4
 800ba98:	200001dc 	.word	0x200001dc
 800ba9c:	200001c4 	.word	0x200001c4
 800baa0:	200000c0 	.word	0x200000c0
 800baa4:	200000bc 	.word	0x200000bc
 800baa8:	200001d0 	.word	0x200001d0
 800baac:	200001cc 	.word	0x200001cc

0800bab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bab6:	4b27      	ldr	r3, [pc, #156]	; (800bb54 <vTaskSwitchContext+0xa4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800babe:	4b26      	ldr	r3, [pc, #152]	; (800bb58 <vTaskSwitchContext+0xa8>)
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bac4:	e03f      	b.n	800bb46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bac6:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <vTaskSwitchContext+0xa8>)
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bacc:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <vTaskSwitchContext+0xac>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	fab3 f383 	clz	r3, r3
 800bad8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bada:	7afb      	ldrb	r3, [r7, #11]
 800badc:	f1c3 031f 	rsb	r3, r3, #31
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	491f      	ldr	r1, [pc, #124]	; (800bb60 <vTaskSwitchContext+0xb0>)
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	440b      	add	r3, r1
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <vTaskSwitchContext+0x5c>
	__asm volatile
 800baf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafa:	f383 8811 	msr	BASEPRI, r3
 800bafe:	f3bf 8f6f 	isb	sy
 800bb02:	f3bf 8f4f 	dsb	sy
 800bb06:	607b      	str	r3, [r7, #4]
}
 800bb08:	bf00      	nop
 800bb0a:	e7fe      	b.n	800bb0a <vTaskSwitchContext+0x5a>
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4a12      	ldr	r2, [pc, #72]	; (800bb60 <vTaskSwitchContext+0xb0>)
 800bb18:	4413      	add	r3, r2
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d104      	bne.n	800bb3c <vTaskSwitchContext+0x8c>
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	605a      	str	r2, [r3, #4]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	4a08      	ldr	r2, [pc, #32]	; (800bb64 <vTaskSwitchContext+0xb4>)
 800bb44:	6013      	str	r3, [r2, #0]
}
 800bb46:	bf00      	nop
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	200001e4 	.word	0x200001e4
 800bb58:	200001d0 	.word	0x200001d0
 800bb5c:	200001c4 	.word	0x200001c4
 800bb60:	200000c0 	.word	0x200000c0
 800bb64:	200000bc 	.word	0x200000bc

0800bb68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	60fb      	str	r3, [r7, #12]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb8e:	4b07      	ldr	r3, [pc, #28]	; (800bbac <vTaskPlaceOnEventList+0x44>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3318      	adds	r3, #24
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fe fd4c 	bl	800a634 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	6838      	ldr	r0, [r7, #0]
 800bba0:	f000 fb60 	bl	800c264 <prvAddCurrentTaskToDelayedList>
}
 800bba4:	bf00      	nop
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	200000bc 	.word	0x200000bc

0800bbb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10a      	bne.n	800bbdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	60fb      	str	r3, [r7, #12]
}
 800bbd8:	bf00      	nop
 800bbda:	e7fe      	b.n	800bbda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	3318      	adds	r3, #24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fd60 	bl	800a6a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbe6:	4b1d      	ldr	r3, [pc, #116]	; (800bc5c <xTaskRemoveFromEventList+0xac>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d11c      	bne.n	800bc28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe fd57 	bl	800a6a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	409a      	lsls	r2, r3
 800bc00:	4b17      	ldr	r3, [pc, #92]	; (800bc60 <xTaskRemoveFromEventList+0xb0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	4a16      	ldr	r2, [pc, #88]	; (800bc60 <xTaskRemoveFromEventList+0xb0>)
 800bc08:	6013      	str	r3, [r2, #0]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4a13      	ldr	r2, [pc, #76]	; (800bc64 <xTaskRemoveFromEventList+0xb4>)
 800bc18:	441a      	add	r2, r3
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4610      	mov	r0, r2
 800bc22:	f7fe fce3 	bl	800a5ec <vListInsertEnd>
 800bc26:	e005      	b.n	800bc34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3318      	adds	r3, #24
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	480e      	ldr	r0, [pc, #56]	; (800bc68 <xTaskRemoveFromEventList+0xb8>)
 800bc30:	f7fe fcdc 	bl	800a5ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc38:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <xTaskRemoveFromEventList+0xbc>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d905      	bls.n	800bc4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc42:	2301      	movs	r3, #1
 800bc44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc46:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <xTaskRemoveFromEventList+0xc0>)
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	e001      	b.n	800bc52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc52:	697b      	ldr	r3, [r7, #20]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200001e4 	.word	0x200001e4
 800bc60:	200001c4 	.word	0x200001c4
 800bc64:	200000c0 	.word	0x200000c0
 800bc68:	2000017c 	.word	0x2000017c
 800bc6c:	200000bc 	.word	0x200000bc
 800bc70:	200001d0 	.word	0x200001d0

0800bc74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc7c:	4b06      	ldr	r3, [pc, #24]	; (800bc98 <vTaskInternalSetTimeOutState+0x24>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <vTaskInternalSetTimeOutState+0x28>)
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	605a      	str	r2, [r3, #4]
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	200001d4 	.word	0x200001d4
 800bc9c:	200001c0 	.word	0x200001c0

0800bca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b088      	sub	sp, #32
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d10a      	bne.n	800bcc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	613b      	str	r3, [r7, #16]
}
 800bcc2:	bf00      	nop
 800bcc4:	e7fe      	b.n	800bcc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	60fb      	str	r3, [r7, #12]
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bce2:	f000 fc4f 	bl	800c584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bce6:	4b1d      	ldr	r3, [pc, #116]	; (800bd5c <xTaskCheckForTimeOut+0xbc>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	69ba      	ldr	r2, [r7, #24]
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfe:	d102      	bne.n	800bd06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	61fb      	str	r3, [r7, #28]
 800bd04:	e023      	b.n	800bd4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	4b15      	ldr	r3, [pc, #84]	; (800bd60 <xTaskCheckForTimeOut+0xc0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d007      	beq.n	800bd22 <xTaskCheckForTimeOut+0x82>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d302      	bcc.n	800bd22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	e015      	b.n	800bd4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d20b      	bcs.n	800bd44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff ff9b 	bl	800bc74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	e004      	b.n	800bd4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2200      	movs	r2, #0
 800bd48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd4e:	f000 fc49 	bl	800c5e4 <vPortExitCritical>

	return xReturn;
 800bd52:	69fb      	ldr	r3, [r7, #28]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3720      	adds	r7, #32
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	200001c0 	.word	0x200001c0
 800bd60:	200001d4 	.word	0x200001d4

0800bd64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <vTaskMissedYield+0x14>)
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]
}
 800bd6e:	bf00      	nop
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	200001d0 	.word	0x200001d0

0800bd7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd84:	f000 f854 	bl	800be30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd88:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <prvIdleTask+0x2c>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d907      	bls.n	800bda0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bd90:	4b06      	ldr	r3, [pc, #24]	; (800bdac <prvIdleTask+0x30>)
 800bd92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bda0:	f7f6 f844 	bl	8001e2c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bda4:	e7ee      	b.n	800bd84 <prvIdleTask+0x8>
 800bda6:	bf00      	nop
 800bda8:	200000c0 	.word	0x200000c0
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	607b      	str	r3, [r7, #4]
 800bdba:	e00c      	b.n	800bdd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4a12      	ldr	r2, [pc, #72]	; (800be10 <prvInitialiseTaskLists+0x60>)
 800bdc8:	4413      	add	r3, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fbe1 	bl	800a592 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	607b      	str	r3, [r7, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b06      	cmp	r3, #6
 800bdda:	d9ef      	bls.n	800bdbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bddc:	480d      	ldr	r0, [pc, #52]	; (800be14 <prvInitialiseTaskLists+0x64>)
 800bdde:	f7fe fbd8 	bl	800a592 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bde2:	480d      	ldr	r0, [pc, #52]	; (800be18 <prvInitialiseTaskLists+0x68>)
 800bde4:	f7fe fbd5 	bl	800a592 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bde8:	480c      	ldr	r0, [pc, #48]	; (800be1c <prvInitialiseTaskLists+0x6c>)
 800bdea:	f7fe fbd2 	bl	800a592 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdee:	480c      	ldr	r0, [pc, #48]	; (800be20 <prvInitialiseTaskLists+0x70>)
 800bdf0:	f7fe fbcf 	bl	800a592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdf4:	480b      	ldr	r0, [pc, #44]	; (800be24 <prvInitialiseTaskLists+0x74>)
 800bdf6:	f7fe fbcc 	bl	800a592 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <prvInitialiseTaskLists+0x78>)
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <prvInitialiseTaskLists+0x64>)
 800bdfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be00:	4b0a      	ldr	r3, [pc, #40]	; (800be2c <prvInitialiseTaskLists+0x7c>)
 800be02:	4a05      	ldr	r2, [pc, #20]	; (800be18 <prvInitialiseTaskLists+0x68>)
 800be04:	601a      	str	r2, [r3, #0]
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200000c0 	.word	0x200000c0
 800be14:	2000014c 	.word	0x2000014c
 800be18:	20000160 	.word	0x20000160
 800be1c:	2000017c 	.word	0x2000017c
 800be20:	20000190 	.word	0x20000190
 800be24:	200001a8 	.word	0x200001a8
 800be28:	20000174 	.word	0x20000174
 800be2c:	20000178 	.word	0x20000178

0800be30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be36:	e019      	b.n	800be6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be38:	f000 fba4 	bl	800c584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3c:	4b10      	ldr	r3, [pc, #64]	; (800be80 <prvCheckTasksWaitingTermination+0x50>)
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3304      	adds	r3, #4
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fc2c 	bl	800a6a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be4e:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <prvCheckTasksWaitingTermination+0x54>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3b01      	subs	r3, #1
 800be54:	4a0b      	ldr	r2, [pc, #44]	; (800be84 <prvCheckTasksWaitingTermination+0x54>)
 800be56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	4a0a      	ldr	r2, [pc, #40]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be62:	f000 fbbf 	bl	800c5e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f810 	bl	800be8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e1      	bne.n	800be38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20000190 	.word	0x20000190
 800be84:	200001bc 	.word	0x200001bc
 800be88:	200001a4 	.word	0x200001a4

0800be8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fd61 	bl	800c960 <vPortFree>
			vPortFree( pxTCB );
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fd5e 	bl	800c960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bea4:	bf00      	nop
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb2:	4b0c      	ldr	r3, [pc, #48]	; (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bec4:	e008      	b.n	800bed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec6:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	4a04      	ldr	r2, [pc, #16]	; (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bed6:	6013      	str	r3, [r2, #0]
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	20000174 	.word	0x20000174
 800bee8:	200001dc 	.word	0x200001dc

0800beec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bef2:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <xTaskGetSchedulerState+0x34>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800befa:	2301      	movs	r3, #1
 800befc:	607b      	str	r3, [r7, #4]
 800befe:	e008      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf00:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <xTaskGetSchedulerState+0x38>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	e001      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf12:	687b      	ldr	r3, [r7, #4]
	}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	200001c8 	.word	0x200001c8
 800bf24:	200001e4 	.word	0x200001e4

0800bf28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d05e      	beq.n	800bffc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4b31      	ldr	r3, [pc, #196]	; (800c008 <xTaskPriorityInherit+0xe0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d24e      	bcs.n	800bfea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	db06      	blt.n	800bf62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf54:	4b2c      	ldr	r3, [pc, #176]	; (800c008 <xTaskPriorityInherit+0xe0>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	f1c3 0207 	rsb	r2, r3, #7
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6959      	ldr	r1, [r3, #20]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4a26      	ldr	r2, [pc, #152]	; (800c00c <xTaskPriorityInherit+0xe4>)
 800bf74:	4413      	add	r3, r2
 800bf76:	4299      	cmp	r1, r3
 800bf78:	d12f      	bne.n	800bfda <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	3304      	adds	r3, #4
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe fb91 	bl	800a6a6 <uxListRemove>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d10a      	bne.n	800bfa0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8e:	2201      	movs	r2, #1
 800bf90:	fa02 f303 	lsl.w	r3, r2, r3
 800bf94:	43da      	mvns	r2, r3
 800bf96:	4b1e      	ldr	r3, [pc, #120]	; (800c010 <xTaskPriorityInherit+0xe8>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	4a1c      	ldr	r2, [pc, #112]	; (800c010 <xTaskPriorityInherit+0xe8>)
 800bf9e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfa0:	4b19      	ldr	r3, [pc, #100]	; (800c008 <xTaskPriorityInherit+0xe0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	2201      	movs	r2, #1
 800bfb0:	409a      	lsls	r2, r3
 800bfb2:	4b17      	ldr	r3, [pc, #92]	; (800c010 <xTaskPriorityInherit+0xe8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	4a15      	ldr	r2, [pc, #84]	; (800c010 <xTaskPriorityInherit+0xe8>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4a10      	ldr	r2, [pc, #64]	; (800c00c <xTaskPriorityInherit+0xe4>)
 800bfca:	441a      	add	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	f7fe fb0a 	bl	800a5ec <vListInsertEnd>
 800bfd8:	e004      	b.n	800bfe4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfda:	4b0b      	ldr	r3, [pc, #44]	; (800c008 <xTaskPriorityInherit+0xe0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	e008      	b.n	800bffc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfee:	4b06      	ldr	r3, [pc, #24]	; (800c008 <xTaskPriorityInherit+0xe0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d201      	bcs.n	800bffc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bff8:	2301      	movs	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bffc:	68fb      	ldr	r3, [r7, #12]
	}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	200000bc 	.word	0x200000bc
 800c00c:	200000c0 	.word	0x200000c0
 800c010:	200001c4 	.word	0x200001c4

0800c014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c020:	2300      	movs	r3, #0
 800c022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06e      	beq.n	800c108 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c02a:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <xTaskPriorityDisinherit+0x100>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	429a      	cmp	r2, r3
 800c032:	d00a      	beq.n	800c04a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	60fb      	str	r3, [r7, #12]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60bb      	str	r3, [r7, #8]
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d044      	beq.n	800c108 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c082:	2b00      	cmp	r3, #0
 800c084:	d140      	bne.n	800c108 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3304      	adds	r3, #4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fb0b 	bl	800a6a6 <uxListRemove>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d115      	bne.n	800c0c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09a:	491f      	ldr	r1, [pc, #124]	; (800c118 <xTaskPriorityDisinherit+0x104>)
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xTaskPriorityDisinherit+0xae>
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b6:	43da      	mvns	r2, r3
 800c0b8:	4b18      	ldr	r3, [pc, #96]	; (800c11c <xTaskPriorityDisinherit+0x108>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4013      	ands	r3, r2
 800c0be:	4a17      	ldr	r2, [pc, #92]	; (800c11c <xTaskPriorityDisinherit+0x108>)
 800c0c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	f1c3 0207 	rsb	r2, r3, #7
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	2201      	movs	r2, #1
 800c0dc:	409a      	lsls	r2, r3
 800c0de:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <xTaskPriorityDisinherit+0x108>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4a0d      	ldr	r2, [pc, #52]	; (800c11c <xTaskPriorityDisinherit+0x108>)
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4a08      	ldr	r2, [pc, #32]	; (800c118 <xTaskPriorityDisinherit+0x104>)
 800c0f6:	441a      	add	r2, r3
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fe fa74 	bl	800a5ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c108:	697b      	ldr	r3, [r7, #20]
	}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200000bc 	.word	0x200000bc
 800c118:	200000c0 	.word	0x200000c0
 800c11c:	200001c4 	.word	0x200001c4

0800c120 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c12e:	2301      	movs	r3, #1
 800c130:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d077      	beq.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10a      	bne.n	800c156 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	60fb      	str	r3, [r7, #12]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d902      	bls.n	800c166 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	61fb      	str	r3, [r7, #28]
 800c164:	e002      	b.n	800c16c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	69fa      	ldr	r2, [r7, #28]
 800c172:	429a      	cmp	r2, r3
 800c174:	d058      	beq.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d153      	bne.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c180:	4b2b      	ldr	r3, [pc, #172]	; (800c230 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	429a      	cmp	r2, r3
 800c188:	d10a      	bne.n	800c1a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	60bb      	str	r3, [r7, #8]
}
 800c19c:	bf00      	nop
 800c19e:	e7fe      	b.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	69fa      	ldr	r2, [r7, #28]
 800c1aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	db04      	blt.n	800c1be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	f1c3 0207 	rsb	r2, r3, #7
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	6959      	ldr	r1, [r3, #20]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4a19      	ldr	r2, [pc, #100]	; (800c234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c1ce:	4413      	add	r3, r2
 800c1d0:	4299      	cmp	r1, r3
 800c1d2:	d129      	bne.n	800c228 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe fa64 	bl	800a6a6 <uxListRemove>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ee:	43da      	mvns	r2, r3
 800c1f0:	4b11      	ldr	r3, [pc, #68]	; (800c238 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	4a10      	ldr	r2, [pc, #64]	; (800c238 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c1f8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fe:	2201      	movs	r2, #1
 800c200:	409a      	lsls	r2, r3
 800c202:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4313      	orrs	r3, r2
 800c208:	4a0b      	ldr	r2, [pc, #44]	; (800c238 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4a06      	ldr	r2, [pc, #24]	; (800c234 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c21a:	441a      	add	r2, r3
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	3304      	adds	r3, #4
 800c220:	4619      	mov	r1, r3
 800c222:	4610      	mov	r0, r2
 800c224:	f7fe f9e2 	bl	800a5ec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c228:	bf00      	nop
 800c22a:	3720      	adds	r7, #32
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}
 800c230:	200000bc 	.word	0x200000bc
 800c234:	200000c0 	.word	0x200000c0
 800c238:	200001c4 	.word	0x200001c4

0800c23c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c240:	4b07      	ldr	r3, [pc, #28]	; (800c260 <pvTaskIncrementMutexHeldCount+0x24>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d004      	beq.n	800c252 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <pvTaskIncrementMutexHeldCount+0x24>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c24e:	3201      	adds	r2, #1
 800c250:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c252:	4b03      	ldr	r3, [pc, #12]	; (800c260 <pvTaskIncrementMutexHeldCount+0x24>)
 800c254:	681b      	ldr	r3, [r3, #0]
	}
 800c256:	4618      	mov	r0, r3
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr
 800c260:	200000bc 	.word	0x200000bc

0800c264 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c26e:	4b29      	ldr	r3, [pc, #164]	; (800c314 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c274:	4b28      	ldr	r3, [pc, #160]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3304      	adds	r3, #4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fa13 	bl	800a6a6 <uxListRemove>
 800c280:	4603      	mov	r3, r0
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10b      	bne.n	800c29e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c286:	4b24      	ldr	r3, [pc, #144]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28c:	2201      	movs	r2, #1
 800c28e:	fa02 f303 	lsl.w	r3, r2, r3
 800c292:	43da      	mvns	r2, r3
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4013      	ands	r3, r2
 800c29a:	4a20      	ldr	r2, [pc, #128]	; (800c31c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c29c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a4:	d10a      	bne.n	800c2bc <prvAddCurrentTaskToDelayedList+0x58>
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d007      	beq.n	800c2bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ac:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	481a      	ldr	r0, [pc, #104]	; (800c320 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2b6:	f7fe f999 	bl	800a5ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2ba:	e026      	b.n	800c30a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2c4:	4b14      	ldr	r3, [pc, #80]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d209      	bcs.n	800c2e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2d4:	4b13      	ldr	r3, [pc, #76]	; (800c324 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	f7fe f9a7 	bl	800a634 <vListInsert>
}
 800c2e6:	e010      	b.n	800c30a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	4b0a      	ldr	r3, [pc, #40]	; (800c318 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	f7fe f99d 	bl	800a634 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2fa:	4b0c      	ldr	r3, [pc, #48]	; (800c32c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	429a      	cmp	r2, r3
 800c302:	d202      	bcs.n	800c30a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c304:	4a09      	ldr	r2, [pc, #36]	; (800c32c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	6013      	str	r3, [r2, #0]
}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	200001c0 	.word	0x200001c0
 800c318:	200000bc 	.word	0x200000bc
 800c31c:	200001c4 	.word	0x200001c4
 800c320:	200001a8 	.word	0x200001a8
 800c324:	20000178 	.word	0x20000178
 800c328:	20000174 	.word	0x20000174
 800c32c:	200001dc 	.word	0x200001dc

0800c330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3b04      	subs	r3, #4
 800c340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3b04      	subs	r3, #4
 800c34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f023 0201 	bic.w	r2, r3, #1
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3b04      	subs	r3, #4
 800c35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c360:	4a0c      	ldr	r2, [pc, #48]	; (800c394 <pxPortInitialiseStack+0x64>)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3b14      	subs	r3, #20
 800c36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3b04      	subs	r3, #4
 800c376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f06f 0202 	mvn.w	r2, #2
 800c37e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3b20      	subs	r3, #32
 800c384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	0800c399 	.word	0x0800c399

0800c398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3a2:	4b12      	ldr	r3, [pc, #72]	; (800c3ec <prvTaskExitError+0x54>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3aa:	d00a      	beq.n	800c3c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	60fb      	str	r3, [r7, #12]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <prvTaskExitError+0x28>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	60bb      	str	r3, [r7, #8]
}
 800c3d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3d6:	bf00      	nop
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d0fc      	beq.n	800c3d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3de:	bf00      	nop
 800c3e0:	bf00      	nop
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	2000002c 	.word	0x2000002c

0800c3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3f0:	4b07      	ldr	r3, [pc, #28]	; (800c410 <pxCurrentTCBConst2>)
 800c3f2:	6819      	ldr	r1, [r3, #0]
 800c3f4:	6808      	ldr	r0, [r1, #0]
 800c3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	f380 8809 	msr	PSP, r0
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f04f 0000 	mov.w	r0, #0
 800c406:	f380 8811 	msr	BASEPRI, r0
 800c40a:	4770      	bx	lr
 800c40c:	f3af 8000 	nop.w

0800c410 <pxCurrentTCBConst2>:
 800c410:	200000bc 	.word	0x200000bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop

0800c418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c418:	4808      	ldr	r0, [pc, #32]	; (800c43c <prvPortStartFirstTask+0x24>)
 800c41a:	6800      	ldr	r0, [r0, #0]
 800c41c:	6800      	ldr	r0, [r0, #0]
 800c41e:	f380 8808 	msr	MSP, r0
 800c422:	f04f 0000 	mov.w	r0, #0
 800c426:	f380 8814 	msr	CONTROL, r0
 800c42a:	b662      	cpsie	i
 800c42c:	b661      	cpsie	f
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	df00      	svc	0
 800c438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c43a:	bf00      	nop
 800c43c:	e000ed08 	.word	0xe000ed08

0800c440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c446:	4b46      	ldr	r3, [pc, #280]	; (800c560 <xPortStartScheduler+0x120>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a46      	ldr	r2, [pc, #280]	; (800c564 <xPortStartScheduler+0x124>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d10a      	bne.n	800c466 <xPortStartScheduler+0x26>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	613b      	str	r3, [r7, #16]
}
 800c462:	bf00      	nop
 800c464:	e7fe      	b.n	800c464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c466:	4b3e      	ldr	r3, [pc, #248]	; (800c560 <xPortStartScheduler+0x120>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a3f      	ldr	r2, [pc, #252]	; (800c568 <xPortStartScheduler+0x128>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d10a      	bne.n	800c486 <xPortStartScheduler+0x46>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	60fb      	str	r3, [r7, #12]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c486:	4b39      	ldr	r3, [pc, #228]	; (800c56c <xPortStartScheduler+0x12c>)
 800c488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	22ff      	movs	r2, #255	; 0xff
 800c496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4a0:	78fb      	ldrb	r3, [r7, #3]
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	4b31      	ldr	r3, [pc, #196]	; (800c570 <xPortStartScheduler+0x130>)
 800c4ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4ae:	4b31      	ldr	r3, [pc, #196]	; (800c574 <xPortStartScheduler+0x134>)
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4b4:	e009      	b.n	800c4ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c4b6:	4b2f      	ldr	r3, [pc, #188]	; (800c574 <xPortStartScheduler+0x134>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	4a2d      	ldr	r2, [pc, #180]	; (800c574 <xPortStartScheduler+0x134>)
 800c4be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d2:	2b80      	cmp	r3, #128	; 0x80
 800c4d4:	d0ef      	beq.n	800c4b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4d6:	4b27      	ldr	r3, [pc, #156]	; (800c574 <xPortStartScheduler+0x134>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f1c3 0307 	rsb	r3, r3, #7
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d00a      	beq.n	800c4f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	60bb      	str	r3, [r7, #8]
}
 800c4f4:	bf00      	nop
 800c4f6:	e7fe      	b.n	800c4f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4f8:	4b1e      	ldr	r3, [pc, #120]	; (800c574 <xPortStartScheduler+0x134>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	021b      	lsls	r3, r3, #8
 800c4fe:	4a1d      	ldr	r2, [pc, #116]	; (800c574 <xPortStartScheduler+0x134>)
 800c500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c502:	4b1c      	ldr	r3, [pc, #112]	; (800c574 <xPortStartScheduler+0x134>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c50a:	4a1a      	ldr	r2, [pc, #104]	; (800c574 <xPortStartScheduler+0x134>)
 800c50c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	b2da      	uxtb	r2, r3
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c516:	4b18      	ldr	r3, [pc, #96]	; (800c578 <xPortStartScheduler+0x138>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a17      	ldr	r2, [pc, #92]	; (800c578 <xPortStartScheduler+0x138>)
 800c51c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c522:	4b15      	ldr	r3, [pc, #84]	; (800c578 <xPortStartScheduler+0x138>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a14      	ldr	r2, [pc, #80]	; (800c578 <xPortStartScheduler+0x138>)
 800c528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c52c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c52e:	f000 f8dd 	bl	800c6ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c532:	4b12      	ldr	r3, [pc, #72]	; (800c57c <xPortStartScheduler+0x13c>)
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c538:	f000 f8fc 	bl	800c734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c53c:	4b10      	ldr	r3, [pc, #64]	; (800c580 <xPortStartScheduler+0x140>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a0f      	ldr	r2, [pc, #60]	; (800c580 <xPortStartScheduler+0x140>)
 800c542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c548:	f7ff ff66 	bl	800c418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c54c:	f7ff fab0 	bl	800bab0 <vTaskSwitchContext>
	prvTaskExitError();
 800c550:	f7ff ff22 	bl	800c398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	e000ed00 	.word	0xe000ed00
 800c564:	410fc271 	.word	0x410fc271
 800c568:	410fc270 	.word	0x410fc270
 800c56c:	e000e400 	.word	0xe000e400
 800c570:	200001e8 	.word	0x200001e8
 800c574:	200001ec 	.word	0x200001ec
 800c578:	e000ed20 	.word	0xe000ed20
 800c57c:	2000002c 	.word	0x2000002c
 800c580:	e000ef34 	.word	0xe000ef34

0800c584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
	__asm volatile
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	607b      	str	r3, [r7, #4]
}
 800c59c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <vPortEnterCritical+0x58>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a0d      	ldr	r2, [pc, #52]	; (800c5dc <vPortEnterCritical+0x58>)
 800c5a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5a8:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <vPortEnterCritical+0x58>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d10f      	bne.n	800c5d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	; (800c5e0 <vPortEnterCritical+0x5c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	603b      	str	r3, [r7, #0]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <vPortEnterCritical+0x4a>
	}
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	2000002c 	.word	0x2000002c
 800c5e0:	e000ed04 	.word	0xe000ed04

0800c5e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5ea:	4b12      	ldr	r3, [pc, #72]	; (800c634 <vPortExitCritical+0x50>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10a      	bne.n	800c608 <vPortExitCritical+0x24>
	__asm volatile
 800c5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f6:	f383 8811 	msr	BASEPRI, r3
 800c5fa:	f3bf 8f6f 	isb	sy
 800c5fe:	f3bf 8f4f 	dsb	sy
 800c602:	607b      	str	r3, [r7, #4]
}
 800c604:	bf00      	nop
 800c606:	e7fe      	b.n	800c606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c608:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <vPortExitCritical+0x50>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	4a09      	ldr	r2, [pc, #36]	; (800c634 <vPortExitCritical+0x50>)
 800c610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c612:	4b08      	ldr	r3, [pc, #32]	; (800c634 <vPortExitCritical+0x50>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d105      	bne.n	800c626 <vPortExitCritical+0x42>
 800c61a:	2300      	movs	r3, #0
 800c61c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	f383 8811 	msr	BASEPRI, r3
}
 800c624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c626:	bf00      	nop
 800c628:	370c      	adds	r7, #12
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	2000002c 	.word	0x2000002c
	...

0800c640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c640:	f3ef 8009 	mrs	r0, PSP
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	4b15      	ldr	r3, [pc, #84]	; (800c6a0 <pxCurrentTCBConst>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	f01e 0f10 	tst.w	lr, #16
 800c650:	bf08      	it	eq
 800c652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65a:	6010      	str	r0, [r2, #0]
 800c65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c660:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c664:	f380 8811 	msr	BASEPRI, r0
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f7ff fa1e 	bl	800bab0 <vTaskSwitchContext>
 800c674:	f04f 0000 	mov.w	r0, #0
 800c678:	f380 8811 	msr	BASEPRI, r0
 800c67c:	bc09      	pop	{r0, r3}
 800c67e:	6819      	ldr	r1, [r3, #0]
 800c680:	6808      	ldr	r0, [r1, #0]
 800c682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c686:	f01e 0f10 	tst.w	lr, #16
 800c68a:	bf08      	it	eq
 800c68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c690:	f380 8809 	msr	PSP, r0
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w

0800c6a0 <pxCurrentTCBConst>:
 800c6a0:	200000bc 	.word	0x200000bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6a4:	bf00      	nop
 800c6a6:	bf00      	nop

0800c6a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	607b      	str	r3, [r7, #4]
}
 800c6c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6c2:	f7ff f93d 	bl	800b940 <xTaskIncrementTick>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d003      	beq.n	800c6d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6cc:	4b06      	ldr	r3, [pc, #24]	; (800c6e8 <xPortSysTickHandler+0x40>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	f383 8811 	msr	BASEPRI, r3
}
 800c6de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6f0:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <vPortSetupTimerInterrupt+0x34>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6f6:	4b0b      	ldr	r3, [pc, #44]	; (800c724 <vPortSetupTimerInterrupt+0x38>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <vPortSetupTimerInterrupt+0x3c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a0a      	ldr	r2, [pc, #40]	; (800c72c <vPortSetupTimerInterrupt+0x40>)
 800c702:	fba2 2303 	umull	r2, r3, r2, r3
 800c706:	099b      	lsrs	r3, r3, #6
 800c708:	4a09      	ldr	r2, [pc, #36]	; (800c730 <vPortSetupTimerInterrupt+0x44>)
 800c70a:	3b01      	subs	r3, #1
 800c70c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c70e:	4b04      	ldr	r3, [pc, #16]	; (800c720 <vPortSetupTimerInterrupt+0x34>)
 800c710:	2207      	movs	r2, #7
 800c712:	601a      	str	r2, [r3, #0]
}
 800c714:	bf00      	nop
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	e000e010 	.word	0xe000e010
 800c724:	e000e018 	.word	0xe000e018
 800c728:	20000000 	.word	0x20000000
 800c72c:	10624dd3 	.word	0x10624dd3
 800c730:	e000e014 	.word	0xe000e014

0800c734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c744 <vPortEnableVFP+0x10>
 800c738:	6801      	ldr	r1, [r0, #0]
 800c73a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c73e:	6001      	str	r1, [r0, #0]
 800c740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c742:	bf00      	nop
 800c744:	e000ed88 	.word	0xe000ed88

0800c748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c74e:	f3ef 8305 	mrs	r3, IPSR
 800c752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2b0f      	cmp	r3, #15
 800c758:	d914      	bls.n	800c784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c75a:	4a17      	ldr	r2, [pc, #92]	; (800c7b8 <vPortValidateInterruptPriority+0x70>)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4413      	add	r3, r2
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c764:	4b15      	ldr	r3, [pc, #84]	; (800c7bc <vPortValidateInterruptPriority+0x74>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	7afa      	ldrb	r2, [r7, #11]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d20a      	bcs.n	800c784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	607b      	str	r3, [r7, #4]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c784:	4b0e      	ldr	r3, [pc, #56]	; (800c7c0 <vPortValidateInterruptPriority+0x78>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c78c:	4b0d      	ldr	r3, [pc, #52]	; (800c7c4 <vPortValidateInterruptPriority+0x7c>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	429a      	cmp	r2, r3
 800c792:	d90a      	bls.n	800c7aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	603b      	str	r3, [r7, #0]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <vPortValidateInterruptPriority+0x60>
	}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	e000e3f0 	.word	0xe000e3f0
 800c7bc:	200001e8 	.word	0x200001e8
 800c7c0:	e000ed0c 	.word	0xe000ed0c
 800c7c4:	200001ec 	.word	0x200001ec

0800c7c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08a      	sub	sp, #40	; 0x28
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7d4:	f7fe fffa 	bl	800b7cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7d8:	4b5b      	ldr	r3, [pc, #364]	; (800c948 <pvPortMalloc+0x180>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7e0:	f000 f920 	bl	800ca24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7e4:	4b59      	ldr	r3, [pc, #356]	; (800c94c <pvPortMalloc+0x184>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f040 8093 	bne.w	800c918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01d      	beq.n	800c834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7f8:	2208      	movs	r2, #8
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f003 0307 	and.w	r3, r3, #7
 800c806:	2b00      	cmp	r3, #0
 800c808:	d014      	beq.n	800c834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f023 0307 	bic.w	r3, r3, #7
 800c810:	3308      	adds	r3, #8
 800c812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <pvPortMalloc+0x6c>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	617b      	str	r3, [r7, #20]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d06e      	beq.n	800c918 <pvPortMalloc+0x150>
 800c83a:	4b45      	ldr	r3, [pc, #276]	; (800c950 <pvPortMalloc+0x188>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d869      	bhi.n	800c918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c844:	4b43      	ldr	r3, [pc, #268]	; (800c954 <pvPortMalloc+0x18c>)
 800c846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c848:	4b42      	ldr	r3, [pc, #264]	; (800c954 <pvPortMalloc+0x18c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c84e:	e004      	b.n	800c85a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	429a      	cmp	r2, r3
 800c862:	d903      	bls.n	800c86c <pvPortMalloc+0xa4>
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1f1      	bne.n	800c850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c86c:	4b36      	ldr	r3, [pc, #216]	; (800c948 <pvPortMalloc+0x180>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c872:	429a      	cmp	r2, r3
 800c874:	d050      	beq.n	800c918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2208      	movs	r2, #8
 800c87c:	4413      	add	r3, r2
 800c87e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	2308      	movs	r3, #8
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	429a      	cmp	r2, r3
 800c896:	d91f      	bls.n	800c8d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4413      	add	r3, r2
 800c89e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	f003 0307 	and.w	r3, r3, #7
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	613b      	str	r3, [r7, #16]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	1ad2      	subs	r2, r2, r3
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8d2:	69b8      	ldr	r0, [r7, #24]
 800c8d4:	f000 f908 	bl	800cae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8d8:	4b1d      	ldr	r3, [pc, #116]	; (800c950 <pvPortMalloc+0x188>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <pvPortMalloc+0x188>)
 800c8e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8e6:	4b1a      	ldr	r3, [pc, #104]	; (800c950 <pvPortMalloc+0x188>)
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	4b1b      	ldr	r3, [pc, #108]	; (800c958 <pvPortMalloc+0x190>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d203      	bcs.n	800c8fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8f2:	4b17      	ldr	r3, [pc, #92]	; (800c950 <pvPortMalloc+0x188>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a18      	ldr	r2, [pc, #96]	; (800c958 <pvPortMalloc+0x190>)
 800c8f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	4b13      	ldr	r3, [pc, #76]	; (800c94c <pvPortMalloc+0x184>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	431a      	orrs	r2, r3
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	2200      	movs	r2, #0
 800c90c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c90e:	4b13      	ldr	r3, [pc, #76]	; (800c95c <pvPortMalloc+0x194>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3301      	adds	r3, #1
 800c914:	4a11      	ldr	r2, [pc, #68]	; (800c95c <pvPortMalloc+0x194>)
 800c916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c918:	f7fe ff66 	bl	800b7e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	f003 0307 	and.w	r3, r3, #7
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00a      	beq.n	800c93c <pvPortMalloc+0x174>
	__asm volatile
 800c926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92a:	f383 8811 	msr	BASEPRI, r3
 800c92e:	f3bf 8f6f 	isb	sy
 800c932:	f3bf 8f4f 	dsb	sy
 800c936:	60fb      	str	r3, [r7, #12]
}
 800c938:	bf00      	nop
 800c93a:	e7fe      	b.n	800c93a <pvPortMalloc+0x172>
	return pvReturn;
 800c93c:	69fb      	ldr	r3, [r7, #28]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3728      	adds	r7, #40	; 0x28
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20002908 	.word	0x20002908
 800c94c:	2000291c 	.word	0x2000291c
 800c950:	2000290c 	.word	0x2000290c
 800c954:	20002900 	.word	0x20002900
 800c958:	20002910 	.word	0x20002910
 800c95c:	20002914 	.word	0x20002914

0800c960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d04d      	beq.n	800ca0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c972:	2308      	movs	r3, #8
 800c974:	425b      	negs	r3, r3
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4413      	add	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <vPortFree+0xb8>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4013      	ands	r3, r2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10a      	bne.n	800c9a4 <vPortFree+0x44>
	__asm volatile
 800c98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	60fb      	str	r3, [r7, #12]
}
 800c9a0:	bf00      	nop
 800c9a2:	e7fe      	b.n	800c9a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00a      	beq.n	800c9c2 <vPortFree+0x62>
	__asm volatile
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	60bb      	str	r3, [r7, #8]
}
 800c9be:	bf00      	nop
 800c9c0:	e7fe      	b.n	800c9c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <vPortFree+0xb8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d01e      	beq.n	800ca0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d11a      	bne.n	800ca0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <vPortFree+0xb8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	43db      	mvns	r3, r3
 800c9e2:	401a      	ands	r2, r3
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9e8:	f7fe fef0 	bl	800b7cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <vPortFree+0xbc>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	4a09      	ldr	r2, [pc, #36]	; (800ca1c <vPortFree+0xbc>)
 800c9f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9fa:	6938      	ldr	r0, [r7, #16]
 800c9fc:	f000 f874 	bl	800cae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca00:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <vPortFree+0xc0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	4a06      	ldr	r2, [pc, #24]	; (800ca20 <vPortFree+0xc0>)
 800ca08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca0a:	f7fe feed 	bl	800b7e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca0e:	bf00      	nop
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	2000291c 	.word	0x2000291c
 800ca1c:	2000290c 	.word	0x2000290c
 800ca20:	20002918 	.word	0x20002918

0800ca24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca2a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ca2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca30:	4b27      	ldr	r3, [pc, #156]	; (800cad0 <prvHeapInit+0xac>)
 800ca32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00c      	beq.n	800ca58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3307      	adds	r3, #7
 800ca42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 0307 	bic.w	r3, r3, #7
 800ca4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	4a1f      	ldr	r2, [pc, #124]	; (800cad0 <prvHeapInit+0xac>)
 800ca54:	4413      	add	r3, r2
 800ca56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca5c:	4a1d      	ldr	r2, [pc, #116]	; (800cad4 <prvHeapInit+0xb0>)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca62:	4b1c      	ldr	r3, [pc, #112]	; (800cad4 <prvHeapInit+0xb0>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca70:	2208      	movs	r2, #8
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	1a9b      	subs	r3, r3, r2
 800ca76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f023 0307 	bic.w	r3, r3, #7
 800ca7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	4a15      	ldr	r2, [pc, #84]	; (800cad8 <prvHeapInit+0xb4>)
 800ca84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca86:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <prvHeapInit+0xb4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca8e:	4b12      	ldr	r3, [pc, #72]	; (800cad8 <prvHeapInit+0xb4>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800caa4:	4b0c      	ldr	r3, [pc, #48]	; (800cad8 <prvHeapInit+0xb4>)
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <prvHeapInit+0xb8>)
 800cab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <prvHeapInit+0xbc>)
 800caba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cabc:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <prvHeapInit+0xc0>)
 800cabe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cac2:	601a      	str	r2, [r3, #0]
}
 800cac4:	bf00      	nop
 800cac6:	3714      	adds	r7, #20
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	200001f0 	.word	0x200001f0
 800cad4:	20002900 	.word	0x20002900
 800cad8:	20002908 	.word	0x20002908
 800cadc:	20002910 	.word	0x20002910
 800cae0:	2000290c 	.word	0x2000290c
 800cae4:	2000291c 	.word	0x2000291c

0800cae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800caf0:	4b28      	ldr	r3, [pc, #160]	; (800cb94 <prvInsertBlockIntoFreeList+0xac>)
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	e002      	b.n	800cafc <prvInsertBlockIntoFreeList+0x14>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d8f7      	bhi.n	800caf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	4413      	add	r3, r2
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d108      	bne.n	800cb2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	441a      	add	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	441a      	add	r2, r3
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d118      	bne.n	800cb70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	4b15      	ldr	r3, [pc, #84]	; (800cb98 <prvInsertBlockIntoFreeList+0xb0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d00d      	beq.n	800cb66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	685a      	ldr	r2, [r3, #4]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	441a      	add	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	e008      	b.n	800cb78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb66:	4b0c      	ldr	r3, [pc, #48]	; (800cb98 <prvInsertBlockIntoFreeList+0xb0>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	601a      	str	r2, [r3, #0]
 800cb6e:	e003      	b.n	800cb78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d002      	beq.n	800cb86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb86:	bf00      	nop
 800cb88:	3714      	adds	r7, #20
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	20002900 	.word	0x20002900
 800cb98:	20002908 	.word	0x20002908

0800cb9c <__libc_init_array>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	4d0d      	ldr	r5, [pc, #52]	; (800cbd4 <__libc_init_array+0x38>)
 800cba0:	4c0d      	ldr	r4, [pc, #52]	; (800cbd8 <__libc_init_array+0x3c>)
 800cba2:	1b64      	subs	r4, r4, r5
 800cba4:	10a4      	asrs	r4, r4, #2
 800cba6:	2600      	movs	r6, #0
 800cba8:	42a6      	cmp	r6, r4
 800cbaa:	d109      	bne.n	800cbc0 <__libc_init_array+0x24>
 800cbac:	4d0b      	ldr	r5, [pc, #44]	; (800cbdc <__libc_init_array+0x40>)
 800cbae:	4c0c      	ldr	r4, [pc, #48]	; (800cbe0 <__libc_init_array+0x44>)
 800cbb0:	f000 fc6c 	bl	800d48c <_init>
 800cbb4:	1b64      	subs	r4, r4, r5
 800cbb6:	10a4      	asrs	r4, r4, #2
 800cbb8:	2600      	movs	r6, #0
 800cbba:	42a6      	cmp	r6, r4
 800cbbc:	d105      	bne.n	800cbca <__libc_init_array+0x2e>
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbc4:	4798      	blx	r3
 800cbc6:	3601      	adds	r6, #1
 800cbc8:	e7ee      	b.n	800cba8 <__libc_init_array+0xc>
 800cbca:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbce:	4798      	blx	r3
 800cbd0:	3601      	adds	r6, #1
 800cbd2:	e7f2      	b.n	800cbba <__libc_init_array+0x1e>
 800cbd4:	0800d898 	.word	0x0800d898
 800cbd8:	0800d898 	.word	0x0800d898
 800cbdc:	0800d898 	.word	0x0800d898
 800cbe0:	0800d89c 	.word	0x0800d89c

0800cbe4 <malloc>:
 800cbe4:	4b02      	ldr	r3, [pc, #8]	; (800cbf0 <malloc+0xc>)
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	f000 b871 	b.w	800ccd0 <_malloc_r>
 800cbee:	bf00      	nop
 800cbf0:	20000030 	.word	0x20000030

0800cbf4 <free>:
 800cbf4:	4b02      	ldr	r3, [pc, #8]	; (800cc00 <free+0xc>)
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	6818      	ldr	r0, [r3, #0]
 800cbfa:	f000 b819 	b.w	800cc30 <_free_r>
 800cbfe:	bf00      	nop
 800cc00:	20000030 	.word	0x20000030

0800cc04 <memcpy>:
 800cc04:	440a      	add	r2, r1
 800cc06:	4291      	cmp	r1, r2
 800cc08:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc0c:	d100      	bne.n	800cc10 <memcpy+0xc>
 800cc0e:	4770      	bx	lr
 800cc10:	b510      	push	{r4, lr}
 800cc12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc1a:	4291      	cmp	r1, r2
 800cc1c:	d1f9      	bne.n	800cc12 <memcpy+0xe>
 800cc1e:	bd10      	pop	{r4, pc}

0800cc20 <memset>:
 800cc20:	4402      	add	r2, r0
 800cc22:	4603      	mov	r3, r0
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d100      	bne.n	800cc2a <memset+0xa>
 800cc28:	4770      	bx	lr
 800cc2a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc2e:	e7f9      	b.n	800cc24 <memset+0x4>

0800cc30 <_free_r>:
 800cc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc32:	2900      	cmp	r1, #0
 800cc34:	d048      	beq.n	800ccc8 <_free_r+0x98>
 800cc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc3a:	9001      	str	r0, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc42:	bfb8      	it	lt
 800cc44:	18e4      	addlt	r4, r4, r3
 800cc46:	f000 f8cd 	bl	800cde4 <__malloc_lock>
 800cc4a:	4a20      	ldr	r2, [pc, #128]	; (800cccc <_free_r+0x9c>)
 800cc4c:	9801      	ldr	r0, [sp, #4]
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	4615      	mov	r5, r2
 800cc52:	b933      	cbnz	r3, 800cc62 <_free_r+0x32>
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	6014      	str	r4, [r2, #0]
 800cc58:	b003      	add	sp, #12
 800cc5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc5e:	f000 b8c7 	b.w	800cdf0 <__malloc_unlock>
 800cc62:	42a3      	cmp	r3, r4
 800cc64:	d90b      	bls.n	800cc7e <_free_r+0x4e>
 800cc66:	6821      	ldr	r1, [r4, #0]
 800cc68:	1862      	adds	r2, r4, r1
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	bf04      	itt	eq
 800cc6e:	681a      	ldreq	r2, [r3, #0]
 800cc70:	685b      	ldreq	r3, [r3, #4]
 800cc72:	6063      	str	r3, [r4, #4]
 800cc74:	bf04      	itt	eq
 800cc76:	1852      	addeq	r2, r2, r1
 800cc78:	6022      	streq	r2, [r4, #0]
 800cc7a:	602c      	str	r4, [r5, #0]
 800cc7c:	e7ec      	b.n	800cc58 <_free_r+0x28>
 800cc7e:	461a      	mov	r2, r3
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	b10b      	cbz	r3, 800cc88 <_free_r+0x58>
 800cc84:	42a3      	cmp	r3, r4
 800cc86:	d9fa      	bls.n	800cc7e <_free_r+0x4e>
 800cc88:	6811      	ldr	r1, [r2, #0]
 800cc8a:	1855      	adds	r5, r2, r1
 800cc8c:	42a5      	cmp	r5, r4
 800cc8e:	d10b      	bne.n	800cca8 <_free_r+0x78>
 800cc90:	6824      	ldr	r4, [r4, #0]
 800cc92:	4421      	add	r1, r4
 800cc94:	1854      	adds	r4, r2, r1
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	6011      	str	r1, [r2, #0]
 800cc9a:	d1dd      	bne.n	800cc58 <_free_r+0x28>
 800cc9c:	681c      	ldr	r4, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	6053      	str	r3, [r2, #4]
 800cca2:	4421      	add	r1, r4
 800cca4:	6011      	str	r1, [r2, #0]
 800cca6:	e7d7      	b.n	800cc58 <_free_r+0x28>
 800cca8:	d902      	bls.n	800ccb0 <_free_r+0x80>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	6003      	str	r3, [r0, #0]
 800ccae:	e7d3      	b.n	800cc58 <_free_r+0x28>
 800ccb0:	6825      	ldr	r5, [r4, #0]
 800ccb2:	1961      	adds	r1, r4, r5
 800ccb4:	428b      	cmp	r3, r1
 800ccb6:	bf04      	itt	eq
 800ccb8:	6819      	ldreq	r1, [r3, #0]
 800ccba:	685b      	ldreq	r3, [r3, #4]
 800ccbc:	6063      	str	r3, [r4, #4]
 800ccbe:	bf04      	itt	eq
 800ccc0:	1949      	addeq	r1, r1, r5
 800ccc2:	6021      	streq	r1, [r4, #0]
 800ccc4:	6054      	str	r4, [r2, #4]
 800ccc6:	e7c7      	b.n	800cc58 <_free_r+0x28>
 800ccc8:	b003      	add	sp, #12
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	20002920 	.word	0x20002920

0800ccd0 <_malloc_r>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	1ccd      	adds	r5, r1, #3
 800ccd4:	f025 0503 	bic.w	r5, r5, #3
 800ccd8:	3508      	adds	r5, #8
 800ccda:	2d0c      	cmp	r5, #12
 800ccdc:	bf38      	it	cc
 800ccde:	250c      	movcc	r5, #12
 800cce0:	2d00      	cmp	r5, #0
 800cce2:	4606      	mov	r6, r0
 800cce4:	db01      	blt.n	800ccea <_malloc_r+0x1a>
 800cce6:	42a9      	cmp	r1, r5
 800cce8:	d903      	bls.n	800ccf2 <_malloc_r+0x22>
 800ccea:	230c      	movs	r3, #12
 800ccec:	6033      	str	r3, [r6, #0]
 800ccee:	2000      	movs	r0, #0
 800ccf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf2:	f000 f877 	bl	800cde4 <__malloc_lock>
 800ccf6:	4921      	ldr	r1, [pc, #132]	; (800cd7c <_malloc_r+0xac>)
 800ccf8:	680a      	ldr	r2, [r1, #0]
 800ccfa:	4614      	mov	r4, r2
 800ccfc:	b99c      	cbnz	r4, 800cd26 <_malloc_r+0x56>
 800ccfe:	4f20      	ldr	r7, [pc, #128]	; (800cd80 <_malloc_r+0xb0>)
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	b923      	cbnz	r3, 800cd0e <_malloc_r+0x3e>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4630      	mov	r0, r6
 800cd08:	f000 f83c 	bl	800cd84 <_sbrk_r>
 800cd0c:	6038      	str	r0, [r7, #0]
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4630      	mov	r0, r6
 800cd12:	f000 f837 	bl	800cd84 <_sbrk_r>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	d123      	bne.n	800cd62 <_malloc_r+0x92>
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	6033      	str	r3, [r6, #0]
 800cd1e:	4630      	mov	r0, r6
 800cd20:	f000 f866 	bl	800cdf0 <__malloc_unlock>
 800cd24:	e7e3      	b.n	800ccee <_malloc_r+0x1e>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	1b5b      	subs	r3, r3, r5
 800cd2a:	d417      	bmi.n	800cd5c <_malloc_r+0x8c>
 800cd2c:	2b0b      	cmp	r3, #11
 800cd2e:	d903      	bls.n	800cd38 <_malloc_r+0x68>
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	441c      	add	r4, r3
 800cd34:	6025      	str	r5, [r4, #0]
 800cd36:	e004      	b.n	800cd42 <_malloc_r+0x72>
 800cd38:	6863      	ldr	r3, [r4, #4]
 800cd3a:	42a2      	cmp	r2, r4
 800cd3c:	bf0c      	ite	eq
 800cd3e:	600b      	streq	r3, [r1, #0]
 800cd40:	6053      	strne	r3, [r2, #4]
 800cd42:	4630      	mov	r0, r6
 800cd44:	f000 f854 	bl	800cdf0 <__malloc_unlock>
 800cd48:	f104 000b 	add.w	r0, r4, #11
 800cd4c:	1d23      	adds	r3, r4, #4
 800cd4e:	f020 0007 	bic.w	r0, r0, #7
 800cd52:	1ac2      	subs	r2, r0, r3
 800cd54:	d0cc      	beq.n	800ccf0 <_malloc_r+0x20>
 800cd56:	1a1b      	subs	r3, r3, r0
 800cd58:	50a3      	str	r3, [r4, r2]
 800cd5a:	e7c9      	b.n	800ccf0 <_malloc_r+0x20>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	6864      	ldr	r4, [r4, #4]
 800cd60:	e7cc      	b.n	800ccfc <_malloc_r+0x2c>
 800cd62:	1cc4      	adds	r4, r0, #3
 800cd64:	f024 0403 	bic.w	r4, r4, #3
 800cd68:	42a0      	cmp	r0, r4
 800cd6a:	d0e3      	beq.n	800cd34 <_malloc_r+0x64>
 800cd6c:	1a21      	subs	r1, r4, r0
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f000 f808 	bl	800cd84 <_sbrk_r>
 800cd74:	3001      	adds	r0, #1
 800cd76:	d1dd      	bne.n	800cd34 <_malloc_r+0x64>
 800cd78:	e7cf      	b.n	800cd1a <_malloc_r+0x4a>
 800cd7a:	bf00      	nop
 800cd7c:	20002920 	.word	0x20002920
 800cd80:	20002924 	.word	0x20002924

0800cd84 <_sbrk_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d06      	ldr	r5, [pc, #24]	; (800cda0 <_sbrk_r+0x1c>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	602b      	str	r3, [r5, #0]
 800cd90:	f000 fb6e 	bl	800d470 <_sbrk>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_sbrk_r+0x1a>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_sbrk_r+0x1a>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	200032d4 	.word	0x200032d4

0800cda4 <siprintf>:
 800cda4:	b40e      	push	{r1, r2, r3}
 800cda6:	b500      	push	{lr}
 800cda8:	b09c      	sub	sp, #112	; 0x70
 800cdaa:	ab1d      	add	r3, sp, #116	; 0x74
 800cdac:	9002      	str	r0, [sp, #8]
 800cdae:	9006      	str	r0, [sp, #24]
 800cdb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdb4:	4809      	ldr	r0, [pc, #36]	; (800cddc <siprintf+0x38>)
 800cdb6:	9107      	str	r1, [sp, #28]
 800cdb8:	9104      	str	r1, [sp, #16]
 800cdba:	4909      	ldr	r1, [pc, #36]	; (800cde0 <siprintf+0x3c>)
 800cdbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc0:	9105      	str	r1, [sp, #20]
 800cdc2:	6800      	ldr	r0, [r0, #0]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	a902      	add	r1, sp, #8
 800cdc8:	f000 f874 	bl	800ceb4 <_svfiprintf_r>
 800cdcc:	9b02      	ldr	r3, [sp, #8]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	b01c      	add	sp, #112	; 0x70
 800cdd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdd8:	b003      	add	sp, #12
 800cdda:	4770      	bx	lr
 800cddc:	20000030 	.word	0x20000030
 800cde0:	ffff0208 	.word	0xffff0208

0800cde4 <__malloc_lock>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__malloc_lock+0x8>)
 800cde6:	f000 baf9 	b.w	800d3dc <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	200032dc 	.word	0x200032dc

0800cdf0 <__malloc_unlock>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__malloc_unlock+0x8>)
 800cdf2:	f000 baf4 	b.w	800d3de <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	200032dc 	.word	0x200032dc

0800cdfc <__ssputs_r>:
 800cdfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce00:	688e      	ldr	r6, [r1, #8]
 800ce02:	429e      	cmp	r6, r3
 800ce04:	4682      	mov	sl, r0
 800ce06:	460c      	mov	r4, r1
 800ce08:	4690      	mov	r8, r2
 800ce0a:	461f      	mov	r7, r3
 800ce0c:	d838      	bhi.n	800ce80 <__ssputs_r+0x84>
 800ce0e:	898a      	ldrh	r2, [r1, #12]
 800ce10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce14:	d032      	beq.n	800ce7c <__ssputs_r+0x80>
 800ce16:	6825      	ldr	r5, [r4, #0]
 800ce18:	6909      	ldr	r1, [r1, #16]
 800ce1a:	eba5 0901 	sub.w	r9, r5, r1
 800ce1e:	6965      	ldr	r5, [r4, #20]
 800ce20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce28:	3301      	adds	r3, #1
 800ce2a:	444b      	add	r3, r9
 800ce2c:	106d      	asrs	r5, r5, #1
 800ce2e:	429d      	cmp	r5, r3
 800ce30:	bf38      	it	cc
 800ce32:	461d      	movcc	r5, r3
 800ce34:	0553      	lsls	r3, r2, #21
 800ce36:	d531      	bpl.n	800ce9c <__ssputs_r+0xa0>
 800ce38:	4629      	mov	r1, r5
 800ce3a:	f7ff ff49 	bl	800ccd0 <_malloc_r>
 800ce3e:	4606      	mov	r6, r0
 800ce40:	b950      	cbnz	r0, 800ce58 <__ssputs_r+0x5c>
 800ce42:	230c      	movs	r3, #12
 800ce44:	f8ca 3000 	str.w	r3, [sl]
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce58:	6921      	ldr	r1, [r4, #16]
 800ce5a:	464a      	mov	r2, r9
 800ce5c:	f7ff fed2 	bl	800cc04 <memcpy>
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	6126      	str	r6, [r4, #16]
 800ce6e:	6165      	str	r5, [r4, #20]
 800ce70:	444e      	add	r6, r9
 800ce72:	eba5 0509 	sub.w	r5, r5, r9
 800ce76:	6026      	str	r6, [r4, #0]
 800ce78:	60a5      	str	r5, [r4, #8]
 800ce7a:	463e      	mov	r6, r7
 800ce7c:	42be      	cmp	r6, r7
 800ce7e:	d900      	bls.n	800ce82 <__ssputs_r+0x86>
 800ce80:	463e      	mov	r6, r7
 800ce82:	4632      	mov	r2, r6
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	4641      	mov	r1, r8
 800ce88:	f000 faaa 	bl	800d3e0 <memmove>
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	6822      	ldr	r2, [r4, #0]
 800ce90:	1b9b      	subs	r3, r3, r6
 800ce92:	4432      	add	r2, r6
 800ce94:	60a3      	str	r3, [r4, #8]
 800ce96:	6022      	str	r2, [r4, #0]
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e7db      	b.n	800ce54 <__ssputs_r+0x58>
 800ce9c:	462a      	mov	r2, r5
 800ce9e:	f000 fab9 	bl	800d414 <_realloc_r>
 800cea2:	4606      	mov	r6, r0
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d1e1      	bne.n	800ce6c <__ssputs_r+0x70>
 800cea8:	6921      	ldr	r1, [r4, #16]
 800ceaa:	4650      	mov	r0, sl
 800ceac:	f7ff fec0 	bl	800cc30 <_free_r>
 800ceb0:	e7c7      	b.n	800ce42 <__ssputs_r+0x46>
	...

0800ceb4 <_svfiprintf_r>:
 800ceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb8:	4698      	mov	r8, r3
 800ceba:	898b      	ldrh	r3, [r1, #12]
 800cebc:	061b      	lsls	r3, r3, #24
 800cebe:	b09d      	sub	sp, #116	; 0x74
 800cec0:	4607      	mov	r7, r0
 800cec2:	460d      	mov	r5, r1
 800cec4:	4614      	mov	r4, r2
 800cec6:	d50e      	bpl.n	800cee6 <_svfiprintf_r+0x32>
 800cec8:	690b      	ldr	r3, [r1, #16]
 800ceca:	b963      	cbnz	r3, 800cee6 <_svfiprintf_r+0x32>
 800cecc:	2140      	movs	r1, #64	; 0x40
 800cece:	f7ff feff 	bl	800ccd0 <_malloc_r>
 800ced2:	6028      	str	r0, [r5, #0]
 800ced4:	6128      	str	r0, [r5, #16]
 800ced6:	b920      	cbnz	r0, 800cee2 <_svfiprintf_r+0x2e>
 800ced8:	230c      	movs	r3, #12
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	f04f 30ff 	mov.w	r0, #4294967295
 800cee0:	e0d1      	b.n	800d086 <_svfiprintf_r+0x1d2>
 800cee2:	2340      	movs	r3, #64	; 0x40
 800cee4:	616b      	str	r3, [r5, #20]
 800cee6:	2300      	movs	r3, #0
 800cee8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceea:	2320      	movs	r3, #32
 800ceec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cef4:	2330      	movs	r3, #48	; 0x30
 800cef6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0a0 <_svfiprintf_r+0x1ec>
 800cefa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cefe:	f04f 0901 	mov.w	r9, #1
 800cf02:	4623      	mov	r3, r4
 800cf04:	469a      	mov	sl, r3
 800cf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf0a:	b10a      	cbz	r2, 800cf10 <_svfiprintf_r+0x5c>
 800cf0c:	2a25      	cmp	r2, #37	; 0x25
 800cf0e:	d1f9      	bne.n	800cf04 <_svfiprintf_r+0x50>
 800cf10:	ebba 0b04 	subs.w	fp, sl, r4
 800cf14:	d00b      	beq.n	800cf2e <_svfiprintf_r+0x7a>
 800cf16:	465b      	mov	r3, fp
 800cf18:	4622      	mov	r2, r4
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	4638      	mov	r0, r7
 800cf1e:	f7ff ff6d 	bl	800cdfc <__ssputs_r>
 800cf22:	3001      	adds	r0, #1
 800cf24:	f000 80aa 	beq.w	800d07c <_svfiprintf_r+0x1c8>
 800cf28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf2a:	445a      	add	r2, fp
 800cf2c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf2e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 80a2 	beq.w	800d07c <_svfiprintf_r+0x1c8>
 800cf38:	2300      	movs	r3, #0
 800cf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf42:	f10a 0a01 	add.w	sl, sl, #1
 800cf46:	9304      	str	r3, [sp, #16]
 800cf48:	9307      	str	r3, [sp, #28]
 800cf4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf4e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf50:	4654      	mov	r4, sl
 800cf52:	2205      	movs	r2, #5
 800cf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf58:	4851      	ldr	r0, [pc, #324]	; (800d0a0 <_svfiprintf_r+0x1ec>)
 800cf5a:	f7f3 f941 	bl	80001e0 <memchr>
 800cf5e:	9a04      	ldr	r2, [sp, #16]
 800cf60:	b9d8      	cbnz	r0, 800cf9a <_svfiprintf_r+0xe6>
 800cf62:	06d0      	lsls	r0, r2, #27
 800cf64:	bf44      	itt	mi
 800cf66:	2320      	movmi	r3, #32
 800cf68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf6c:	0711      	lsls	r1, r2, #28
 800cf6e:	bf44      	itt	mi
 800cf70:	232b      	movmi	r3, #43	; 0x2b
 800cf72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf76:	f89a 3000 	ldrb.w	r3, [sl]
 800cf7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf7c:	d015      	beq.n	800cfaa <_svfiprintf_r+0xf6>
 800cf7e:	9a07      	ldr	r2, [sp, #28]
 800cf80:	4654      	mov	r4, sl
 800cf82:	2000      	movs	r0, #0
 800cf84:	f04f 0c0a 	mov.w	ip, #10
 800cf88:	4621      	mov	r1, r4
 800cf8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf8e:	3b30      	subs	r3, #48	; 0x30
 800cf90:	2b09      	cmp	r3, #9
 800cf92:	d94e      	bls.n	800d032 <_svfiprintf_r+0x17e>
 800cf94:	b1b0      	cbz	r0, 800cfc4 <_svfiprintf_r+0x110>
 800cf96:	9207      	str	r2, [sp, #28]
 800cf98:	e014      	b.n	800cfc4 <_svfiprintf_r+0x110>
 800cf9a:	eba0 0308 	sub.w	r3, r0, r8
 800cf9e:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	9304      	str	r3, [sp, #16]
 800cfa6:	46a2      	mov	sl, r4
 800cfa8:	e7d2      	b.n	800cf50 <_svfiprintf_r+0x9c>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	1d19      	adds	r1, r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	9103      	str	r1, [sp, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bfbb      	ittet	lt
 800cfb6:	425b      	neglt	r3, r3
 800cfb8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfbc:	9307      	strge	r3, [sp, #28]
 800cfbe:	9307      	strlt	r3, [sp, #28]
 800cfc0:	bfb8      	it	lt
 800cfc2:	9204      	strlt	r2, [sp, #16]
 800cfc4:	7823      	ldrb	r3, [r4, #0]
 800cfc6:	2b2e      	cmp	r3, #46	; 0x2e
 800cfc8:	d10c      	bne.n	800cfe4 <_svfiprintf_r+0x130>
 800cfca:	7863      	ldrb	r3, [r4, #1]
 800cfcc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfce:	d135      	bne.n	800d03c <_svfiprintf_r+0x188>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	1d1a      	adds	r2, r3, #4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	9203      	str	r2, [sp, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	bfb8      	it	lt
 800cfdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfe0:	3402      	adds	r4, #2
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0b0 <_svfiprintf_r+0x1fc>
 800cfe8:	7821      	ldrb	r1, [r4, #0]
 800cfea:	2203      	movs	r2, #3
 800cfec:	4650      	mov	r0, sl
 800cfee:	f7f3 f8f7 	bl	80001e0 <memchr>
 800cff2:	b140      	cbz	r0, 800d006 <_svfiprintf_r+0x152>
 800cff4:	2340      	movs	r3, #64	; 0x40
 800cff6:	eba0 000a 	sub.w	r0, r0, sl
 800cffa:	fa03 f000 	lsl.w	r0, r3, r0
 800cffe:	9b04      	ldr	r3, [sp, #16]
 800d000:	4303      	orrs	r3, r0
 800d002:	3401      	adds	r4, #1
 800d004:	9304      	str	r3, [sp, #16]
 800d006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00a:	4826      	ldr	r0, [pc, #152]	; (800d0a4 <_svfiprintf_r+0x1f0>)
 800d00c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d010:	2206      	movs	r2, #6
 800d012:	f7f3 f8e5 	bl	80001e0 <memchr>
 800d016:	2800      	cmp	r0, #0
 800d018:	d038      	beq.n	800d08c <_svfiprintf_r+0x1d8>
 800d01a:	4b23      	ldr	r3, [pc, #140]	; (800d0a8 <_svfiprintf_r+0x1f4>)
 800d01c:	bb1b      	cbnz	r3, 800d066 <_svfiprintf_r+0x1b2>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	3307      	adds	r3, #7
 800d022:	f023 0307 	bic.w	r3, r3, #7
 800d026:	3308      	adds	r3, #8
 800d028:	9303      	str	r3, [sp, #12]
 800d02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d02c:	4433      	add	r3, r6
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	e767      	b.n	800cf02 <_svfiprintf_r+0x4e>
 800d032:	fb0c 3202 	mla	r2, ip, r2, r3
 800d036:	460c      	mov	r4, r1
 800d038:	2001      	movs	r0, #1
 800d03a:	e7a5      	b.n	800cf88 <_svfiprintf_r+0xd4>
 800d03c:	2300      	movs	r3, #0
 800d03e:	3401      	adds	r4, #1
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	4619      	mov	r1, r3
 800d044:	f04f 0c0a 	mov.w	ip, #10
 800d048:	4620      	mov	r0, r4
 800d04a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d04e:	3a30      	subs	r2, #48	; 0x30
 800d050:	2a09      	cmp	r2, #9
 800d052:	d903      	bls.n	800d05c <_svfiprintf_r+0x1a8>
 800d054:	2b00      	cmp	r3, #0
 800d056:	d0c5      	beq.n	800cfe4 <_svfiprintf_r+0x130>
 800d058:	9105      	str	r1, [sp, #20]
 800d05a:	e7c3      	b.n	800cfe4 <_svfiprintf_r+0x130>
 800d05c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d060:	4604      	mov	r4, r0
 800d062:	2301      	movs	r3, #1
 800d064:	e7f0      	b.n	800d048 <_svfiprintf_r+0x194>
 800d066:	ab03      	add	r3, sp, #12
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	462a      	mov	r2, r5
 800d06c:	4b0f      	ldr	r3, [pc, #60]	; (800d0ac <_svfiprintf_r+0x1f8>)
 800d06e:	a904      	add	r1, sp, #16
 800d070:	4638      	mov	r0, r7
 800d072:	f3af 8000 	nop.w
 800d076:	1c42      	adds	r2, r0, #1
 800d078:	4606      	mov	r6, r0
 800d07a:	d1d6      	bne.n	800d02a <_svfiprintf_r+0x176>
 800d07c:	89ab      	ldrh	r3, [r5, #12]
 800d07e:	065b      	lsls	r3, r3, #25
 800d080:	f53f af2c 	bmi.w	800cedc <_svfiprintf_r+0x28>
 800d084:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d086:	b01d      	add	sp, #116	; 0x74
 800d088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08c:	ab03      	add	r3, sp, #12
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	462a      	mov	r2, r5
 800d092:	4b06      	ldr	r3, [pc, #24]	; (800d0ac <_svfiprintf_r+0x1f8>)
 800d094:	a904      	add	r1, sp, #16
 800d096:	4638      	mov	r0, r7
 800d098:	f000 f87a 	bl	800d190 <_printf_i>
 800d09c:	e7eb      	b.n	800d076 <_svfiprintf_r+0x1c2>
 800d09e:	bf00      	nop
 800d0a0:	0800d85c 	.word	0x0800d85c
 800d0a4:	0800d866 	.word	0x0800d866
 800d0a8:	00000000 	.word	0x00000000
 800d0ac:	0800cdfd 	.word	0x0800cdfd
 800d0b0:	0800d862 	.word	0x0800d862

0800d0b4 <_printf_common>:
 800d0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b8:	4616      	mov	r6, r2
 800d0ba:	4699      	mov	r9, r3
 800d0bc:	688a      	ldr	r2, [r1, #8]
 800d0be:	690b      	ldr	r3, [r1, #16]
 800d0c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	bfb8      	it	lt
 800d0c8:	4613      	movlt	r3, r2
 800d0ca:	6033      	str	r3, [r6, #0]
 800d0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	b10a      	cbz	r2, 800d0da <_printf_common+0x26>
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	6033      	str	r3, [r6, #0]
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	0699      	lsls	r1, r3, #26
 800d0de:	bf42      	ittt	mi
 800d0e0:	6833      	ldrmi	r3, [r6, #0]
 800d0e2:	3302      	addmi	r3, #2
 800d0e4:	6033      	strmi	r3, [r6, #0]
 800d0e6:	6825      	ldr	r5, [r4, #0]
 800d0e8:	f015 0506 	ands.w	r5, r5, #6
 800d0ec:	d106      	bne.n	800d0fc <_printf_common+0x48>
 800d0ee:	f104 0a19 	add.w	sl, r4, #25
 800d0f2:	68e3      	ldr	r3, [r4, #12]
 800d0f4:	6832      	ldr	r2, [r6, #0]
 800d0f6:	1a9b      	subs	r3, r3, r2
 800d0f8:	42ab      	cmp	r3, r5
 800d0fa:	dc26      	bgt.n	800d14a <_printf_common+0x96>
 800d0fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d100:	1e13      	subs	r3, r2, #0
 800d102:	6822      	ldr	r2, [r4, #0]
 800d104:	bf18      	it	ne
 800d106:	2301      	movne	r3, #1
 800d108:	0692      	lsls	r2, r2, #26
 800d10a:	d42b      	bmi.n	800d164 <_printf_common+0xb0>
 800d10c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d110:	4649      	mov	r1, r9
 800d112:	4638      	mov	r0, r7
 800d114:	47c0      	blx	r8
 800d116:	3001      	adds	r0, #1
 800d118:	d01e      	beq.n	800d158 <_printf_common+0xa4>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	68e5      	ldr	r5, [r4, #12]
 800d11e:	6832      	ldr	r2, [r6, #0]
 800d120:	f003 0306 	and.w	r3, r3, #6
 800d124:	2b04      	cmp	r3, #4
 800d126:	bf08      	it	eq
 800d128:	1aad      	subeq	r5, r5, r2
 800d12a:	68a3      	ldr	r3, [r4, #8]
 800d12c:	6922      	ldr	r2, [r4, #16]
 800d12e:	bf0c      	ite	eq
 800d130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d134:	2500      	movne	r5, #0
 800d136:	4293      	cmp	r3, r2
 800d138:	bfc4      	itt	gt
 800d13a:	1a9b      	subgt	r3, r3, r2
 800d13c:	18ed      	addgt	r5, r5, r3
 800d13e:	2600      	movs	r6, #0
 800d140:	341a      	adds	r4, #26
 800d142:	42b5      	cmp	r5, r6
 800d144:	d11a      	bne.n	800d17c <_printf_common+0xc8>
 800d146:	2000      	movs	r0, #0
 800d148:	e008      	b.n	800d15c <_printf_common+0xa8>
 800d14a:	2301      	movs	r3, #1
 800d14c:	4652      	mov	r2, sl
 800d14e:	4649      	mov	r1, r9
 800d150:	4638      	mov	r0, r7
 800d152:	47c0      	blx	r8
 800d154:	3001      	adds	r0, #1
 800d156:	d103      	bne.n	800d160 <_printf_common+0xac>
 800d158:	f04f 30ff 	mov.w	r0, #4294967295
 800d15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d160:	3501      	adds	r5, #1
 800d162:	e7c6      	b.n	800d0f2 <_printf_common+0x3e>
 800d164:	18e1      	adds	r1, r4, r3
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	2030      	movs	r0, #48	; 0x30
 800d16a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d16e:	4422      	add	r2, r4
 800d170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d178:	3302      	adds	r3, #2
 800d17a:	e7c7      	b.n	800d10c <_printf_common+0x58>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4622      	mov	r2, r4
 800d180:	4649      	mov	r1, r9
 800d182:	4638      	mov	r0, r7
 800d184:	47c0      	blx	r8
 800d186:	3001      	adds	r0, #1
 800d188:	d0e6      	beq.n	800d158 <_printf_common+0xa4>
 800d18a:	3601      	adds	r6, #1
 800d18c:	e7d9      	b.n	800d142 <_printf_common+0x8e>
	...

0800d190 <_printf_i>:
 800d190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d194:	460c      	mov	r4, r1
 800d196:	4691      	mov	r9, r2
 800d198:	7e27      	ldrb	r7, [r4, #24]
 800d19a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d19c:	2f78      	cmp	r7, #120	; 0x78
 800d19e:	4680      	mov	r8, r0
 800d1a0:	469a      	mov	sl, r3
 800d1a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1a6:	d807      	bhi.n	800d1b8 <_printf_i+0x28>
 800d1a8:	2f62      	cmp	r7, #98	; 0x62
 800d1aa:	d80a      	bhi.n	800d1c2 <_printf_i+0x32>
 800d1ac:	2f00      	cmp	r7, #0
 800d1ae:	f000 80d8 	beq.w	800d362 <_printf_i+0x1d2>
 800d1b2:	2f58      	cmp	r7, #88	; 0x58
 800d1b4:	f000 80a3 	beq.w	800d2fe <_printf_i+0x16e>
 800d1b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1c0:	e03a      	b.n	800d238 <_printf_i+0xa8>
 800d1c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1c6:	2b15      	cmp	r3, #21
 800d1c8:	d8f6      	bhi.n	800d1b8 <_printf_i+0x28>
 800d1ca:	a001      	add	r0, pc, #4	; (adr r0, 800d1d0 <_printf_i+0x40>)
 800d1cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1d0:	0800d229 	.word	0x0800d229
 800d1d4:	0800d23d 	.word	0x0800d23d
 800d1d8:	0800d1b9 	.word	0x0800d1b9
 800d1dc:	0800d1b9 	.word	0x0800d1b9
 800d1e0:	0800d1b9 	.word	0x0800d1b9
 800d1e4:	0800d1b9 	.word	0x0800d1b9
 800d1e8:	0800d23d 	.word	0x0800d23d
 800d1ec:	0800d1b9 	.word	0x0800d1b9
 800d1f0:	0800d1b9 	.word	0x0800d1b9
 800d1f4:	0800d1b9 	.word	0x0800d1b9
 800d1f8:	0800d1b9 	.word	0x0800d1b9
 800d1fc:	0800d349 	.word	0x0800d349
 800d200:	0800d26d 	.word	0x0800d26d
 800d204:	0800d32b 	.word	0x0800d32b
 800d208:	0800d1b9 	.word	0x0800d1b9
 800d20c:	0800d1b9 	.word	0x0800d1b9
 800d210:	0800d36b 	.word	0x0800d36b
 800d214:	0800d1b9 	.word	0x0800d1b9
 800d218:	0800d26d 	.word	0x0800d26d
 800d21c:	0800d1b9 	.word	0x0800d1b9
 800d220:	0800d1b9 	.word	0x0800d1b9
 800d224:	0800d333 	.word	0x0800d333
 800d228:	680b      	ldr	r3, [r1, #0]
 800d22a:	1d1a      	adds	r2, r3, #4
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	600a      	str	r2, [r1, #0]
 800d230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d238:	2301      	movs	r3, #1
 800d23a:	e0a3      	b.n	800d384 <_printf_i+0x1f4>
 800d23c:	6825      	ldr	r5, [r4, #0]
 800d23e:	6808      	ldr	r0, [r1, #0]
 800d240:	062e      	lsls	r6, r5, #24
 800d242:	f100 0304 	add.w	r3, r0, #4
 800d246:	d50a      	bpl.n	800d25e <_printf_i+0xce>
 800d248:	6805      	ldr	r5, [r0, #0]
 800d24a:	600b      	str	r3, [r1, #0]
 800d24c:	2d00      	cmp	r5, #0
 800d24e:	da03      	bge.n	800d258 <_printf_i+0xc8>
 800d250:	232d      	movs	r3, #45	; 0x2d
 800d252:	426d      	negs	r5, r5
 800d254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d258:	485e      	ldr	r0, [pc, #376]	; (800d3d4 <_printf_i+0x244>)
 800d25a:	230a      	movs	r3, #10
 800d25c:	e019      	b.n	800d292 <_printf_i+0x102>
 800d25e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d262:	6805      	ldr	r5, [r0, #0]
 800d264:	600b      	str	r3, [r1, #0]
 800d266:	bf18      	it	ne
 800d268:	b22d      	sxthne	r5, r5
 800d26a:	e7ef      	b.n	800d24c <_printf_i+0xbc>
 800d26c:	680b      	ldr	r3, [r1, #0]
 800d26e:	6825      	ldr	r5, [r4, #0]
 800d270:	1d18      	adds	r0, r3, #4
 800d272:	6008      	str	r0, [r1, #0]
 800d274:	0628      	lsls	r0, r5, #24
 800d276:	d501      	bpl.n	800d27c <_printf_i+0xec>
 800d278:	681d      	ldr	r5, [r3, #0]
 800d27a:	e002      	b.n	800d282 <_printf_i+0xf2>
 800d27c:	0669      	lsls	r1, r5, #25
 800d27e:	d5fb      	bpl.n	800d278 <_printf_i+0xe8>
 800d280:	881d      	ldrh	r5, [r3, #0]
 800d282:	4854      	ldr	r0, [pc, #336]	; (800d3d4 <_printf_i+0x244>)
 800d284:	2f6f      	cmp	r7, #111	; 0x6f
 800d286:	bf0c      	ite	eq
 800d288:	2308      	moveq	r3, #8
 800d28a:	230a      	movne	r3, #10
 800d28c:	2100      	movs	r1, #0
 800d28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d292:	6866      	ldr	r6, [r4, #4]
 800d294:	60a6      	str	r6, [r4, #8]
 800d296:	2e00      	cmp	r6, #0
 800d298:	bfa2      	ittt	ge
 800d29a:	6821      	ldrge	r1, [r4, #0]
 800d29c:	f021 0104 	bicge.w	r1, r1, #4
 800d2a0:	6021      	strge	r1, [r4, #0]
 800d2a2:	b90d      	cbnz	r5, 800d2a8 <_printf_i+0x118>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	d04d      	beq.n	800d344 <_printf_i+0x1b4>
 800d2a8:	4616      	mov	r6, r2
 800d2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2ae:	fb03 5711 	mls	r7, r3, r1, r5
 800d2b2:	5dc7      	ldrb	r7, [r0, r7]
 800d2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2b8:	462f      	mov	r7, r5
 800d2ba:	42bb      	cmp	r3, r7
 800d2bc:	460d      	mov	r5, r1
 800d2be:	d9f4      	bls.n	800d2aa <_printf_i+0x11a>
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	d10b      	bne.n	800d2dc <_printf_i+0x14c>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	07df      	lsls	r7, r3, #31
 800d2c8:	d508      	bpl.n	800d2dc <_printf_i+0x14c>
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	6861      	ldr	r1, [r4, #4]
 800d2ce:	4299      	cmp	r1, r3
 800d2d0:	bfde      	ittt	le
 800d2d2:	2330      	movle	r3, #48	; 0x30
 800d2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2dc:	1b92      	subs	r2, r2, r6
 800d2de:	6122      	str	r2, [r4, #16]
 800d2e0:	f8cd a000 	str.w	sl, [sp]
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	aa03      	add	r2, sp, #12
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	f7ff fee2 	bl	800d0b4 <_printf_common>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d14c      	bne.n	800d38e <_printf_i+0x1fe>
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	b004      	add	sp, #16
 800d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fe:	4835      	ldr	r0, [pc, #212]	; (800d3d4 <_printf_i+0x244>)
 800d300:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	680e      	ldr	r6, [r1, #0]
 800d308:	061f      	lsls	r7, r3, #24
 800d30a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d30e:	600e      	str	r6, [r1, #0]
 800d310:	d514      	bpl.n	800d33c <_printf_i+0x1ac>
 800d312:	07d9      	lsls	r1, r3, #31
 800d314:	bf44      	itt	mi
 800d316:	f043 0320 	orrmi.w	r3, r3, #32
 800d31a:	6023      	strmi	r3, [r4, #0]
 800d31c:	b91d      	cbnz	r5, 800d326 <_printf_i+0x196>
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	f023 0320 	bic.w	r3, r3, #32
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	2310      	movs	r3, #16
 800d328:	e7b0      	b.n	800d28c <_printf_i+0xfc>
 800d32a:	6823      	ldr	r3, [r4, #0]
 800d32c:	f043 0320 	orr.w	r3, r3, #32
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	2378      	movs	r3, #120	; 0x78
 800d334:	4828      	ldr	r0, [pc, #160]	; (800d3d8 <_printf_i+0x248>)
 800d336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d33a:	e7e3      	b.n	800d304 <_printf_i+0x174>
 800d33c:	065e      	lsls	r6, r3, #25
 800d33e:	bf48      	it	mi
 800d340:	b2ad      	uxthmi	r5, r5
 800d342:	e7e6      	b.n	800d312 <_printf_i+0x182>
 800d344:	4616      	mov	r6, r2
 800d346:	e7bb      	b.n	800d2c0 <_printf_i+0x130>
 800d348:	680b      	ldr	r3, [r1, #0]
 800d34a:	6826      	ldr	r6, [r4, #0]
 800d34c:	6960      	ldr	r0, [r4, #20]
 800d34e:	1d1d      	adds	r5, r3, #4
 800d350:	600d      	str	r5, [r1, #0]
 800d352:	0635      	lsls	r5, r6, #24
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	d501      	bpl.n	800d35c <_printf_i+0x1cc>
 800d358:	6018      	str	r0, [r3, #0]
 800d35a:	e002      	b.n	800d362 <_printf_i+0x1d2>
 800d35c:	0671      	lsls	r1, r6, #25
 800d35e:	d5fb      	bpl.n	800d358 <_printf_i+0x1c8>
 800d360:	8018      	strh	r0, [r3, #0]
 800d362:	2300      	movs	r3, #0
 800d364:	6123      	str	r3, [r4, #16]
 800d366:	4616      	mov	r6, r2
 800d368:	e7ba      	b.n	800d2e0 <_printf_i+0x150>
 800d36a:	680b      	ldr	r3, [r1, #0]
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	600a      	str	r2, [r1, #0]
 800d370:	681e      	ldr	r6, [r3, #0]
 800d372:	6862      	ldr	r2, [r4, #4]
 800d374:	2100      	movs	r1, #0
 800d376:	4630      	mov	r0, r6
 800d378:	f7f2 ff32 	bl	80001e0 <memchr>
 800d37c:	b108      	cbz	r0, 800d382 <_printf_i+0x1f2>
 800d37e:	1b80      	subs	r0, r0, r6
 800d380:	6060      	str	r0, [r4, #4]
 800d382:	6863      	ldr	r3, [r4, #4]
 800d384:	6123      	str	r3, [r4, #16]
 800d386:	2300      	movs	r3, #0
 800d388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d38c:	e7a8      	b.n	800d2e0 <_printf_i+0x150>
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	4632      	mov	r2, r6
 800d392:	4649      	mov	r1, r9
 800d394:	4640      	mov	r0, r8
 800d396:	47d0      	blx	sl
 800d398:	3001      	adds	r0, #1
 800d39a:	d0ab      	beq.n	800d2f4 <_printf_i+0x164>
 800d39c:	6823      	ldr	r3, [r4, #0]
 800d39e:	079b      	lsls	r3, r3, #30
 800d3a0:	d413      	bmi.n	800d3ca <_printf_i+0x23a>
 800d3a2:	68e0      	ldr	r0, [r4, #12]
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	4298      	cmp	r0, r3
 800d3a8:	bfb8      	it	lt
 800d3aa:	4618      	movlt	r0, r3
 800d3ac:	e7a4      	b.n	800d2f8 <_printf_i+0x168>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	4649      	mov	r1, r9
 800d3b4:	4640      	mov	r0, r8
 800d3b6:	47d0      	blx	sl
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d09b      	beq.n	800d2f4 <_printf_i+0x164>
 800d3bc:	3501      	adds	r5, #1
 800d3be:	68e3      	ldr	r3, [r4, #12]
 800d3c0:	9903      	ldr	r1, [sp, #12]
 800d3c2:	1a5b      	subs	r3, r3, r1
 800d3c4:	42ab      	cmp	r3, r5
 800d3c6:	dcf2      	bgt.n	800d3ae <_printf_i+0x21e>
 800d3c8:	e7eb      	b.n	800d3a2 <_printf_i+0x212>
 800d3ca:	2500      	movs	r5, #0
 800d3cc:	f104 0619 	add.w	r6, r4, #25
 800d3d0:	e7f5      	b.n	800d3be <_printf_i+0x22e>
 800d3d2:	bf00      	nop
 800d3d4:	0800d86d 	.word	0x0800d86d
 800d3d8:	0800d87e 	.word	0x0800d87e

0800d3dc <__retarget_lock_acquire_recursive>:
 800d3dc:	4770      	bx	lr

0800d3de <__retarget_lock_release_recursive>:
 800d3de:	4770      	bx	lr

0800d3e0 <memmove>:
 800d3e0:	4288      	cmp	r0, r1
 800d3e2:	b510      	push	{r4, lr}
 800d3e4:	eb01 0402 	add.w	r4, r1, r2
 800d3e8:	d902      	bls.n	800d3f0 <memmove+0x10>
 800d3ea:	4284      	cmp	r4, r0
 800d3ec:	4623      	mov	r3, r4
 800d3ee:	d807      	bhi.n	800d400 <memmove+0x20>
 800d3f0:	1e43      	subs	r3, r0, #1
 800d3f2:	42a1      	cmp	r1, r4
 800d3f4:	d008      	beq.n	800d408 <memmove+0x28>
 800d3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3fe:	e7f8      	b.n	800d3f2 <memmove+0x12>
 800d400:	4402      	add	r2, r0
 800d402:	4601      	mov	r1, r0
 800d404:	428a      	cmp	r2, r1
 800d406:	d100      	bne.n	800d40a <memmove+0x2a>
 800d408:	bd10      	pop	{r4, pc}
 800d40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d412:	e7f7      	b.n	800d404 <memmove+0x24>

0800d414 <_realloc_r>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	4607      	mov	r7, r0
 800d418:	4614      	mov	r4, r2
 800d41a:	460e      	mov	r6, r1
 800d41c:	b921      	cbnz	r1, 800d428 <_realloc_r+0x14>
 800d41e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d422:	4611      	mov	r1, r2
 800d424:	f7ff bc54 	b.w	800ccd0 <_malloc_r>
 800d428:	b922      	cbnz	r2, 800d434 <_realloc_r+0x20>
 800d42a:	f7ff fc01 	bl	800cc30 <_free_r>
 800d42e:	4625      	mov	r5, r4
 800d430:	4628      	mov	r0, r5
 800d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d434:	f000 f814 	bl	800d460 <_malloc_usable_size_r>
 800d438:	42a0      	cmp	r0, r4
 800d43a:	d20f      	bcs.n	800d45c <_realloc_r+0x48>
 800d43c:	4621      	mov	r1, r4
 800d43e:	4638      	mov	r0, r7
 800d440:	f7ff fc46 	bl	800ccd0 <_malloc_r>
 800d444:	4605      	mov	r5, r0
 800d446:	2800      	cmp	r0, #0
 800d448:	d0f2      	beq.n	800d430 <_realloc_r+0x1c>
 800d44a:	4631      	mov	r1, r6
 800d44c:	4622      	mov	r2, r4
 800d44e:	f7ff fbd9 	bl	800cc04 <memcpy>
 800d452:	4631      	mov	r1, r6
 800d454:	4638      	mov	r0, r7
 800d456:	f7ff fbeb 	bl	800cc30 <_free_r>
 800d45a:	e7e9      	b.n	800d430 <_realloc_r+0x1c>
 800d45c:	4635      	mov	r5, r6
 800d45e:	e7e7      	b.n	800d430 <_realloc_r+0x1c>

0800d460 <_malloc_usable_size_r>:
 800d460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d464:	1f18      	subs	r0, r3, #4
 800d466:	2b00      	cmp	r3, #0
 800d468:	bfbc      	itt	lt
 800d46a:	580b      	ldrlt	r3, [r1, r0]
 800d46c:	18c0      	addlt	r0, r0, r3
 800d46e:	4770      	bx	lr

0800d470 <_sbrk>:
 800d470:	4b04      	ldr	r3, [pc, #16]	; (800d484 <_sbrk+0x14>)
 800d472:	6819      	ldr	r1, [r3, #0]
 800d474:	4602      	mov	r2, r0
 800d476:	b909      	cbnz	r1, 800d47c <_sbrk+0xc>
 800d478:	4903      	ldr	r1, [pc, #12]	; (800d488 <_sbrk+0x18>)
 800d47a:	6019      	str	r1, [r3, #0]
 800d47c:	6818      	ldr	r0, [r3, #0]
 800d47e:	4402      	add	r2, r0
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	4770      	bx	lr
 800d484:	20002928 	.word	0x20002928
 800d488:	200032e8 	.word	0x200032e8

0800d48c <_init>:
 800d48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48e:	bf00      	nop
 800d490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d492:	bc08      	pop	{r3}
 800d494:	469e      	mov	lr, r3
 800d496:	4770      	bx	lr

0800d498 <_fini>:
 800d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49a:	bf00      	nop
 800d49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d49e:	bc08      	pop	{r3}
 800d4a0:	469e      	mov	lr, r3
 800d4a2:	4770      	bx	lr
