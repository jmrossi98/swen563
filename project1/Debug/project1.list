
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08004690  08004690  00014690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b94  08004b94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b94  08004b94  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b94  08004b94  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001dc  08004d78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08004d78  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005357  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eb5  00000000  00000000  00025563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  00026418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000308  00000000  00000000  000267b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e89e  00000000  00000000  00026ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003fe7  00000000  00000000  0004535e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4a89  00000000  00000000  00049345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012ddce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e38  00000000  00000000  0012de24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004674 	.word	0x08004674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08004674 	.word	0x08004674

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LED_Init>:
// User LEDs: 
//   LD4 Red = PB2    LD5 Green = PE8
// Note: The Green LED is yellow on my board.
//       PE8 is also the TIM1_CH1N for ADC Triggers.
//******************************************************************************************
void LED_Init(void){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOEEN;
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <LED_Init+0xa4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <LED_Init+0xa4>)
 8000bb2:	f043 0312 	orr.w	r3, r3, #18
 8000bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// LD4 Red = PB2
	///////////////////////////////////////////////////////////////////////////////////////////////
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOB->MODER = ~(3U<<(2*2));  
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <LED_Init+0xa8>)
 8000bba:	f06f 0230 	mvn.w	r2, #48	; 0x30
 8000bbe:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= 1U<<(2*2);      //  Output(01)
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <LED_Init+0xa8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <LED_Init+0xa8>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOB->OSPEEDR &= ~(3U<<(2*2));
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <LED_Init+0xa8>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <LED_Init+0xa8>)
 8000bd2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bd6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |=   3U<<(2*2);  // High speed
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <LED_Init+0xa8>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <LED_Init+0xa8>)
 8000bde:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000be2:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOB->OTYPER &= ~(1U<<2);       // Push-pull
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <LED_Init+0xa8>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <LED_Init+0xa8>)
 8000bea:	f023 0304 	bic.w	r3, r3, #4
 8000bee:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOB->PUPDR   &= ~(3U<<(2*2));  // No pull-up, no pull-down
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <LED_Init+0xa8>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <LED_Init+0xa8>)
 8000bf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bfa:	60d3      	str	r3, [r2, #12]
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// LD5 Green = PE8
	///////////////////////////////////////////////////////////////////////////////////////////////
	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOE->MODER = ~(3U<<(2*8));  
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <LED_Init+0xac>)
 8000bfe:	f46f 3240 	mvn.w	r2, #196608	; 0x30000
 8000c02:	601a      	str	r2, [r3, #0]
	GPIOE->MODER |= 1U<<(2*8);      //  Output(01)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <LED_Init+0xac>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <LED_Init+0xac>)
 8000c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0e:	6013      	str	r3, [r2, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOE->OSPEEDR &= ~(3U<<(2*8));
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <LED_Init+0xac>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <LED_Init+0xac>)
 8000c16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c1a:	6093      	str	r3, [r2, #8]
	GPIOE->OSPEEDR |=   3U<<(2*8);  // High speed
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <LED_Init+0xac>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <LED_Init+0xac>)
 8000c22:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000c26:	6093      	str	r3, [r2, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOE->OTYPER &= ~(1U<<8);       // Push-pull
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <LED_Init+0xac>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <LED_Init+0xac>)
 8000c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c32:	6053      	str	r3, [r2, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOE->PUPDR   &= ~(3U<<(2*8));  // No pull-up, no pull-down
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <LED_Init+0xac>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <LED_Init+0xac>)
 8000c3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	48001000 	.word	0x48001000

08000c58 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000c5e:	4b6b      	ldr	r3, [pc, #428]	; (8000e0c <System_Clock_Init+0x1b4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a6a      	ldr	r2, [pc, #424]	; (8000e0c <System_Clock_Init+0x1b4>)
 8000c64:	f023 0307 	bic.w	r3, r3, #7
 8000c68:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 8000c6a:	4b68      	ldr	r3, [pc, #416]	; (8000e0c <System_Clock_Init+0x1b4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a67      	ldr	r2, [pc, #412]	; (8000e0c <System_Clock_Init+0x1b4>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000c76:	4b66      	ldr	r3, [pc, #408]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a65      	ldr	r2, [pc, #404]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c80:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000c82:	bf00      	nop
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f9      	beq.n	8000c84 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000c90:	2310      	movs	r3, #16
 8000c92:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a5d      	ldr	r2, [pc, #372]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000c9a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c9e:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000ca0:	4b5b      	ldr	r3, [pc, #364]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	061b      	lsls	r3, r3, #24
 8000ca8:	4959      	ldr	r1, [pc, #356]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a57      	ldr	r2, [pc, #348]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cb8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000cba:	bf00      	nop
 8000cbc:	4b54      	ldr	r3, [pc, #336]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000cc8:	d0f8      	beq.n	8000cbc <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000cca:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cd0:	f023 0303 	bic.w	r3, r3, #3
 8000cd4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000cd6:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	4a4d      	ldr	r2, [pc, #308]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000ce2:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000cea:	4a49      	ldr	r2, [pc, #292]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cec:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000cf0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000cf2:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cfa:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000cfc:	f043 0310 	orr.w	r3, r3, #16
 8000d00:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	4a42      	ldr	r2, [pc, #264]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000d0c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000d0e:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	4a3f      	ldr	r2, [pc, #252]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d18:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d24:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000d26:	bf00      	nop
 8000d28:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f9      	beq.n	8000d28 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000d34:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	4a35      	ldr	r2, [pc, #212]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d3a:	f023 0303 	bic.w	r3, r3, #3
 8000d3e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	4a32      	ldr	r2, [pc, #200]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d46:	f043 0303 	orr.w	r3, r3, #3
 8000d4a:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000d4c:	bf00      	nop
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	d1f9      	bne.n	8000d4e <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	4a2c      	ldr	r2, [pc, #176]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d64:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d70:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d7c:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a23      	ldr	r2, [pc, #140]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000d88:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 8000d8a:	bf00      	nop
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000d98:	d0f8      	beq.n	8000d8c <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000da0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000da4:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dac:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000db0:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000dd6:	bf00      	nop
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f9      	beq.n	8000dd8 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <System_Clock_Init+0x1b8>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	40021000 	.word	0x40021000

08000e14 <UART2_Init>:
// ===================================================
// PA.0 = UART4_TX (AF8)   |  PA.1 = UART4_RX (AF8)      
// PB.6 = USART1_TX (AF7)  |  PB.7 = USART1_RX (AF7) 
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void UART2_Init(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <UART2_Init+0x40>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <UART2_Init+0x40>)
 8000e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e22:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <UART2_Init+0x40>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <UART2_Init+0x40>)
 8000e2c:	f023 030c 	bic.w	r3, r3, #12
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <UART2_Init+0x40>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <UART2_Init+0x40>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000e44:	f000 f80a 	bl	8000e5c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <UART2_Init+0x44>)
 8000e4a:	f000 f843 	bl	8000ed4 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40004400 	.word	0x40004400

08000e5c <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIODEN;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <UART2_GPIO_Init+0x70>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <UART2_GPIO_Init+0x70>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PD5 = USART2_TX (AF7)
	// PD6 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOD->MODER   &= ~(0xF << (2*5));	// Clear bits
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e72:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000e76:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=   0xA << (2*5);      		
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e7e:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000e82:	6013      	str	r3, [r2, #0]
	GPIOD->AFR[0]  |=   0x77<< (4*5);       	
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e8a:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 8000e8e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOD->OSPEEDR |=   0xF<<(2*5); 					 	
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e96:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000e9a:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOD->PUPDR   &= ~(0xF<<(2*5));
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000ea2:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000ea6:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR   |=   0x5<<(2*5);    				
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000eae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000eb2:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOD->OTYPER  &=  ~(0x3<<5) ;       	
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <UART2_GPIO_Init+0x74>)
 8000eba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000ebe:	6053      	str	r3, [r2, #4]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000c00 	.word	0x48000c00

08000ed4 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f023 0201 	bic.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f242 028d 	movw	r2, #8333	; 0x208d
 8000f12:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f043 020c 	orr.w	r2, r3, #12
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <USART_Init+0x100>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d129      	bne.n	8000f7c <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f023 0210 	bic.w	r2, r3, #16
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 0201 	bic.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a16      	ldr	r2, [pc, #88]	; (8000fd8 <USART_Init+0x104>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d10b      	bne.n	8000f9c <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <USART_Init+0x108>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <USART_Init+0x108>)
 8000f96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f9a:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000fa8:	bf00      	nop
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000fb6:	bf00      	nop
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <USART_Init+0xe4>
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40004c00 	.word	0x40004c00
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000fe8:	bf00      	nop
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f9      	beq.n	8000fea <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e014      	b.n	8001046 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800101c:	bf00      	nop
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f9      	beq.n	800101e <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b29a      	uxth	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8001038:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800103c:	f000 f818 	bl	8001070 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	d8e6      	bhi.n	800101c <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800104e:	bf00      	nop
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f9      	beq.n	8001050 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	61da      	str	r2, [r3, #28]
}   
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2264      	movs	r2, #100	; 0x64
 800107c:	fb02 f203 	mul.w	r2, r2, r3
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <USART_Delay+0x3c>)
 8001082:	fba3 1302 	umull	r1, r3, r3, r2
 8001086:	1ad2      	subs	r2, r2, r3
 8001088:	0852      	lsrs	r2, r2, #1
 800108a:	4413      	add	r3, r2
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f9      	bne.n	8001090 <USART_Delay+0x20>
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	24924925 	.word	0x24924925

080010b0 <gpio_and_timer_init>:
int results[101];
int LOWER_LIMIT = 950;
int UPPER_LIMIT = 1050;

// Enable GPIO and timer processes
void gpio_and_timer_init(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	// enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <gpio_and_timer_init+0x9c>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <gpio_and_timer_init+0x9c>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Connect the TIM2 timer to the GPIO Pin A0
	GPIOA->MODER &= ~0xFF;  // Clear register
 80010c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x2;    // Alternate function mode
 80010d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x1;   // Set PA0 to the timer
 80010e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6213      	str	r3, [r2, #32]

    // Enable clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <gpio_and_timer_init+0x9c>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <gpio_and_timer_init+0x9c>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6593      	str	r3, [r2, #88]	; 0x58

	// Configure timer
    TIM2->PSC = 80;              // Load prescale
 80010fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001100:	2250      	movs	r2, #80	; 0x50
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->EGR |= TIM_EGR_UG;
 8001104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6153      	str	r3, [r2, #20]
    TIM2->CCER &= ~(0xFFFFFFFF); // Clear register
 8001114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
    TIM2->CCMR1 |= 0x1;          // Set to input mode
 8001122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6193      	str	r3, [r2, #24]
	TIM2->CCER |= 0x1;           // Enable capture
 8001132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6213      	str	r3, [r2, #32]
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <post>:


// Function starts capturing to check for rising edge signals and checks for signal
// If timeout occurs, return fail
int post(){
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
	int pulse_found = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	uint32_t first_val = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
	uint32_t current_val = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
	TIM2->CR1 |= 0x1;
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6013      	str	r3, [r2, #0]
	first_val = (uint32_t)TIM2->CCR1;
 8001172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	60bb      	str	r3, [r7, #8]
	while(!pulse_found){
 800117a:	e027      	b.n	80011cc <post+0x7c>
		if(TIM2->SR & 0x2){
 800117c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d014      	beq.n	80011b4 <post+0x64>
			current_val = (uint32_t)TIM2->CCR1;
 800118a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001190:	607b      	str	r3, [r7, #4]
			if(current_val - first_val <= 100000){
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <post+0x90>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d808      	bhi.n	80011b0 <post+0x60>
				TIM2->CR1 &= 0x0;
 800119e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
				return 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e011      	b.n	80011d4 <post+0x84>
			}
			else {
				return 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e00f      	b.n	80011d4 <post+0x84>
			}
		}
		else {
			current_val = (uint32_t)TIM2->CNT;
 80011b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	607b      	str	r3, [r7, #4]
			if(current_val - first_val > 100000){
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <post+0x90>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <post+0x7c>
			  return 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e003      	b.n	80011d4 <post+0x84>
	while(!pulse_found){
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0d4      	beq.n	800117c <post+0x2c>
			}
		}
	}
	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <measure>:

// Waits for measurements, records when found
void measure(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	int count = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
	int first_val = 1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
	uint32_t prev_val = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
	uint32_t current_measurement = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
	uint32_t diff = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]

	USART_Write(USART2, (uint8_t *)"Taking measurements...\r\n", 25);
 80011fe:	2219      	movs	r2, #25
 8001200:	4928      	ldr	r1, [pc, #160]	; (80012a4 <measure+0xc0>)
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <measure+0xc4>)
 8001204:	f7ff ff01 	bl	800100a <USART_Write>
	TIM2->CR1 |= 0x1;
 8001208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6013      	str	r3, [r2, #0]
	while(count <= 1000){
 8001218:	e035      	b.n	8001286 <measure+0xa2>
		if(TIM2->SR & 0x2){
 800121a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d02e      	beq.n	8001286 <measure+0xa2>
		    if (first_val) {
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <measure+0x58>
			    prev_val = (uint32_t)TIM2->CCR1;
 800122e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	60fb      	str	r3, [r7, #12]
			    first_val = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	e024      	b.n	8001286 <measure+0xa2>
		    }
		    else {
			    current_measurement = (uint32_t)TIM2->CCR1;
 800123c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	60bb      	str	r3, [r7, #8]
			    diff = current_measurement - prev_val;
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	607b      	str	r3, [r7, #4]
			    prev_val = current_measurement;
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60fb      	str	r3, [r7, #12]
				if (diff <= UPPER_LIMIT && diff >= LOWER_LIMIT) {
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <measure+0xc8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4293      	cmp	r3, r2
 800125a:	d811      	bhi.n	8001280 <measure+0x9c>
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <measure+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4293      	cmp	r3, r2
 8001266:	d30b      	bcc.n	8001280 <measure+0x9c>
					results[diff-LOWER_LIMIT]++;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <measure+0xcc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <measure+0xd0>)
 8001274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001278:	3201      	adds	r2, #1
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <measure+0xd0>)
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
			count++;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
	while(count <= 1000){
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800128c:	ddc5      	ble.n	800121a <measure+0x36>
		    }
		}
	}
	TIM2->CR1 &= 0x0;
 800128e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08004690 	.word	0x08004690
 80012a8:	40004400 	.word	0x40004400
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000204 	.word	0x20000204

080012b8 <main>:

int main(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b098      	sub	sp, #96	; 0x60
 80012bc:	af00      	add	r7, sp, #0

	System_Clock_Init();
 80012be:	f7ff fccb 	bl	8000c58 <System_Clock_Init>
	LED_Init();
 80012c2:	f7ff fc71 	bl	8000ba8 <LED_Init>
	UART2_Init();
 80012c6:	f7ff fda5 	bl	8000e14 <UART2_Init>
	gpio_and_timer_init();
 80012ca:	f7ff fef1 	bl	80010b0 <gpio_and_timer_init>

	uint8_t rxByte;
	int buff_size = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	65fb      	str	r3, [r7, #92]	; 0x5c
	int running = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	65bb      	str	r3, [r7, #88]	; 0x58

	// Post
	USART_Write(USART2, (uint8_t *)"Starting Post...\r\n", 18);
 80012d6:	2212      	movs	r2, #18
 80012d8:	4978      	ldr	r1, [pc, #480]	; (80014bc <main+0x204>)
 80012da:	4879      	ldr	r0, [pc, #484]	; (80014c0 <main+0x208>)
 80012dc:	f7ff fe95 	bl	800100a <USART_Write>
	while (post() == 0){
 80012e0:	e019      	b.n	8001316 <main+0x5e>
		USART_Write(USART2, (uint8_t *)"Post Failed. Try again? Press Y or N\r\n", 39);
 80012e2:	2227      	movs	r2, #39	; 0x27
 80012e4:	4977      	ldr	r1, [pc, #476]	; (80014c4 <main+0x20c>)
 80012e6:	4876      	ldr	r0, [pc, #472]	; (80014c0 <main+0x208>)
 80012e8:	f7ff fe8f 	bl	800100a <USART_Write>
		char rxByte = USART_Read(USART2);
 80012ec:	4874      	ldr	r0, [pc, #464]	; (80014c0 <main+0x208>)
 80012ee:	f7ff fe77 	bl	8000fe0 <USART_Read>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (rxByte == 'N' || rxByte == 'n'){
 80012f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012fc:	2b4e      	cmp	r3, #78	; 0x4e
 80012fe:	d003      	beq.n	8001308 <main+0x50>
 8001300:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001304:	2b6e      	cmp	r3, #110	; 0x6e
 8001306:	d106      	bne.n	8001316 <main+0x5e>
			USART_Write(USART2, (uint8_t *)"Exiting program...\r\n", 18);
 8001308:	2212      	movs	r2, #18
 800130a:	496f      	ldr	r1, [pc, #444]	; (80014c8 <main+0x210>)
 800130c:	486c      	ldr	r0, [pc, #432]	; (80014c0 <main+0x208>)
 800130e:	f7ff fe7c 	bl	800100a <USART_Write>
			return 0;
 8001312:	2300      	movs	r3, #0
 8001314:	e0ce      	b.n	80014b4 <main+0x1fc>
	while (post() == 0){
 8001316:	f7ff ff1b 	bl	8001150 <post>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0e0      	beq.n	80012e2 <main+0x2a>
		}
	}

	// Main loop
	while(running){
 8001320:	e0be      	b.n	80014a0 <main+0x1e8>
		char current_limit_ask_msg[55];
		while(1){
			sprintf(current_limit_ask_msg, "Current limits are %d to %d. Change lower limit? Y or N\r\n", LOWER_LIMIT, UPPER_LIMIT);
 8001322:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <main+0x214>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b6a      	ldr	r3, [pc, #424]	; (80014d0 <main+0x218>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4638      	mov	r0, r7
 800132c:	4969      	ldr	r1, [pc, #420]	; (80014d4 <main+0x21c>)
 800132e:	f000 fee7 	bl	8002100 <siprintf>
			USART_Write(USART2, (uint8_t *)current_limit_ask_msg, strlen(current_limit_ask_msg));
 8001332:	463b      	mov	r3, r7
 8001334:	4618      	mov	r0, r3
 8001336:	f7fe ff4b 	bl	80001d0 <strlen>
 800133a:	4602      	mov	r2, r0
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	485f      	ldr	r0, [pc, #380]	; (80014c0 <main+0x208>)
 8001342:	f7ff fe62 	bl	800100a <USART_Write>
			rxByte = USART_Read(USART2);
 8001346:	485e      	ldr	r0, [pc, #376]	; (80014c0 <main+0x208>)
 8001348:	f7ff fe4a 	bl	8000fe0 <USART_Read>
 800134c:	4603      	mov	r3, r0
 800134e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if (rxByte == 'N' || rxByte == 'n'){
 8001352:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001356:	2b4e      	cmp	r3, #78	; 0x4e
 8001358:	d045      	beq.n	80013e6 <main+0x12e>
 800135a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800135e:	2b6e      	cmp	r3, #110	; 0x6e
 8001360:	d041      	beq.n	80013e6 <main+0x12e>
				break;
			}
			else if (rxByte == 'Y' || rxByte == 'y'){
 8001362:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001366:	2b59      	cmp	r3, #89	; 0x59
 8001368:	d003      	beq.n	8001372 <main+0xba>
 800136a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800136e:	2b79      	cmp	r3, #121	; 0x79
 8001370:	d1d7      	bne.n	8001322 <main+0x6a>
				USART_Write(USART2, (uint8_t *)"Enter the lower limit: \r\n", 30);
 8001372:	221e      	movs	r2, #30
 8001374:	4958      	ldr	r1, [pc, #352]	; (80014d8 <main+0x220>)
 8001376:	4852      	ldr	r0, [pc, #328]	; (80014c0 <main+0x208>)
 8001378:	f7ff fe47 	bl	800100a <USART_Write>
				memset(buffer, (void *)0, BufferSize);
 800137c:	2220      	movs	r2, #32
 800137e:	2100      	movs	r1, #0
 8001380:	4856      	ldr	r0, [pc, #344]	; (80014dc <main+0x224>)
 8001382:	f000 fa4b 	bl	800181c <memset>
				buff_size = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
				while(1){
					rxByte = USART_Read(USART2);
 800138a:	484d      	ldr	r0, [pc, #308]	; (80014c0 <main+0x208>)
 800138c:	f7ff fe28 	bl	8000fe0 <USART_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					if(rxByte == '\r'){ //Enter is pressed
 8001396:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800139a:	2b0d      	cmp	r3, #13
 800139c:	d111      	bne.n	80013c2 <main+0x10a>
						USART_Write(USART2, (uint8_t *)"\r\n", 2);
 800139e:	2202      	movs	r2, #2
 80013a0:	494f      	ldr	r1, [pc, #316]	; (80014e0 <main+0x228>)
 80013a2:	4847      	ldr	r0, [pc, #284]	; (80014c0 <main+0x208>)
 80013a4:	f7ff fe31 	bl	800100a <USART_Write>
						break;
 80013a8:	bf00      	nop
						buffer[buff_size] = (char*)*&rxByte;
						buff_size++;
						USART_Write(USART2, &rxByte, sizeof(rxByte)); //Write out user input back into the terminal
					}
				}
				LOWER_LIMIT = atoi(buffer);
 80013aa:	484c      	ldr	r0, [pc, #304]	; (80014dc <main+0x224>)
 80013ac:	f000 fa08 	bl	80017c0 <atoi>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a46      	ldr	r2, [pc, #280]	; (80014cc <main+0x214>)
 80013b4:	6013      	str	r3, [r2, #0]
				UPPER_LIMIT = LOWER_LIMIT + 100;
 80013b6:	4b45      	ldr	r3, [pc, #276]	; (80014cc <main+0x214>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3364      	adds	r3, #100	; 0x64
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <main+0x218>)
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	e7af      	b.n	8001322 <main+0x6a>
						buffer[buff_size] = (char*)*&rxByte;
 80013c2:	f897 104e 	ldrb.w	r1, [r7, #78]	; 0x4e
 80013c6:	4a45      	ldr	r2, [pc, #276]	; (80014dc <main+0x224>)
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ca:	4413      	add	r3, r2
 80013cc:	460a      	mov	r2, r1
 80013ce:	701a      	strb	r2, [r3, #0]
						buff_size++;
 80013d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d2:	3301      	adds	r3, #1
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
						USART_Write(USART2, &rxByte, sizeof(rxByte)); //Write out user input back into the terminal
 80013d6:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80013da:	2201      	movs	r2, #1
 80013dc:	4619      	mov	r1, r3
 80013de:	4838      	ldr	r0, [pc, #224]	; (80014c0 <main+0x208>)
 80013e0:	f7ff fe13 	bl	800100a <USART_Write>
					rxByte = USART_Read(USART2);
 80013e4:	e7d1      	b.n	800138a <main+0xd2>
			}
		}

		// Wait for user to press enter
		while(1){
			USART_Write(USART2, (uint8_t *)"Press enter to start...\r\n", 25);
 80013e6:	2219      	movs	r2, #25
 80013e8:	493e      	ldr	r1, [pc, #248]	; (80014e4 <main+0x22c>)
 80013ea:	4835      	ldr	r0, [pc, #212]	; (80014c0 <main+0x208>)
 80013ec:	f7ff fe0d 	bl	800100a <USART_Write>
			rxByte = USART_Read(USART2);
 80013f0:	4833      	ldr	r0, [pc, #204]	; (80014c0 <main+0x208>)
 80013f2:	f7ff fdf5 	bl	8000fe0 <USART_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if(rxByte == '\r'){
 80013fc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001400:	2b0d      	cmp	r3, #13
 8001402:	d000      	beq.n	8001406 <main+0x14e>
			USART_Write(USART2, (uint8_t *)"Press enter to start...\r\n", 25);
 8001404:	e7ef      	b.n	80013e6 <main+0x12e>
				break;
 8001406:	bf00      	nop
			}
		}

		measure();
 8001408:	f7ff feec 	bl	80011e4 <measure>

		// Find results
		char result_msg[20];
		int idx = LOWER_LIMIT;
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <main+0x214>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
		for(int x = 0; x < 101; x++){
 8001412:	2300      	movs	r3, #0
 8001414:	653b      	str	r3, [r7, #80]	; 0x50
 8001416:	e021      	b.n	800145c <main+0x1a4>
			idx++;
 8001418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141a:	3301      	adds	r3, #1
 800141c:	657b      	str	r3, [r7, #84]	; 0x54
			if(results[x] != 0){
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <main+0x230>)
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d015      	beq.n	8001456 <main+0x19e>
				sprintf(result_msg, "%d   %d\r\n", idx, results[x]);
 800142a:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <main+0x230>)
 800142c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001438:	492c      	ldr	r1, [pc, #176]	; (80014ec <main+0x234>)
 800143a:	f000 fe61 	bl	8002100 <siprintf>
				USART_Write(USART2, (uint8_t *)result_msg, strlen(result_msg));
 800143e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fec4 	bl	80001d0 <strlen>
 8001448:	4602      	mov	r2, r0
 800144a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800144e:	4619      	mov	r1, r3
 8001450:	481b      	ldr	r0, [pc, #108]	; (80014c0 <main+0x208>)
 8001452:	f7ff fdda 	bl	800100a <USART_Write>
		for(int x = 0; x < 101; x++){
 8001456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001458:	3301      	adds	r3, #1
 800145a:	653b      	str	r3, [r7, #80]	; 0x50
 800145c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	ddda      	ble.n	8001418 <main+0x160>
			}
		}

		// Ask to restart
		while(1){
			USART_Write(USART2, (uint8_t *)"Start again? Y or N\r\n", 24);
 8001462:	2218      	movs	r2, #24
 8001464:	4922      	ldr	r1, [pc, #136]	; (80014f0 <main+0x238>)
 8001466:	4816      	ldr	r0, [pc, #88]	; (80014c0 <main+0x208>)
 8001468:	f7ff fdcf 	bl	800100a <USART_Write>
			rxByte = USART_Read(USART2);
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <main+0x208>)
 800146e:	f7ff fdb7 	bl	8000fe0 <USART_Read>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if (rxByte == 'N' || rxByte == 'n'){
 8001478:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800147c:	2b4e      	cmp	r3, #78	; 0x4e
 800147e:	d003      	beq.n	8001488 <main+0x1d0>
 8001480:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001484:	2b6e      	cmp	r3, #110	; 0x6e
 8001486:	d102      	bne.n	800148e <main+0x1d6>
				running = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	65bb      	str	r3, [r7, #88]	; 0x58
				break;
 800148c:	e008      	b.n	80014a0 <main+0x1e8>
			}
			else if (rxByte == 'Y' || rxByte == 'y'){
 800148e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001492:	2b59      	cmp	r3, #89	; 0x59
 8001494:	d004      	beq.n	80014a0 <main+0x1e8>
 8001496:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800149a:	2b79      	cmp	r3, #121	; 0x79
 800149c:	d000      	beq.n	80014a0 <main+0x1e8>
			USART_Write(USART2, (uint8_t *)"Start again? Y or N\r\n", 24);
 800149e:	e7e0      	b.n	8001462 <main+0x1aa>
	while(running){
 80014a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f af3d 	bne.w	8001322 <main+0x6a>
				break;
			}
		}
	}

	USART_Write(USART2, (uint8_t *)"Exiting program...", 18);
 80014a8:	2212      	movs	r2, #18
 80014aa:	4912      	ldr	r1, [pc, #72]	; (80014f4 <main+0x23c>)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <main+0x208>)
 80014ae:	f7ff fdac 	bl	800100a <USART_Write>
	return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3760      	adds	r7, #96	; 0x60
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	080046ac 	.word	0x080046ac
 80014c0:	40004400 	.word	0x40004400
 80014c4:	080046c0 	.word	0x080046c0
 80014c8:	080046e8 	.word	0x080046e8
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004
 80014d4:	08004700 	.word	0x08004700
 80014d8:	0800473c 	.word	0x0800473c
 80014dc:	20000398 	.word	0x20000398
 80014e0:	08004758 	.word	0x08004758
 80014e4:	0800475c 	.word	0x0800475c
 80014e8:	20000204 	.word	0x20000204
 80014ec:	08004778 	.word	0x08004778
 80014f0:	08004784 	.word	0x08004784
 80014f4:	0800479c 	.word	0x0800479c

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f928 	bl	8001798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_kill>:

int _kill(int pid, int sig)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001566:	f000 f92f 	bl	80017c8 <__errno>
 800156a:	4603      	mov	r3, r0
 800156c:	2216      	movs	r2, #22
 800156e:	601a      	str	r2, [r3, #0]
	return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_exit>:

void _exit (int status)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffe7 	bl	800155c <_kill>
	while (1) {}		/* Make sure we hang here */
 800158e:	e7fe      	b.n	800158e <_exit+0x12>

08001590 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00a      	b.n	80015b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015a2:	f3af 8000 	nop.w
 80015a6:	4601      	mov	r1, r0
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1c5a      	adds	r2, r3, #1
 80015ac:	60ba      	str	r2, [r7, #8]
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf0      	blt.n	80015a2 <_read+0x12>
	}

return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e009      	b.n	80015f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	60ba      	str	r2, [r7, #8]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf1      	blt.n	80015dc <_write+0x12>
	}
	return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f000 f894 	bl	80017c8 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20018000 	.word	0x20018000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200001f8 	.word	0x200001f8
 80016d4:	200003d0 	.word	0x200003d0

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <SystemInit+0x64>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <SystemInit+0x64>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <SystemInit+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <SystemInit+0x68>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <SystemInit+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <SystemInit+0x68>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <SystemInit+0x68>)
 8001704:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001708:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800170c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <SystemInit+0x68>)
 8001710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SystemInit+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <SystemInit+0x68>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SystemInit+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x64>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	40021000 	.word	0x40021000

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffc6 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800174c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800174e:	e003      	b.n	8001758 <LoopCopyDataInit>

08001750 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001752:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001754:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001756:	3104      	adds	r1, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <LoopForever+0xa>)
	ldr	r3, =_edata
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <LoopForever+0xe>)
	adds	r2, r0, r1
 800175c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800175e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001760:	d3f6      	bcc.n	8001750 <CopyDataInit>
	ldr	r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001764:	e002      	b.n	800176c <LoopFillZerobss>

08001766 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001766:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001768:	f842 3b04 	str.w	r3, [r2], #4

0800176c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <LoopForever+0x16>)
	cmp	r2, r3
 800176e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001770:	d3f9      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f000 f82f 	bl	80017d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fd9f 	bl	80012b8 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001780:	08004b9c 	.word	0x08004b9c
	ldr	r0, =_sdata
 8001784:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001788:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800178c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001790:	200003cc 	.word	0x200003cc

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008
 80017bc:	200003b8 	.word	0x200003b8

080017c0 <atoi>:
 80017c0:	220a      	movs	r2, #10
 80017c2:	2100      	movs	r1, #0
 80017c4:	f000 bd40 	b.w	8002248 <strtol>

080017c8 <__errno>:
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <__errno+0x8>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <__libc_init_array>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	4d0d      	ldr	r5, [pc, #52]	; (800180c <__libc_init_array+0x38>)
 80017d8:	4c0d      	ldr	r4, [pc, #52]	; (8001810 <__libc_init_array+0x3c>)
 80017da:	1b64      	subs	r4, r4, r5
 80017dc:	10a4      	asrs	r4, r4, #2
 80017de:	2600      	movs	r6, #0
 80017e0:	42a6      	cmp	r6, r4
 80017e2:	d109      	bne.n	80017f8 <__libc_init_array+0x24>
 80017e4:	4d0b      	ldr	r5, [pc, #44]	; (8001814 <__libc_init_array+0x40>)
 80017e6:	4c0c      	ldr	r4, [pc, #48]	; (8001818 <__libc_init_array+0x44>)
 80017e8:	f002 ff44 	bl	8004674 <_init>
 80017ec:	1b64      	subs	r4, r4, r5
 80017ee:	10a4      	asrs	r4, r4, #2
 80017f0:	2600      	movs	r6, #0
 80017f2:	42a6      	cmp	r6, r4
 80017f4:	d105      	bne.n	8001802 <__libc_init_array+0x2e>
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fc:	4798      	blx	r3
 80017fe:	3601      	adds	r6, #1
 8001800:	e7ee      	b.n	80017e0 <__libc_init_array+0xc>
 8001802:	f855 3b04 	ldr.w	r3, [r5], #4
 8001806:	4798      	blx	r3
 8001808:	3601      	adds	r6, #1
 800180a:	e7f2      	b.n	80017f2 <__libc_init_array+0x1e>
 800180c:	08004b94 	.word	0x08004b94
 8001810:	08004b94 	.word	0x08004b94
 8001814:	08004b94 	.word	0x08004b94
 8001818:	08004b98 	.word	0x08004b98

0800181c <memset>:
 800181c:	4402      	add	r2, r0
 800181e:	4603      	mov	r3, r0
 8001820:	4293      	cmp	r3, r2
 8001822:	d100      	bne.n	8001826 <memset+0xa>
 8001824:	4770      	bx	lr
 8001826:	f803 1b01 	strb.w	r1, [r3], #1
 800182a:	e7f9      	b.n	8001820 <memset+0x4>

0800182c <__cvt>:
 800182c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001830:	ec55 4b10 	vmov	r4, r5, d0
 8001834:	2d00      	cmp	r5, #0
 8001836:	460e      	mov	r6, r1
 8001838:	4619      	mov	r1, r3
 800183a:	462b      	mov	r3, r5
 800183c:	bfbb      	ittet	lt
 800183e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001842:	461d      	movlt	r5, r3
 8001844:	2300      	movge	r3, #0
 8001846:	232d      	movlt	r3, #45	; 0x2d
 8001848:	700b      	strb	r3, [r1, #0]
 800184a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800184c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001850:	4691      	mov	r9, r2
 8001852:	f023 0820 	bic.w	r8, r3, #32
 8001856:	bfbc      	itt	lt
 8001858:	4622      	movlt	r2, r4
 800185a:	4614      	movlt	r4, r2
 800185c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001860:	d005      	beq.n	800186e <__cvt+0x42>
 8001862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001866:	d100      	bne.n	800186a <__cvt+0x3e>
 8001868:	3601      	adds	r6, #1
 800186a:	2102      	movs	r1, #2
 800186c:	e000      	b.n	8001870 <__cvt+0x44>
 800186e:	2103      	movs	r1, #3
 8001870:	ab03      	add	r3, sp, #12
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	ab02      	add	r3, sp, #8
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	ec45 4b10 	vmov	d0, r4, r5
 800187c:	4653      	mov	r3, sl
 800187e:	4632      	mov	r2, r6
 8001880:	f000 fd7a 	bl	8002378 <_dtoa_r>
 8001884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001888:	4607      	mov	r7, r0
 800188a:	d102      	bne.n	8001892 <__cvt+0x66>
 800188c:	f019 0f01 	tst.w	r9, #1
 8001890:	d022      	beq.n	80018d8 <__cvt+0xac>
 8001892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001896:	eb07 0906 	add.w	r9, r7, r6
 800189a:	d110      	bne.n	80018be <__cvt+0x92>
 800189c:	783b      	ldrb	r3, [r7, #0]
 800189e:	2b30      	cmp	r3, #48	; 0x30
 80018a0:	d10a      	bne.n	80018b8 <__cvt+0x8c>
 80018a2:	2200      	movs	r2, #0
 80018a4:	2300      	movs	r3, #0
 80018a6:	4620      	mov	r0, r4
 80018a8:	4629      	mov	r1, r5
 80018aa:	f7ff f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ae:	b918      	cbnz	r0, 80018b8 <__cvt+0x8c>
 80018b0:	f1c6 0601 	rsb	r6, r6, #1
 80018b4:	f8ca 6000 	str.w	r6, [sl]
 80018b8:	f8da 3000 	ldr.w	r3, [sl]
 80018bc:	4499      	add	r9, r3
 80018be:	2200      	movs	r2, #0
 80018c0:	2300      	movs	r3, #0
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7ff f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80018ca:	b108      	cbz	r0, 80018d0 <__cvt+0xa4>
 80018cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80018d0:	2230      	movs	r2, #48	; 0x30
 80018d2:	9b03      	ldr	r3, [sp, #12]
 80018d4:	454b      	cmp	r3, r9
 80018d6:	d307      	bcc.n	80018e8 <__cvt+0xbc>
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018dc:	1bdb      	subs	r3, r3, r7
 80018de:	4638      	mov	r0, r7
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	b004      	add	sp, #16
 80018e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	9103      	str	r1, [sp, #12]
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e7f0      	b.n	80018d2 <__cvt+0xa6>

080018f0 <__exponent>:
 80018f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018f2:	4603      	mov	r3, r0
 80018f4:	2900      	cmp	r1, #0
 80018f6:	bfb8      	it	lt
 80018f8:	4249      	neglt	r1, r1
 80018fa:	f803 2b02 	strb.w	r2, [r3], #2
 80018fe:	bfb4      	ite	lt
 8001900:	222d      	movlt	r2, #45	; 0x2d
 8001902:	222b      	movge	r2, #43	; 0x2b
 8001904:	2909      	cmp	r1, #9
 8001906:	7042      	strb	r2, [r0, #1]
 8001908:	dd2a      	ble.n	8001960 <__exponent+0x70>
 800190a:	f10d 0407 	add.w	r4, sp, #7
 800190e:	46a4      	mov	ip, r4
 8001910:	270a      	movs	r7, #10
 8001912:	46a6      	mov	lr, r4
 8001914:	460a      	mov	r2, r1
 8001916:	fb91 f6f7 	sdiv	r6, r1, r7
 800191a:	fb07 1516 	mls	r5, r7, r6, r1
 800191e:	3530      	adds	r5, #48	; 0x30
 8001920:	2a63      	cmp	r2, #99	; 0x63
 8001922:	f104 34ff 	add.w	r4, r4, #4294967295
 8001926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800192a:	4631      	mov	r1, r6
 800192c:	dcf1      	bgt.n	8001912 <__exponent+0x22>
 800192e:	3130      	adds	r1, #48	; 0x30
 8001930:	f1ae 0502 	sub.w	r5, lr, #2
 8001934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8001938:	1c44      	adds	r4, r0, #1
 800193a:	4629      	mov	r1, r5
 800193c:	4561      	cmp	r1, ip
 800193e:	d30a      	bcc.n	8001956 <__exponent+0x66>
 8001940:	f10d 0209 	add.w	r2, sp, #9
 8001944:	eba2 020e 	sub.w	r2, r2, lr
 8001948:	4565      	cmp	r5, ip
 800194a:	bf88      	it	hi
 800194c:	2200      	movhi	r2, #0
 800194e:	4413      	add	r3, r2
 8001950:	1a18      	subs	r0, r3, r0
 8001952:	b003      	add	sp, #12
 8001954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800195a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800195e:	e7ed      	b.n	800193c <__exponent+0x4c>
 8001960:	2330      	movs	r3, #48	; 0x30
 8001962:	3130      	adds	r1, #48	; 0x30
 8001964:	7083      	strb	r3, [r0, #2]
 8001966:	70c1      	strb	r1, [r0, #3]
 8001968:	1d03      	adds	r3, r0, #4
 800196a:	e7f1      	b.n	8001950 <__exponent+0x60>

0800196c <_printf_float>:
 800196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001970:	ed2d 8b02 	vpush	{d8}
 8001974:	b08d      	sub	sp, #52	; 0x34
 8001976:	460c      	mov	r4, r1
 8001978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800197c:	4616      	mov	r6, r2
 800197e:	461f      	mov	r7, r3
 8001980:	4605      	mov	r5, r0
 8001982:	f001 fae5 	bl	8002f50 <_localeconv_r>
 8001986:	f8d0 a000 	ldr.w	sl, [r0]
 800198a:	4650      	mov	r0, sl
 800198c:	f7fe fc20 	bl	80001d0 <strlen>
 8001990:	2300      	movs	r3, #0
 8001992:	930a      	str	r3, [sp, #40]	; 0x28
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	9305      	str	r3, [sp, #20]
 8001998:	f8d8 3000 	ldr.w	r3, [r8]
 800199c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80019a0:	3307      	adds	r3, #7
 80019a2:	f023 0307 	bic.w	r3, r3, #7
 80019a6:	f103 0208 	add.w	r2, r3, #8
 80019aa:	f8c8 2000 	str.w	r2, [r8]
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80019b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80019ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80019be:	9307      	str	r3, [sp, #28]
 80019c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80019c4:	ee08 0a10 	vmov	s16, r0
 80019c8:	4b9f      	ldr	r3, [pc, #636]	; (8001c48 <_printf_float+0x2dc>)
 80019ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80019ce:	f04f 32ff 	mov.w	r2, #4294967295
 80019d2:	f7ff f8ab 	bl	8000b2c <__aeabi_dcmpun>
 80019d6:	bb88      	cbnz	r0, 8001a3c <_printf_float+0xd0>
 80019d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80019dc:	4b9a      	ldr	r3, [pc, #616]	; (8001c48 <_printf_float+0x2dc>)
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	f7ff f885 	bl	8000af0 <__aeabi_dcmple>
 80019e6:	bb48      	cbnz	r0, 8001a3c <_printf_float+0xd0>
 80019e8:	2200      	movs	r2, #0
 80019ea:	2300      	movs	r3, #0
 80019ec:	4640      	mov	r0, r8
 80019ee:	4649      	mov	r1, r9
 80019f0:	f7ff f874 	bl	8000adc <__aeabi_dcmplt>
 80019f4:	b110      	cbz	r0, 80019fc <_printf_float+0x90>
 80019f6:	232d      	movs	r3, #45	; 0x2d
 80019f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019fc:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <_printf_float+0x2e0>)
 80019fe:	4894      	ldr	r0, [pc, #592]	; (8001c50 <_printf_float+0x2e4>)
 8001a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8001a04:	bf94      	ite	ls
 8001a06:	4698      	movls	r8, r3
 8001a08:	4680      	movhi	r8, r0
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	6123      	str	r3, [r4, #16]
 8001a0e:	9b05      	ldr	r3, [sp, #20]
 8001a10:	f023 0204 	bic.w	r2, r3, #4
 8001a14:	6022      	str	r2, [r4, #0]
 8001a16:	f04f 0900 	mov.w	r9, #0
 8001a1a:	9700      	str	r7, [sp, #0]
 8001a1c:	4633      	mov	r3, r6
 8001a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8001a20:	4621      	mov	r1, r4
 8001a22:	4628      	mov	r0, r5
 8001a24:	f000 f9d8 	bl	8001dd8 <_printf_common>
 8001a28:	3001      	adds	r0, #1
 8001a2a:	f040 8090 	bne.w	8001b4e <_printf_float+0x1e2>
 8001a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a32:	b00d      	add	sp, #52	; 0x34
 8001a34:	ecbd 8b02 	vpop	{d8}
 8001a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	464b      	mov	r3, r9
 8001a40:	4640      	mov	r0, r8
 8001a42:	4649      	mov	r1, r9
 8001a44:	f7ff f872 	bl	8000b2c <__aeabi_dcmpun>
 8001a48:	b140      	cbz	r0, 8001a5c <_printf_float+0xf0>
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bfbc      	itt	lt
 8001a50:	232d      	movlt	r3, #45	; 0x2d
 8001a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001a56:	487f      	ldr	r0, [pc, #508]	; (8001c54 <_printf_float+0x2e8>)
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <_printf_float+0x2ec>)
 8001a5a:	e7d1      	b.n	8001a00 <_printf_float+0x94>
 8001a5c:	6863      	ldr	r3, [r4, #4]
 8001a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8001a62:	9206      	str	r2, [sp, #24]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	d13f      	bne.n	8001ae8 <_printf_float+0x17c>
 8001a68:	2306      	movs	r3, #6
 8001a6a:	6063      	str	r3, [r4, #4]
 8001a6c:	9b05      	ldr	r3, [sp, #20]
 8001a6e:	6861      	ldr	r1, [r4, #4]
 8001a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a74:	2300      	movs	r3, #0
 8001a76:	9303      	str	r3, [sp, #12]
 8001a78:	ab0a      	add	r3, sp, #40	; 0x28
 8001a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001a7e:	ab09      	add	r3, sp, #36	; 0x24
 8001a80:	ec49 8b10 	vmov	d0, r8, r9
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6022      	str	r2, [r4, #0]
 8001a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7ff fecd 	bl	800182c <__cvt>
 8001a92:	9b06      	ldr	r3, [sp, #24]
 8001a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001a96:	2b47      	cmp	r3, #71	; 0x47
 8001a98:	4680      	mov	r8, r0
 8001a9a:	d108      	bne.n	8001aae <_printf_float+0x142>
 8001a9c:	1cc8      	adds	r0, r1, #3
 8001a9e:	db02      	blt.n	8001aa6 <_printf_float+0x13a>
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	4299      	cmp	r1, r3
 8001aa4:	dd41      	ble.n	8001b2a <_printf_float+0x1be>
 8001aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8001aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8001aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001ab2:	d820      	bhi.n	8001af6 <_printf_float+0x18a>
 8001ab4:	3901      	subs	r1, #1
 8001ab6:	465a      	mov	r2, fp
 8001ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001abc:	9109      	str	r1, [sp, #36]	; 0x24
 8001abe:	f7ff ff17 	bl	80018f0 <__exponent>
 8001ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ac4:	1813      	adds	r3, r2, r0
 8001ac6:	2a01      	cmp	r2, #1
 8001ac8:	4681      	mov	r9, r0
 8001aca:	6123      	str	r3, [r4, #16]
 8001acc:	dc02      	bgt.n	8001ad4 <_printf_float+0x168>
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	07d2      	lsls	r2, r2, #31
 8001ad2:	d501      	bpl.n	8001ad8 <_printf_float+0x16c>
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	6123      	str	r3, [r4, #16]
 8001ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d09c      	beq.n	8001a1a <_printf_float+0xae>
 8001ae0:	232d      	movs	r3, #45	; 0x2d
 8001ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ae6:	e798      	b.n	8001a1a <_printf_float+0xae>
 8001ae8:	9a06      	ldr	r2, [sp, #24]
 8001aea:	2a47      	cmp	r2, #71	; 0x47
 8001aec:	d1be      	bne.n	8001a6c <_printf_float+0x100>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1bc      	bne.n	8001a6c <_printf_float+0x100>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e7b9      	b.n	8001a6a <_printf_float+0xfe>
 8001af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8001afa:	d118      	bne.n	8001b2e <_printf_float+0x1c2>
 8001afc:	2900      	cmp	r1, #0
 8001afe:	6863      	ldr	r3, [r4, #4]
 8001b00:	dd0b      	ble.n	8001b1a <_printf_float+0x1ae>
 8001b02:	6121      	str	r1, [r4, #16]
 8001b04:	b913      	cbnz	r3, 8001b0c <_printf_float+0x1a0>
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	07d0      	lsls	r0, r2, #31
 8001b0a:	d502      	bpl.n	8001b12 <_printf_float+0x1a6>
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	440b      	add	r3, r1
 8001b10:	6123      	str	r3, [r4, #16]
 8001b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8001b14:	f04f 0900 	mov.w	r9, #0
 8001b18:	e7de      	b.n	8001ad8 <_printf_float+0x16c>
 8001b1a:	b913      	cbnz	r3, 8001b22 <_printf_float+0x1b6>
 8001b1c:	6822      	ldr	r2, [r4, #0]
 8001b1e:	07d2      	lsls	r2, r2, #31
 8001b20:	d501      	bpl.n	8001b26 <_printf_float+0x1ba>
 8001b22:	3302      	adds	r3, #2
 8001b24:	e7f4      	b.n	8001b10 <_printf_float+0x1a4>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e7f2      	b.n	8001b10 <_printf_float+0x1a4>
 8001b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8001b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b30:	4299      	cmp	r1, r3
 8001b32:	db05      	blt.n	8001b40 <_printf_float+0x1d4>
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	6121      	str	r1, [r4, #16]
 8001b38:	07d8      	lsls	r0, r3, #31
 8001b3a:	d5ea      	bpl.n	8001b12 <_printf_float+0x1a6>
 8001b3c:	1c4b      	adds	r3, r1, #1
 8001b3e:	e7e7      	b.n	8001b10 <_printf_float+0x1a4>
 8001b40:	2900      	cmp	r1, #0
 8001b42:	bfd4      	ite	le
 8001b44:	f1c1 0202 	rsble	r2, r1, #2
 8001b48:	2201      	movgt	r2, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	e7e0      	b.n	8001b10 <_printf_float+0x1a4>
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	055a      	lsls	r2, r3, #21
 8001b52:	d407      	bmi.n	8001b64 <_printf_float+0x1f8>
 8001b54:	6923      	ldr	r3, [r4, #16]
 8001b56:	4642      	mov	r2, r8
 8001b58:	4631      	mov	r1, r6
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	47b8      	blx	r7
 8001b5e:	3001      	adds	r0, #1
 8001b60:	d12c      	bne.n	8001bbc <_printf_float+0x250>
 8001b62:	e764      	b.n	8001a2e <_printf_float+0xc2>
 8001b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001b68:	f240 80e0 	bls.w	8001d2c <_printf_float+0x3c0>
 8001b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001b70:	2200      	movs	r2, #0
 8001b72:	2300      	movs	r3, #0
 8001b74:	f7fe ffa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d034      	beq.n	8001be6 <_printf_float+0x27a>
 8001b7c:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <_printf_float+0x2f0>)
 8001b7e:	2301      	movs	r3, #1
 8001b80:	4631      	mov	r1, r6
 8001b82:	4628      	mov	r0, r5
 8001b84:	47b8      	blx	r7
 8001b86:	3001      	adds	r0, #1
 8001b88:	f43f af51 	beq.w	8001a2e <_printf_float+0xc2>
 8001b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001b90:	429a      	cmp	r2, r3
 8001b92:	db02      	blt.n	8001b9a <_printf_float+0x22e>
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	07d8      	lsls	r0, r3, #31
 8001b98:	d510      	bpl.n	8001bbc <_printf_float+0x250>
 8001b9a:	ee18 3a10 	vmov	r3, s16
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4631      	mov	r1, r6
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	47b8      	blx	r7
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	f43f af41 	beq.w	8001a2e <_printf_float+0xc2>
 8001bac:	f04f 0800 	mov.w	r8, #0
 8001bb0:	f104 091a 	add.w	r9, r4, #26
 8001bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	4543      	cmp	r3, r8
 8001bba:	dc09      	bgt.n	8001bd0 <_printf_float+0x264>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	079b      	lsls	r3, r3, #30
 8001bc0:	f100 8105 	bmi.w	8001dce <_printf_float+0x462>
 8001bc4:	68e0      	ldr	r0, [r4, #12]
 8001bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001bc8:	4298      	cmp	r0, r3
 8001bca:	bfb8      	it	lt
 8001bcc:	4618      	movlt	r0, r3
 8001bce:	e730      	b.n	8001a32 <_printf_float+0xc6>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	4631      	mov	r1, r6
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	47b8      	blx	r7
 8001bda:	3001      	adds	r0, #1
 8001bdc:	f43f af27 	beq.w	8001a2e <_printf_float+0xc2>
 8001be0:	f108 0801 	add.w	r8, r8, #1
 8001be4:	e7e6      	b.n	8001bb4 <_printf_float+0x248>
 8001be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	dc39      	bgt.n	8001c60 <_printf_float+0x2f4>
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <_printf_float+0x2f0>)
 8001bee:	2301      	movs	r3, #1
 8001bf0:	4631      	mov	r1, r6
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	47b8      	blx	r7
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	f43f af19 	beq.w	8001a2e <_printf_float+0xc2>
 8001bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c00:	4313      	orrs	r3, r2
 8001c02:	d102      	bne.n	8001c0a <_printf_float+0x29e>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	07d9      	lsls	r1, r3, #31
 8001c08:	d5d8      	bpl.n	8001bbc <_printf_float+0x250>
 8001c0a:	ee18 3a10 	vmov	r3, s16
 8001c0e:	4652      	mov	r2, sl
 8001c10:	4631      	mov	r1, r6
 8001c12:	4628      	mov	r0, r5
 8001c14:	47b8      	blx	r7
 8001c16:	3001      	adds	r0, #1
 8001c18:	f43f af09 	beq.w	8001a2e <_printf_float+0xc2>
 8001c1c:	f04f 0900 	mov.w	r9, #0
 8001c20:	f104 0a1a 	add.w	sl, r4, #26
 8001c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c26:	425b      	negs	r3, r3
 8001c28:	454b      	cmp	r3, r9
 8001c2a:	dc01      	bgt.n	8001c30 <_printf_float+0x2c4>
 8001c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c2e:	e792      	b.n	8001b56 <_printf_float+0x1ea>
 8001c30:	2301      	movs	r3, #1
 8001c32:	4652      	mov	r2, sl
 8001c34:	4631      	mov	r1, r6
 8001c36:	4628      	mov	r0, r5
 8001c38:	47b8      	blx	r7
 8001c3a:	3001      	adds	r0, #1
 8001c3c:	f43f aef7 	beq.w	8001a2e <_printf_float+0xc2>
 8001c40:	f109 0901 	add.w	r9, r9, #1
 8001c44:	e7ee      	b.n	8001c24 <_printf_float+0x2b8>
 8001c46:	bf00      	nop
 8001c48:	7fefffff 	.word	0x7fefffff
 8001c4c:	080047b4 	.word	0x080047b4
 8001c50:	080047b8 	.word	0x080047b8
 8001c54:	080047c0 	.word	0x080047c0
 8001c58:	080047bc 	.word	0x080047bc
 8001c5c:	080047c4 	.word	0x080047c4
 8001c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bfa8      	it	ge
 8001c68:	461a      	movge	r2, r3
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	4691      	mov	r9, r2
 8001c6e:	dc37      	bgt.n	8001ce0 <_printf_float+0x374>
 8001c70:	f04f 0b00 	mov.w	fp, #0
 8001c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001c78:	f104 021a 	add.w	r2, r4, #26
 8001c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c7e:	9305      	str	r3, [sp, #20]
 8001c80:	eba3 0309 	sub.w	r3, r3, r9
 8001c84:	455b      	cmp	r3, fp
 8001c86:	dc33      	bgt.n	8001cf0 <_printf_float+0x384>
 8001c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	db3b      	blt.n	8001d08 <_printf_float+0x39c>
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	07da      	lsls	r2, r3, #31
 8001c94:	d438      	bmi.n	8001d08 <_printf_float+0x39c>
 8001c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c98:	9b05      	ldr	r3, [sp, #20]
 8001c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	eba2 0901 	sub.w	r9, r2, r1
 8001ca2:	4599      	cmp	r9, r3
 8001ca4:	bfa8      	it	ge
 8001ca6:	4699      	movge	r9, r3
 8001ca8:	f1b9 0f00 	cmp.w	r9, #0
 8001cac:	dc35      	bgt.n	8001d1a <_printf_float+0x3ae>
 8001cae:	f04f 0800 	mov.w	r8, #0
 8001cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001cb6:	f104 0a1a 	add.w	sl, r4, #26
 8001cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	eba3 0309 	sub.w	r3, r3, r9
 8001cc4:	4543      	cmp	r3, r8
 8001cc6:	f77f af79 	ble.w	8001bbc <_printf_float+0x250>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	4652      	mov	r2, sl
 8001cce:	4631      	mov	r1, r6
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	47b8      	blx	r7
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	f43f aeaa 	beq.w	8001a2e <_printf_float+0xc2>
 8001cda:	f108 0801 	add.w	r8, r8, #1
 8001cde:	e7ec      	b.n	8001cba <_printf_float+0x34e>
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	4631      	mov	r1, r6
 8001ce4:	4642      	mov	r2, r8
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	47b8      	blx	r7
 8001cea:	3001      	adds	r0, #1
 8001cec:	d1c0      	bne.n	8001c70 <_printf_float+0x304>
 8001cee:	e69e      	b.n	8001a2e <_printf_float+0xc2>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4631      	mov	r1, r6
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	9205      	str	r2, [sp, #20]
 8001cf8:	47b8      	blx	r7
 8001cfa:	3001      	adds	r0, #1
 8001cfc:	f43f ae97 	beq.w	8001a2e <_printf_float+0xc2>
 8001d00:	9a05      	ldr	r2, [sp, #20]
 8001d02:	f10b 0b01 	add.w	fp, fp, #1
 8001d06:	e7b9      	b.n	8001c7c <_printf_float+0x310>
 8001d08:	ee18 3a10 	vmov	r3, s16
 8001d0c:	4652      	mov	r2, sl
 8001d0e:	4631      	mov	r1, r6
 8001d10:	4628      	mov	r0, r5
 8001d12:	47b8      	blx	r7
 8001d14:	3001      	adds	r0, #1
 8001d16:	d1be      	bne.n	8001c96 <_printf_float+0x32a>
 8001d18:	e689      	b.n	8001a2e <_printf_float+0xc2>
 8001d1a:	9a05      	ldr	r2, [sp, #20]
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	4442      	add	r2, r8
 8001d20:	4631      	mov	r1, r6
 8001d22:	4628      	mov	r0, r5
 8001d24:	47b8      	blx	r7
 8001d26:	3001      	adds	r0, #1
 8001d28:	d1c1      	bne.n	8001cae <_printf_float+0x342>
 8001d2a:	e680      	b.n	8001a2e <_printf_float+0xc2>
 8001d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d2e:	2a01      	cmp	r2, #1
 8001d30:	dc01      	bgt.n	8001d36 <_printf_float+0x3ca>
 8001d32:	07db      	lsls	r3, r3, #31
 8001d34:	d538      	bpl.n	8001da8 <_printf_float+0x43c>
 8001d36:	2301      	movs	r3, #1
 8001d38:	4642      	mov	r2, r8
 8001d3a:	4631      	mov	r1, r6
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	47b8      	blx	r7
 8001d40:	3001      	adds	r0, #1
 8001d42:	f43f ae74 	beq.w	8001a2e <_printf_float+0xc2>
 8001d46:	ee18 3a10 	vmov	r3, s16
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	4631      	mov	r1, r6
 8001d4e:	4628      	mov	r0, r5
 8001d50:	47b8      	blx	r7
 8001d52:	3001      	adds	r0, #1
 8001d54:	f43f ae6b 	beq.w	8001a2e <_printf_float+0xc2>
 8001d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f7fe feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d64:	b9d8      	cbnz	r0, 8001d9e <_printf_float+0x432>
 8001d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d68:	f108 0201 	add.w	r2, r8, #1
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	4631      	mov	r1, r6
 8001d70:	4628      	mov	r0, r5
 8001d72:	47b8      	blx	r7
 8001d74:	3001      	adds	r0, #1
 8001d76:	d10e      	bne.n	8001d96 <_printf_float+0x42a>
 8001d78:	e659      	b.n	8001a2e <_printf_float+0xc2>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	4631      	mov	r1, r6
 8001d80:	4628      	mov	r0, r5
 8001d82:	47b8      	blx	r7
 8001d84:	3001      	adds	r0, #1
 8001d86:	f43f ae52 	beq.w	8001a2e <_printf_float+0xc2>
 8001d8a:	f108 0801 	add.w	r8, r8, #1
 8001d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	4543      	cmp	r3, r8
 8001d94:	dcf1      	bgt.n	8001d7a <_printf_float+0x40e>
 8001d96:	464b      	mov	r3, r9
 8001d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001d9c:	e6dc      	b.n	8001b58 <_printf_float+0x1ec>
 8001d9e:	f04f 0800 	mov.w	r8, #0
 8001da2:	f104 0a1a 	add.w	sl, r4, #26
 8001da6:	e7f2      	b.n	8001d8e <_printf_float+0x422>
 8001da8:	2301      	movs	r3, #1
 8001daa:	4642      	mov	r2, r8
 8001dac:	e7df      	b.n	8001d6e <_printf_float+0x402>
 8001dae:	2301      	movs	r3, #1
 8001db0:	464a      	mov	r2, r9
 8001db2:	4631      	mov	r1, r6
 8001db4:	4628      	mov	r0, r5
 8001db6:	47b8      	blx	r7
 8001db8:	3001      	adds	r0, #1
 8001dba:	f43f ae38 	beq.w	8001a2e <_printf_float+0xc2>
 8001dbe:	f108 0801 	add.w	r8, r8, #1
 8001dc2:	68e3      	ldr	r3, [r4, #12]
 8001dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001dc6:	1a5b      	subs	r3, r3, r1
 8001dc8:	4543      	cmp	r3, r8
 8001dca:	dcf0      	bgt.n	8001dae <_printf_float+0x442>
 8001dcc:	e6fa      	b.n	8001bc4 <_printf_float+0x258>
 8001dce:	f04f 0800 	mov.w	r8, #0
 8001dd2:	f104 0919 	add.w	r9, r4, #25
 8001dd6:	e7f4      	b.n	8001dc2 <_printf_float+0x456>

08001dd8 <_printf_common>:
 8001dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ddc:	4616      	mov	r6, r2
 8001dde:	4699      	mov	r9, r3
 8001de0:	688a      	ldr	r2, [r1, #8]
 8001de2:	690b      	ldr	r3, [r1, #16]
 8001de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	bfb8      	it	lt
 8001dec:	4613      	movlt	r3, r2
 8001dee:	6033      	str	r3, [r6, #0]
 8001df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001df4:	4607      	mov	r7, r0
 8001df6:	460c      	mov	r4, r1
 8001df8:	b10a      	cbz	r2, 8001dfe <_printf_common+0x26>
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6033      	str	r3, [r6, #0]
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	0699      	lsls	r1, r3, #26
 8001e02:	bf42      	ittt	mi
 8001e04:	6833      	ldrmi	r3, [r6, #0]
 8001e06:	3302      	addmi	r3, #2
 8001e08:	6033      	strmi	r3, [r6, #0]
 8001e0a:	6825      	ldr	r5, [r4, #0]
 8001e0c:	f015 0506 	ands.w	r5, r5, #6
 8001e10:	d106      	bne.n	8001e20 <_printf_common+0x48>
 8001e12:	f104 0a19 	add.w	sl, r4, #25
 8001e16:	68e3      	ldr	r3, [r4, #12]
 8001e18:	6832      	ldr	r2, [r6, #0]
 8001e1a:	1a9b      	subs	r3, r3, r2
 8001e1c:	42ab      	cmp	r3, r5
 8001e1e:	dc26      	bgt.n	8001e6e <_printf_common+0x96>
 8001e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e24:	1e13      	subs	r3, r2, #0
 8001e26:	6822      	ldr	r2, [r4, #0]
 8001e28:	bf18      	it	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	0692      	lsls	r2, r2, #26
 8001e2e:	d42b      	bmi.n	8001e88 <_printf_common+0xb0>
 8001e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e34:	4649      	mov	r1, r9
 8001e36:	4638      	mov	r0, r7
 8001e38:	47c0      	blx	r8
 8001e3a:	3001      	adds	r0, #1
 8001e3c:	d01e      	beq.n	8001e7c <_printf_common+0xa4>
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	68e5      	ldr	r5, [r4, #12]
 8001e42:	6832      	ldr	r2, [r6, #0]
 8001e44:	f003 0306 	and.w	r3, r3, #6
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	bf08      	it	eq
 8001e4c:	1aad      	subeq	r5, r5, r2
 8001e4e:	68a3      	ldr	r3, [r4, #8]
 8001e50:	6922      	ldr	r2, [r4, #16]
 8001e52:	bf0c      	ite	eq
 8001e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e58:	2500      	movne	r5, #0
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	bfc4      	itt	gt
 8001e5e:	1a9b      	subgt	r3, r3, r2
 8001e60:	18ed      	addgt	r5, r5, r3
 8001e62:	2600      	movs	r6, #0
 8001e64:	341a      	adds	r4, #26
 8001e66:	42b5      	cmp	r5, r6
 8001e68:	d11a      	bne.n	8001ea0 <_printf_common+0xc8>
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	e008      	b.n	8001e80 <_printf_common+0xa8>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4652      	mov	r2, sl
 8001e72:	4649      	mov	r1, r9
 8001e74:	4638      	mov	r0, r7
 8001e76:	47c0      	blx	r8
 8001e78:	3001      	adds	r0, #1
 8001e7a:	d103      	bne.n	8001e84 <_printf_common+0xac>
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e84:	3501      	adds	r5, #1
 8001e86:	e7c6      	b.n	8001e16 <_printf_common+0x3e>
 8001e88:	18e1      	adds	r1, r4, r3
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	2030      	movs	r0, #48	; 0x30
 8001e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e92:	4422      	add	r2, r4
 8001e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	e7c7      	b.n	8001e30 <_printf_common+0x58>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	47c0      	blx	r8
 8001eaa:	3001      	adds	r0, #1
 8001eac:	d0e6      	beq.n	8001e7c <_printf_common+0xa4>
 8001eae:	3601      	adds	r6, #1
 8001eb0:	e7d9      	b.n	8001e66 <_printf_common+0x8e>
	...

08001eb4 <_printf_i>:
 8001eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb8:	460c      	mov	r4, r1
 8001eba:	4691      	mov	r9, r2
 8001ebc:	7e27      	ldrb	r7, [r4, #24]
 8001ebe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ec0:	2f78      	cmp	r7, #120	; 0x78
 8001ec2:	4680      	mov	r8, r0
 8001ec4:	469a      	mov	sl, r3
 8001ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001eca:	d807      	bhi.n	8001edc <_printf_i+0x28>
 8001ecc:	2f62      	cmp	r7, #98	; 0x62
 8001ece:	d80a      	bhi.n	8001ee6 <_printf_i+0x32>
 8001ed0:	2f00      	cmp	r7, #0
 8001ed2:	f000 80d8 	beq.w	8002086 <_printf_i+0x1d2>
 8001ed6:	2f58      	cmp	r7, #88	; 0x58
 8001ed8:	f000 80a3 	beq.w	8002022 <_printf_i+0x16e>
 8001edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ee4:	e03a      	b.n	8001f5c <_printf_i+0xa8>
 8001ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001eea:	2b15      	cmp	r3, #21
 8001eec:	d8f6      	bhi.n	8001edc <_printf_i+0x28>
 8001eee:	a001      	add	r0, pc, #4	; (adr r0, 8001ef4 <_printf_i+0x40>)
 8001ef0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ef4:	08001f4d 	.word	0x08001f4d
 8001ef8:	08001f61 	.word	0x08001f61
 8001efc:	08001edd 	.word	0x08001edd
 8001f00:	08001edd 	.word	0x08001edd
 8001f04:	08001edd 	.word	0x08001edd
 8001f08:	08001edd 	.word	0x08001edd
 8001f0c:	08001f61 	.word	0x08001f61
 8001f10:	08001edd 	.word	0x08001edd
 8001f14:	08001edd 	.word	0x08001edd
 8001f18:	08001edd 	.word	0x08001edd
 8001f1c:	08001edd 	.word	0x08001edd
 8001f20:	0800206d 	.word	0x0800206d
 8001f24:	08001f91 	.word	0x08001f91
 8001f28:	0800204f 	.word	0x0800204f
 8001f2c:	08001edd 	.word	0x08001edd
 8001f30:	08001edd 	.word	0x08001edd
 8001f34:	0800208f 	.word	0x0800208f
 8001f38:	08001edd 	.word	0x08001edd
 8001f3c:	08001f91 	.word	0x08001f91
 8001f40:	08001edd 	.word	0x08001edd
 8001f44:	08001edd 	.word	0x08001edd
 8001f48:	08002057 	.word	0x08002057
 8001f4c:	680b      	ldr	r3, [r1, #0]
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	600a      	str	r2, [r1, #0]
 8001f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0a3      	b.n	80020a8 <_printf_i+0x1f4>
 8001f60:	6825      	ldr	r5, [r4, #0]
 8001f62:	6808      	ldr	r0, [r1, #0]
 8001f64:	062e      	lsls	r6, r5, #24
 8001f66:	f100 0304 	add.w	r3, r0, #4
 8001f6a:	d50a      	bpl.n	8001f82 <_printf_i+0xce>
 8001f6c:	6805      	ldr	r5, [r0, #0]
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	2d00      	cmp	r5, #0
 8001f72:	da03      	bge.n	8001f7c <_printf_i+0xc8>
 8001f74:	232d      	movs	r3, #45	; 0x2d
 8001f76:	426d      	negs	r5, r5
 8001f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f7c:	485e      	ldr	r0, [pc, #376]	; (80020f8 <_printf_i+0x244>)
 8001f7e:	230a      	movs	r3, #10
 8001f80:	e019      	b.n	8001fb6 <_printf_i+0x102>
 8001f82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f86:	6805      	ldr	r5, [r0, #0]
 8001f88:	600b      	str	r3, [r1, #0]
 8001f8a:	bf18      	it	ne
 8001f8c:	b22d      	sxthne	r5, r5
 8001f8e:	e7ef      	b.n	8001f70 <_printf_i+0xbc>
 8001f90:	680b      	ldr	r3, [r1, #0]
 8001f92:	6825      	ldr	r5, [r4, #0]
 8001f94:	1d18      	adds	r0, r3, #4
 8001f96:	6008      	str	r0, [r1, #0]
 8001f98:	0628      	lsls	r0, r5, #24
 8001f9a:	d501      	bpl.n	8001fa0 <_printf_i+0xec>
 8001f9c:	681d      	ldr	r5, [r3, #0]
 8001f9e:	e002      	b.n	8001fa6 <_printf_i+0xf2>
 8001fa0:	0669      	lsls	r1, r5, #25
 8001fa2:	d5fb      	bpl.n	8001f9c <_printf_i+0xe8>
 8001fa4:	881d      	ldrh	r5, [r3, #0]
 8001fa6:	4854      	ldr	r0, [pc, #336]	; (80020f8 <_printf_i+0x244>)
 8001fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8001faa:	bf0c      	ite	eq
 8001fac:	2308      	moveq	r3, #8
 8001fae:	230a      	movne	r3, #10
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fb6:	6866      	ldr	r6, [r4, #4]
 8001fb8:	60a6      	str	r6, [r4, #8]
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	bfa2      	ittt	ge
 8001fbe:	6821      	ldrge	r1, [r4, #0]
 8001fc0:	f021 0104 	bicge.w	r1, r1, #4
 8001fc4:	6021      	strge	r1, [r4, #0]
 8001fc6:	b90d      	cbnz	r5, 8001fcc <_printf_i+0x118>
 8001fc8:	2e00      	cmp	r6, #0
 8001fca:	d04d      	beq.n	8002068 <_printf_i+0x1b4>
 8001fcc:	4616      	mov	r6, r2
 8001fce:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fd2:	fb03 5711 	mls	r7, r3, r1, r5
 8001fd6:	5dc7      	ldrb	r7, [r0, r7]
 8001fd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fdc:	462f      	mov	r7, r5
 8001fde:	42bb      	cmp	r3, r7
 8001fe0:	460d      	mov	r5, r1
 8001fe2:	d9f4      	bls.n	8001fce <_printf_i+0x11a>
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d10b      	bne.n	8002000 <_printf_i+0x14c>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	07df      	lsls	r7, r3, #31
 8001fec:	d508      	bpl.n	8002000 <_printf_i+0x14c>
 8001fee:	6923      	ldr	r3, [r4, #16]
 8001ff0:	6861      	ldr	r1, [r4, #4]
 8001ff2:	4299      	cmp	r1, r3
 8001ff4:	bfde      	ittt	le
 8001ff6:	2330      	movle	r3, #48	; 0x30
 8001ff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ffc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002000:	1b92      	subs	r2, r2, r6
 8002002:	6122      	str	r2, [r4, #16]
 8002004:	f8cd a000 	str.w	sl, [sp]
 8002008:	464b      	mov	r3, r9
 800200a:	aa03      	add	r2, sp, #12
 800200c:	4621      	mov	r1, r4
 800200e:	4640      	mov	r0, r8
 8002010:	f7ff fee2 	bl	8001dd8 <_printf_common>
 8002014:	3001      	adds	r0, #1
 8002016:	d14c      	bne.n	80020b2 <_printf_i+0x1fe>
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	b004      	add	sp, #16
 800201e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002022:	4835      	ldr	r0, [pc, #212]	; (80020f8 <_printf_i+0x244>)
 8002024:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	680e      	ldr	r6, [r1, #0]
 800202c:	061f      	lsls	r7, r3, #24
 800202e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002032:	600e      	str	r6, [r1, #0]
 8002034:	d514      	bpl.n	8002060 <_printf_i+0x1ac>
 8002036:	07d9      	lsls	r1, r3, #31
 8002038:	bf44      	itt	mi
 800203a:	f043 0320 	orrmi.w	r3, r3, #32
 800203e:	6023      	strmi	r3, [r4, #0]
 8002040:	b91d      	cbnz	r5, 800204a <_printf_i+0x196>
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	f023 0320 	bic.w	r3, r3, #32
 8002048:	6023      	str	r3, [r4, #0]
 800204a:	2310      	movs	r3, #16
 800204c:	e7b0      	b.n	8001fb0 <_printf_i+0xfc>
 800204e:	6823      	ldr	r3, [r4, #0]
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	2378      	movs	r3, #120	; 0x78
 8002058:	4828      	ldr	r0, [pc, #160]	; (80020fc <_printf_i+0x248>)
 800205a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800205e:	e7e3      	b.n	8002028 <_printf_i+0x174>
 8002060:	065e      	lsls	r6, r3, #25
 8002062:	bf48      	it	mi
 8002064:	b2ad      	uxthmi	r5, r5
 8002066:	e7e6      	b.n	8002036 <_printf_i+0x182>
 8002068:	4616      	mov	r6, r2
 800206a:	e7bb      	b.n	8001fe4 <_printf_i+0x130>
 800206c:	680b      	ldr	r3, [r1, #0]
 800206e:	6826      	ldr	r6, [r4, #0]
 8002070:	6960      	ldr	r0, [r4, #20]
 8002072:	1d1d      	adds	r5, r3, #4
 8002074:	600d      	str	r5, [r1, #0]
 8002076:	0635      	lsls	r5, r6, #24
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	d501      	bpl.n	8002080 <_printf_i+0x1cc>
 800207c:	6018      	str	r0, [r3, #0]
 800207e:	e002      	b.n	8002086 <_printf_i+0x1d2>
 8002080:	0671      	lsls	r1, r6, #25
 8002082:	d5fb      	bpl.n	800207c <_printf_i+0x1c8>
 8002084:	8018      	strh	r0, [r3, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	6123      	str	r3, [r4, #16]
 800208a:	4616      	mov	r6, r2
 800208c:	e7ba      	b.n	8002004 <_printf_i+0x150>
 800208e:	680b      	ldr	r3, [r1, #0]
 8002090:	1d1a      	adds	r2, r3, #4
 8002092:	600a      	str	r2, [r1, #0]
 8002094:	681e      	ldr	r6, [r3, #0]
 8002096:	6862      	ldr	r2, [r4, #4]
 8002098:	2100      	movs	r1, #0
 800209a:	4630      	mov	r0, r6
 800209c:	f7fe f8a0 	bl	80001e0 <memchr>
 80020a0:	b108      	cbz	r0, 80020a6 <_printf_i+0x1f2>
 80020a2:	1b80      	subs	r0, r0, r6
 80020a4:	6060      	str	r0, [r4, #4]
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	6123      	str	r3, [r4, #16]
 80020aa:	2300      	movs	r3, #0
 80020ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020b0:	e7a8      	b.n	8002004 <_printf_i+0x150>
 80020b2:	6923      	ldr	r3, [r4, #16]
 80020b4:	4632      	mov	r2, r6
 80020b6:	4649      	mov	r1, r9
 80020b8:	4640      	mov	r0, r8
 80020ba:	47d0      	blx	sl
 80020bc:	3001      	adds	r0, #1
 80020be:	d0ab      	beq.n	8002018 <_printf_i+0x164>
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	079b      	lsls	r3, r3, #30
 80020c4:	d413      	bmi.n	80020ee <_printf_i+0x23a>
 80020c6:	68e0      	ldr	r0, [r4, #12]
 80020c8:	9b03      	ldr	r3, [sp, #12]
 80020ca:	4298      	cmp	r0, r3
 80020cc:	bfb8      	it	lt
 80020ce:	4618      	movlt	r0, r3
 80020d0:	e7a4      	b.n	800201c <_printf_i+0x168>
 80020d2:	2301      	movs	r3, #1
 80020d4:	4632      	mov	r2, r6
 80020d6:	4649      	mov	r1, r9
 80020d8:	4640      	mov	r0, r8
 80020da:	47d0      	blx	sl
 80020dc:	3001      	adds	r0, #1
 80020de:	d09b      	beq.n	8002018 <_printf_i+0x164>
 80020e0:	3501      	adds	r5, #1
 80020e2:	68e3      	ldr	r3, [r4, #12]
 80020e4:	9903      	ldr	r1, [sp, #12]
 80020e6:	1a5b      	subs	r3, r3, r1
 80020e8:	42ab      	cmp	r3, r5
 80020ea:	dcf2      	bgt.n	80020d2 <_printf_i+0x21e>
 80020ec:	e7eb      	b.n	80020c6 <_printf_i+0x212>
 80020ee:	2500      	movs	r5, #0
 80020f0:	f104 0619 	add.w	r6, r4, #25
 80020f4:	e7f5      	b.n	80020e2 <_printf_i+0x22e>
 80020f6:	bf00      	nop
 80020f8:	080047c6 	.word	0x080047c6
 80020fc:	080047d7 	.word	0x080047d7

08002100 <siprintf>:
 8002100:	b40e      	push	{r1, r2, r3}
 8002102:	b500      	push	{lr}
 8002104:	b09c      	sub	sp, #112	; 0x70
 8002106:	ab1d      	add	r3, sp, #116	; 0x74
 8002108:	9002      	str	r0, [sp, #8]
 800210a:	9006      	str	r0, [sp, #24]
 800210c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002110:	4809      	ldr	r0, [pc, #36]	; (8002138 <siprintf+0x38>)
 8002112:	9107      	str	r1, [sp, #28]
 8002114:	9104      	str	r1, [sp, #16]
 8002116:	4909      	ldr	r1, [pc, #36]	; (800213c <siprintf+0x3c>)
 8002118:	f853 2b04 	ldr.w	r2, [r3], #4
 800211c:	9105      	str	r1, [sp, #20]
 800211e:	6800      	ldr	r0, [r0, #0]
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	a902      	add	r1, sp, #8
 8002124:	f001 fbc2 	bl	80038ac <_svfiprintf_r>
 8002128:	9b02      	ldr	r3, [sp, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	b01c      	add	sp, #112	; 0x70
 8002130:	f85d eb04 	ldr.w	lr, [sp], #4
 8002134:	b003      	add	sp, #12
 8002136:	4770      	bx	lr
 8002138:	2000000c 	.word	0x2000000c
 800213c:	ffff0208 	.word	0xffff0208

08002140 <_strtol_l.isra.0>:
 8002140:	2b01      	cmp	r3, #1
 8002142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002146:	d001      	beq.n	800214c <_strtol_l.isra.0+0xc>
 8002148:	2b24      	cmp	r3, #36	; 0x24
 800214a:	d906      	bls.n	800215a <_strtol_l.isra.0+0x1a>
 800214c:	f7ff fb3c 	bl	80017c8 <__errno>
 8002150:	2316      	movs	r3, #22
 8002152:	6003      	str	r3, [r0, #0]
 8002154:	2000      	movs	r0, #0
 8002156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800215a:	4f3a      	ldr	r7, [pc, #232]	; (8002244 <_strtol_l.isra.0+0x104>)
 800215c:	468e      	mov	lr, r1
 800215e:	4676      	mov	r6, lr
 8002160:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8002164:	5de5      	ldrb	r5, [r4, r7]
 8002166:	f015 0508 	ands.w	r5, r5, #8
 800216a:	d1f8      	bne.n	800215e <_strtol_l.isra.0+0x1e>
 800216c:	2c2d      	cmp	r4, #45	; 0x2d
 800216e:	d134      	bne.n	80021da <_strtol_l.isra.0+0x9a>
 8002170:	f89e 4000 	ldrb.w	r4, [lr]
 8002174:	f04f 0801 	mov.w	r8, #1
 8002178:	f106 0e02 	add.w	lr, r6, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05c      	beq.n	800223a <_strtol_l.isra.0+0xfa>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d10c      	bne.n	800219e <_strtol_l.isra.0+0x5e>
 8002184:	2c30      	cmp	r4, #48	; 0x30
 8002186:	d10a      	bne.n	800219e <_strtol_l.isra.0+0x5e>
 8002188:	f89e 4000 	ldrb.w	r4, [lr]
 800218c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8002190:	2c58      	cmp	r4, #88	; 0x58
 8002192:	d14d      	bne.n	8002230 <_strtol_l.isra.0+0xf0>
 8002194:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8002198:	2310      	movs	r3, #16
 800219a:	f10e 0e02 	add.w	lr, lr, #2
 800219e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80021a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80021a6:	2600      	movs	r6, #0
 80021a8:	fbbc f9f3 	udiv	r9, ip, r3
 80021ac:	4635      	mov	r5, r6
 80021ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80021b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80021b6:	2f09      	cmp	r7, #9
 80021b8:	d818      	bhi.n	80021ec <_strtol_l.isra.0+0xac>
 80021ba:	463c      	mov	r4, r7
 80021bc:	42a3      	cmp	r3, r4
 80021be:	dd24      	ble.n	800220a <_strtol_l.isra.0+0xca>
 80021c0:	2e00      	cmp	r6, #0
 80021c2:	db1f      	blt.n	8002204 <_strtol_l.isra.0+0xc4>
 80021c4:	45a9      	cmp	r9, r5
 80021c6:	d31d      	bcc.n	8002204 <_strtol_l.isra.0+0xc4>
 80021c8:	d101      	bne.n	80021ce <_strtol_l.isra.0+0x8e>
 80021ca:	45a2      	cmp	sl, r4
 80021cc:	db1a      	blt.n	8002204 <_strtol_l.isra.0+0xc4>
 80021ce:	fb05 4503 	mla	r5, r5, r3, r4
 80021d2:	2601      	movs	r6, #1
 80021d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80021d8:	e7eb      	b.n	80021b2 <_strtol_l.isra.0+0x72>
 80021da:	2c2b      	cmp	r4, #43	; 0x2b
 80021dc:	bf08      	it	eq
 80021de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80021e2:	46a8      	mov	r8, r5
 80021e4:	bf08      	it	eq
 80021e6:	f106 0e02 	addeq.w	lr, r6, #2
 80021ea:	e7c7      	b.n	800217c <_strtol_l.isra.0+0x3c>
 80021ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80021f0:	2f19      	cmp	r7, #25
 80021f2:	d801      	bhi.n	80021f8 <_strtol_l.isra.0+0xb8>
 80021f4:	3c37      	subs	r4, #55	; 0x37
 80021f6:	e7e1      	b.n	80021bc <_strtol_l.isra.0+0x7c>
 80021f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80021fc:	2f19      	cmp	r7, #25
 80021fe:	d804      	bhi.n	800220a <_strtol_l.isra.0+0xca>
 8002200:	3c57      	subs	r4, #87	; 0x57
 8002202:	e7db      	b.n	80021bc <_strtol_l.isra.0+0x7c>
 8002204:	f04f 36ff 	mov.w	r6, #4294967295
 8002208:	e7e4      	b.n	80021d4 <_strtol_l.isra.0+0x94>
 800220a:	2e00      	cmp	r6, #0
 800220c:	da05      	bge.n	800221a <_strtol_l.isra.0+0xda>
 800220e:	2322      	movs	r3, #34	; 0x22
 8002210:	6003      	str	r3, [r0, #0]
 8002212:	4665      	mov	r5, ip
 8002214:	b942      	cbnz	r2, 8002228 <_strtol_l.isra.0+0xe8>
 8002216:	4628      	mov	r0, r5
 8002218:	e79d      	b.n	8002156 <_strtol_l.isra.0+0x16>
 800221a:	f1b8 0f00 	cmp.w	r8, #0
 800221e:	d000      	beq.n	8002222 <_strtol_l.isra.0+0xe2>
 8002220:	426d      	negs	r5, r5
 8002222:	2a00      	cmp	r2, #0
 8002224:	d0f7      	beq.n	8002216 <_strtol_l.isra.0+0xd6>
 8002226:	b10e      	cbz	r6, 800222c <_strtol_l.isra.0+0xec>
 8002228:	f10e 31ff 	add.w	r1, lr, #4294967295
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	e7f2      	b.n	8002216 <_strtol_l.isra.0+0xd6>
 8002230:	2430      	movs	r4, #48	; 0x30
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1b3      	bne.n	800219e <_strtol_l.isra.0+0x5e>
 8002236:	2308      	movs	r3, #8
 8002238:	e7b1      	b.n	800219e <_strtol_l.isra.0+0x5e>
 800223a:	2c30      	cmp	r4, #48	; 0x30
 800223c:	d0a4      	beq.n	8002188 <_strtol_l.isra.0+0x48>
 800223e:	230a      	movs	r3, #10
 8002240:	e7ad      	b.n	800219e <_strtol_l.isra.0+0x5e>
 8002242:	bf00      	nop
 8002244:	080047e9 	.word	0x080047e9

08002248 <strtol>:
 8002248:	4613      	mov	r3, r2
 800224a:	460a      	mov	r2, r1
 800224c:	4601      	mov	r1, r0
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <strtol+0x10>)
 8002250:	6800      	ldr	r0, [r0, #0]
 8002252:	f7ff bf75 	b.w	8002140 <_strtol_l.isra.0>
 8002256:	bf00      	nop
 8002258:	2000000c 	.word	0x2000000c

0800225c <quorem>:
 800225c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	6903      	ldr	r3, [r0, #16]
 8002262:	690c      	ldr	r4, [r1, #16]
 8002264:	42a3      	cmp	r3, r4
 8002266:	4607      	mov	r7, r0
 8002268:	f2c0 8081 	blt.w	800236e <quorem+0x112>
 800226c:	3c01      	subs	r4, #1
 800226e:	f101 0814 	add.w	r8, r1, #20
 8002272:	f100 0514 	add.w	r5, r0, #20
 8002276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002284:	3301      	adds	r3, #1
 8002286:	429a      	cmp	r2, r3
 8002288:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800228c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002290:	fbb2 f6f3 	udiv	r6, r2, r3
 8002294:	d331      	bcc.n	80022fa <quorem+0x9e>
 8002296:	f04f 0e00 	mov.w	lr, #0
 800229a:	4640      	mov	r0, r8
 800229c:	46ac      	mov	ip, r5
 800229e:	46f2      	mov	sl, lr
 80022a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80022a4:	b293      	uxth	r3, r2
 80022a6:	fb06 e303 	mla	r3, r6, r3, lr
 80022aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	ebaa 0303 	sub.w	r3, sl, r3
 80022b4:	0c12      	lsrs	r2, r2, #16
 80022b6:	f8dc a000 	ldr.w	sl, [ip]
 80022ba:	fb06 e202 	mla	r2, r6, r2, lr
 80022be:	fa13 f38a 	uxtah	r3, r3, sl
 80022c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80022c6:	fa1f fa82 	uxth.w	sl, r2
 80022ca:	f8dc 2000 	ldr.w	r2, [ip]
 80022ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80022d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022dc:	4581      	cmp	r9, r0
 80022de:	f84c 3b04 	str.w	r3, [ip], #4
 80022e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80022e6:	d2db      	bcs.n	80022a0 <quorem+0x44>
 80022e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80022ec:	b92b      	cbnz	r3, 80022fa <quorem+0x9e>
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	3b04      	subs	r3, #4
 80022f2:	429d      	cmp	r5, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	d32e      	bcc.n	8002356 <quorem+0xfa>
 80022f8:	613c      	str	r4, [r7, #16]
 80022fa:	4638      	mov	r0, r7
 80022fc:	f001 f8c0 	bl	8003480 <__mcmp>
 8002300:	2800      	cmp	r0, #0
 8002302:	db24      	blt.n	800234e <quorem+0xf2>
 8002304:	3601      	adds	r6, #1
 8002306:	4628      	mov	r0, r5
 8002308:	f04f 0c00 	mov.w	ip, #0
 800230c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002310:	f8d0 e000 	ldr.w	lr, [r0]
 8002314:	b293      	uxth	r3, r2
 8002316:	ebac 0303 	sub.w	r3, ip, r3
 800231a:	0c12      	lsrs	r2, r2, #16
 800231c:	fa13 f38e 	uxtah	r3, r3, lr
 8002320:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800232e:	45c1      	cmp	r9, r8
 8002330:	f840 3b04 	str.w	r3, [r0], #4
 8002334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002338:	d2e8      	bcs.n	800230c <quorem+0xb0>
 800233a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800233e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002342:	b922      	cbnz	r2, 800234e <quorem+0xf2>
 8002344:	3b04      	subs	r3, #4
 8002346:	429d      	cmp	r5, r3
 8002348:	461a      	mov	r2, r3
 800234a:	d30a      	bcc.n	8002362 <quorem+0x106>
 800234c:	613c      	str	r4, [r7, #16]
 800234e:	4630      	mov	r0, r6
 8002350:	b003      	add	sp, #12
 8002352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	3b04      	subs	r3, #4
 800235a:	2a00      	cmp	r2, #0
 800235c:	d1cc      	bne.n	80022f8 <quorem+0x9c>
 800235e:	3c01      	subs	r4, #1
 8002360:	e7c7      	b.n	80022f2 <quorem+0x96>
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	3b04      	subs	r3, #4
 8002366:	2a00      	cmp	r2, #0
 8002368:	d1f0      	bne.n	800234c <quorem+0xf0>
 800236a:	3c01      	subs	r4, #1
 800236c:	e7eb      	b.n	8002346 <quorem+0xea>
 800236e:	2000      	movs	r0, #0
 8002370:	e7ee      	b.n	8002350 <quorem+0xf4>
 8002372:	0000      	movs	r0, r0
 8002374:	0000      	movs	r0, r0
	...

08002378 <_dtoa_r>:
 8002378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237c:	ed2d 8b02 	vpush	{d8}
 8002380:	ec57 6b10 	vmov	r6, r7, d0
 8002384:	b095      	sub	sp, #84	; 0x54
 8002386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800238c:	9105      	str	r1, [sp, #20]
 800238e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002392:	4604      	mov	r4, r0
 8002394:	9209      	str	r2, [sp, #36]	; 0x24
 8002396:	930f      	str	r3, [sp, #60]	; 0x3c
 8002398:	b975      	cbnz	r5, 80023b8 <_dtoa_r+0x40>
 800239a:	2010      	movs	r0, #16
 800239c:	f000 fddc 	bl	8002f58 <malloc>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6260      	str	r0, [r4, #36]	; 0x24
 80023a4:	b920      	cbnz	r0, 80023b0 <_dtoa_r+0x38>
 80023a6:	4bb2      	ldr	r3, [pc, #712]	; (8002670 <_dtoa_r+0x2f8>)
 80023a8:	21ea      	movs	r1, #234	; 0xea
 80023aa:	48b2      	ldr	r0, [pc, #712]	; (8002674 <_dtoa_r+0x2fc>)
 80023ac:	f001 fb8e 	bl	8003acc <__assert_func>
 80023b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80023b4:	6005      	str	r5, [r0, #0]
 80023b6:	60c5      	str	r5, [r0, #12]
 80023b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	b151      	cbz	r1, 80023d4 <_dtoa_r+0x5c>
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	604a      	str	r2, [r1, #4]
 80023c2:	2301      	movs	r3, #1
 80023c4:	4093      	lsls	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	4620      	mov	r0, r4
 80023ca:	f000 fe1b 	bl	8003004 <_Bfree>
 80023ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	1e3b      	subs	r3, r7, #0
 80023d6:	bfb9      	ittee	lt
 80023d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	9303      	strlt	r3, [sp, #12]
 80023de:	2300      	movge	r3, #0
 80023e0:	f8c8 3000 	strge.w	r3, [r8]
 80023e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80023e8:	4ba3      	ldr	r3, [pc, #652]	; (8002678 <_dtoa_r+0x300>)
 80023ea:	bfbc      	itt	lt
 80023ec:	2201      	movlt	r2, #1
 80023ee:	f8c8 2000 	strlt.w	r2, [r8]
 80023f2:	ea33 0309 	bics.w	r3, r3, r9
 80023f6:	d11b      	bne.n	8002430 <_dtoa_r+0xb8>
 80023f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80023fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002404:	4333      	orrs	r3, r6
 8002406:	f000 857a 	beq.w	8002efe <_dtoa_r+0xb86>
 800240a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800240c:	b963      	cbnz	r3, 8002428 <_dtoa_r+0xb0>
 800240e:	4b9b      	ldr	r3, [pc, #620]	; (800267c <_dtoa_r+0x304>)
 8002410:	e024      	b.n	800245c <_dtoa_r+0xe4>
 8002412:	4b9b      	ldr	r3, [pc, #620]	; (8002680 <_dtoa_r+0x308>)
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	3308      	adds	r3, #8
 8002418:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	9800      	ldr	r0, [sp, #0]
 800241e:	b015      	add	sp, #84	; 0x54
 8002420:	ecbd 8b02 	vpop	{d8}
 8002424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002428:	4b94      	ldr	r3, [pc, #592]	; (800267c <_dtoa_r+0x304>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	3303      	adds	r3, #3
 800242e:	e7f3      	b.n	8002418 <_dtoa_r+0xa0>
 8002430:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	ec51 0b17 	vmov	r0, r1, d7
 800243a:	2300      	movs	r3, #0
 800243c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002440:	f7fe fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8002444:	4680      	mov	r8, r0
 8002446:	b158      	cbz	r0, 8002460 <_dtoa_r+0xe8>
 8002448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800244a:	2301      	movs	r3, #1
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8551 	beq.w	8002ef8 <_dtoa_r+0xb80>
 8002456:	488b      	ldr	r0, [pc, #556]	; (8002684 <_dtoa_r+0x30c>)
 8002458:	6018      	str	r0, [r3, #0]
 800245a:	1e43      	subs	r3, r0, #1
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	e7dd      	b.n	800241c <_dtoa_r+0xa4>
 8002460:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002464:	aa12      	add	r2, sp, #72	; 0x48
 8002466:	a913      	add	r1, sp, #76	; 0x4c
 8002468:	4620      	mov	r0, r4
 800246a:	f001 f8ad 	bl	80035c8 <__d2b>
 800246e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002472:	4683      	mov	fp, r0
 8002474:	2d00      	cmp	r5, #0
 8002476:	d07c      	beq.n	8002572 <_dtoa_r+0x1fa>
 8002478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800247a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800247e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002482:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002486:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800248a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800248e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002492:	4b7d      	ldr	r3, [pc, #500]	; (8002688 <_dtoa_r+0x310>)
 8002494:	2200      	movs	r2, #0
 8002496:	4630      	mov	r0, r6
 8002498:	4639      	mov	r1, r7
 800249a:	f7fd fef5 	bl	8000288 <__aeabi_dsub>
 800249e:	a36e      	add	r3, pc, #440	; (adr r3, 8002658 <_dtoa_r+0x2e0>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f8a8 	bl	80005f8 <__aeabi_dmul>
 80024a8:	a36d      	add	r3, pc, #436	; (adr r3, 8002660 <_dtoa_r+0x2e8>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fd feed 	bl	800028c <__adddf3>
 80024b2:	4606      	mov	r6, r0
 80024b4:	4628      	mov	r0, r5
 80024b6:	460f      	mov	r7, r1
 80024b8:	f7fe f834 	bl	8000524 <__aeabi_i2d>
 80024bc:	a36a      	add	r3, pc, #424	; (adr r3, 8002668 <_dtoa_r+0x2f0>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fe f899 	bl	80005f8 <__aeabi_dmul>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4630      	mov	r0, r6
 80024cc:	4639      	mov	r1, r7
 80024ce:	f7fd fedd 	bl	800028c <__adddf3>
 80024d2:	4606      	mov	r6, r0
 80024d4:	460f      	mov	r7, r1
 80024d6:	f7fe fb3f 	bl	8000b58 <__aeabi_d2iz>
 80024da:	2200      	movs	r2, #0
 80024dc:	4682      	mov	sl, r0
 80024de:	2300      	movs	r3, #0
 80024e0:	4630      	mov	r0, r6
 80024e2:	4639      	mov	r1, r7
 80024e4:	f7fe fafa 	bl	8000adc <__aeabi_dcmplt>
 80024e8:	b148      	cbz	r0, 80024fe <_dtoa_r+0x186>
 80024ea:	4650      	mov	r0, sl
 80024ec:	f7fe f81a 	bl	8000524 <__aeabi_i2d>
 80024f0:	4632      	mov	r2, r6
 80024f2:	463b      	mov	r3, r7
 80024f4:	f7fe fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80024f8:	b908      	cbnz	r0, 80024fe <_dtoa_r+0x186>
 80024fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80024fe:	f1ba 0f16 	cmp.w	sl, #22
 8002502:	d854      	bhi.n	80025ae <_dtoa_r+0x236>
 8002504:	4b61      	ldr	r3, [pc, #388]	; (800268c <_dtoa_r+0x314>)
 8002506:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002512:	f7fe fae3 	bl	8000adc <__aeabi_dcmplt>
 8002516:	2800      	cmp	r0, #0
 8002518:	d04b      	beq.n	80025b2 <_dtoa_r+0x23a>
 800251a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800251e:	2300      	movs	r3, #0
 8002520:	930e      	str	r3, [sp, #56]	; 0x38
 8002522:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002524:	1b5d      	subs	r5, r3, r5
 8002526:	1e6b      	subs	r3, r5, #1
 8002528:	9304      	str	r3, [sp, #16]
 800252a:	bf43      	ittte	mi
 800252c:	2300      	movmi	r3, #0
 800252e:	f1c5 0801 	rsbmi	r8, r5, #1
 8002532:	9304      	strmi	r3, [sp, #16]
 8002534:	f04f 0800 	movpl.w	r8, #0
 8002538:	f1ba 0f00 	cmp.w	sl, #0
 800253c:	db3b      	blt.n	80025b6 <_dtoa_r+0x23e>
 800253e:	9b04      	ldr	r3, [sp, #16]
 8002540:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002544:	4453      	add	r3, sl
 8002546:	9304      	str	r3, [sp, #16]
 8002548:	2300      	movs	r3, #0
 800254a:	9306      	str	r3, [sp, #24]
 800254c:	9b05      	ldr	r3, [sp, #20]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d869      	bhi.n	8002626 <_dtoa_r+0x2ae>
 8002552:	2b05      	cmp	r3, #5
 8002554:	bfc4      	itt	gt
 8002556:	3b04      	subgt	r3, #4
 8002558:	9305      	strgt	r3, [sp, #20]
 800255a:	9b05      	ldr	r3, [sp, #20]
 800255c:	f1a3 0302 	sub.w	r3, r3, #2
 8002560:	bfcc      	ite	gt
 8002562:	2500      	movgt	r5, #0
 8002564:	2501      	movle	r5, #1
 8002566:	2b03      	cmp	r3, #3
 8002568:	d869      	bhi.n	800263e <_dtoa_r+0x2c6>
 800256a:	e8df f003 	tbb	[pc, r3]
 800256e:	4e2c      	.short	0x4e2c
 8002570:	5a4c      	.short	0x5a4c
 8002572:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002576:	441d      	add	r5, r3
 8002578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800257c:	2b20      	cmp	r3, #32
 800257e:	bfc1      	itttt	gt
 8002580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002584:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002588:	fa09 f303 	lslgt.w	r3, r9, r3
 800258c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002590:	bfda      	itte	le
 8002592:	f1c3 0320 	rsble	r3, r3, #32
 8002596:	fa06 f003 	lslle.w	r0, r6, r3
 800259a:	4318      	orrgt	r0, r3
 800259c:	f7fd ffb2 	bl	8000504 <__aeabi_ui2d>
 80025a0:	2301      	movs	r3, #1
 80025a2:	4606      	mov	r6, r0
 80025a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80025a8:	3d01      	subs	r5, #1
 80025aa:	9310      	str	r3, [sp, #64]	; 0x40
 80025ac:	e771      	b.n	8002492 <_dtoa_r+0x11a>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e7b6      	b.n	8002520 <_dtoa_r+0x1a8>
 80025b2:	900e      	str	r0, [sp, #56]	; 0x38
 80025b4:	e7b5      	b.n	8002522 <_dtoa_r+0x1aa>
 80025b6:	f1ca 0300 	rsb	r3, sl, #0
 80025ba:	9306      	str	r3, [sp, #24]
 80025bc:	2300      	movs	r3, #0
 80025be:	eba8 080a 	sub.w	r8, r8, sl
 80025c2:	930d      	str	r3, [sp, #52]	; 0x34
 80025c4:	e7c2      	b.n	800254c <_dtoa_r+0x1d4>
 80025c6:	2300      	movs	r3, #0
 80025c8:	9308      	str	r3, [sp, #32]
 80025ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	dc39      	bgt.n	8002644 <_dtoa_r+0x2cc>
 80025d0:	f04f 0901 	mov.w	r9, #1
 80025d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80025d8:	464b      	mov	r3, r9
 80025da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80025de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80025e0:	2200      	movs	r2, #0
 80025e2:	6042      	str	r2, [r0, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	f102 0614 	add.w	r6, r2, #20
 80025ea:	429e      	cmp	r6, r3
 80025ec:	6841      	ldr	r1, [r0, #4]
 80025ee:	d92f      	bls.n	8002650 <_dtoa_r+0x2d8>
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fcc7 	bl	8002f84 <_Balloc>
 80025f6:	9000      	str	r0, [sp, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d14b      	bne.n	8002694 <_dtoa_r+0x31c>
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <_dtoa_r+0x318>)
 80025fe:	4602      	mov	r2, r0
 8002600:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002604:	e6d1      	b.n	80023aa <_dtoa_r+0x32>
 8002606:	2301      	movs	r3, #1
 8002608:	e7de      	b.n	80025c8 <_dtoa_r+0x250>
 800260a:	2300      	movs	r3, #0
 800260c:	9308      	str	r3, [sp, #32]
 800260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002610:	eb0a 0903 	add.w	r9, sl, r3
 8002614:	f109 0301 	add.w	r3, r9, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	bfb8      	it	lt
 800261e:	2301      	movlt	r3, #1
 8002620:	e7dd      	b.n	80025de <_dtoa_r+0x266>
 8002622:	2301      	movs	r3, #1
 8002624:	e7f2      	b.n	800260c <_dtoa_r+0x294>
 8002626:	2501      	movs	r5, #1
 8002628:	2300      	movs	r3, #0
 800262a:	9305      	str	r3, [sp, #20]
 800262c:	9508      	str	r5, [sp, #32]
 800262e:	f04f 39ff 	mov.w	r9, #4294967295
 8002632:	2200      	movs	r2, #0
 8002634:	f8cd 9004 	str.w	r9, [sp, #4]
 8002638:	2312      	movs	r3, #18
 800263a:	9209      	str	r2, [sp, #36]	; 0x24
 800263c:	e7cf      	b.n	80025de <_dtoa_r+0x266>
 800263e:	2301      	movs	r3, #1
 8002640:	9308      	str	r3, [sp, #32]
 8002642:	e7f4      	b.n	800262e <_dtoa_r+0x2b6>
 8002644:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8002648:	f8cd 9004 	str.w	r9, [sp, #4]
 800264c:	464b      	mov	r3, r9
 800264e:	e7c6      	b.n	80025de <_dtoa_r+0x266>
 8002650:	3101      	adds	r1, #1
 8002652:	6041      	str	r1, [r0, #4]
 8002654:	0052      	lsls	r2, r2, #1
 8002656:	e7c6      	b.n	80025e6 <_dtoa_r+0x26e>
 8002658:	636f4361 	.word	0x636f4361
 800265c:	3fd287a7 	.word	0x3fd287a7
 8002660:	8b60c8b3 	.word	0x8b60c8b3
 8002664:	3fc68a28 	.word	0x3fc68a28
 8002668:	509f79fb 	.word	0x509f79fb
 800266c:	3fd34413 	.word	0x3fd34413
 8002670:	080048f6 	.word	0x080048f6
 8002674:	0800490d 	.word	0x0800490d
 8002678:	7ff00000 	.word	0x7ff00000
 800267c:	080048f2 	.word	0x080048f2
 8002680:	080048e9 	.word	0x080048e9
 8002684:	080047c5 	.word	0x080047c5
 8002688:	3ff80000 	.word	0x3ff80000
 800268c:	08004a08 	.word	0x08004a08
 8002690:	0800496c 	.word	0x0800496c
 8002694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002696:	9a00      	ldr	r2, [sp, #0]
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	9b01      	ldr	r3, [sp, #4]
 800269c:	2b0e      	cmp	r3, #14
 800269e:	f200 80ad 	bhi.w	80027fc <_dtoa_r+0x484>
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	f000 80aa 	beq.w	80027fc <_dtoa_r+0x484>
 80026a8:	f1ba 0f00 	cmp.w	sl, #0
 80026ac:	dd36      	ble.n	800271c <_dtoa_r+0x3a4>
 80026ae:	4ac3      	ldr	r2, [pc, #780]	; (80029bc <_dtoa_r+0x644>)
 80026b0:	f00a 030f 	and.w	r3, sl, #15
 80026b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80026b8:	ed93 7b00 	vldr	d7, [r3]
 80026bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80026c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80026c4:	eeb0 8a47 	vmov.f32	s16, s14
 80026c8:	eef0 8a67 	vmov.f32	s17, s15
 80026cc:	d016      	beq.n	80026fc <_dtoa_r+0x384>
 80026ce:	4bbc      	ldr	r3, [pc, #752]	; (80029c0 <_dtoa_r+0x648>)
 80026d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80026d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026d8:	f7fe f8b8 	bl	800084c <__aeabi_ddiv>
 80026dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026e0:	f007 070f 	and.w	r7, r7, #15
 80026e4:	2503      	movs	r5, #3
 80026e6:	4eb6      	ldr	r6, [pc, #728]	; (80029c0 <_dtoa_r+0x648>)
 80026e8:	b957      	cbnz	r7, 8002700 <_dtoa_r+0x388>
 80026ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026ee:	ec53 2b18 	vmov	r2, r3, d8
 80026f2:	f7fe f8ab 	bl	800084c <__aeabi_ddiv>
 80026f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80026fa:	e029      	b.n	8002750 <_dtoa_r+0x3d8>
 80026fc:	2502      	movs	r5, #2
 80026fe:	e7f2      	b.n	80026e6 <_dtoa_r+0x36e>
 8002700:	07f9      	lsls	r1, r7, #31
 8002702:	d508      	bpl.n	8002716 <_dtoa_r+0x39e>
 8002704:	ec51 0b18 	vmov	r0, r1, d8
 8002708:	e9d6 2300 	ldrd	r2, r3, [r6]
 800270c:	f7fd ff74 	bl	80005f8 <__aeabi_dmul>
 8002710:	ec41 0b18 	vmov	d8, r0, r1
 8002714:	3501      	adds	r5, #1
 8002716:	107f      	asrs	r7, r7, #1
 8002718:	3608      	adds	r6, #8
 800271a:	e7e5      	b.n	80026e8 <_dtoa_r+0x370>
 800271c:	f000 80a6 	beq.w	800286c <_dtoa_r+0x4f4>
 8002720:	f1ca 0600 	rsb	r6, sl, #0
 8002724:	4ba5      	ldr	r3, [pc, #660]	; (80029bc <_dtoa_r+0x644>)
 8002726:	4fa6      	ldr	r7, [pc, #664]	; (80029c0 <_dtoa_r+0x648>)
 8002728:	f006 020f 	and.w	r2, r6, #15
 800272c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002738:	f7fd ff5e 	bl	80005f8 <__aeabi_dmul>
 800273c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002740:	1136      	asrs	r6, r6, #4
 8002742:	2300      	movs	r3, #0
 8002744:	2502      	movs	r5, #2
 8002746:	2e00      	cmp	r6, #0
 8002748:	f040 8085 	bne.w	8002856 <_dtoa_r+0x4de>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1d2      	bne.n	80026f6 <_dtoa_r+0x37e>
 8002750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 808c 	beq.w	8002870 <_dtoa_r+0x4f8>
 8002758:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800275c:	4b99      	ldr	r3, [pc, #612]	; (80029c4 <_dtoa_r+0x64c>)
 800275e:	2200      	movs	r2, #0
 8002760:	4630      	mov	r0, r6
 8002762:	4639      	mov	r1, r7
 8002764:	f7fe f9ba 	bl	8000adc <__aeabi_dcmplt>
 8002768:	2800      	cmp	r0, #0
 800276a:	f000 8081 	beq.w	8002870 <_dtoa_r+0x4f8>
 800276e:	9b01      	ldr	r3, [sp, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d07d      	beq.n	8002870 <_dtoa_r+0x4f8>
 8002774:	f1b9 0f00 	cmp.w	r9, #0
 8002778:	dd3c      	ble.n	80027f4 <_dtoa_r+0x47c>
 800277a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	2200      	movs	r2, #0
 8002782:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <_dtoa_r+0x650>)
 8002784:	4630      	mov	r0, r6
 8002786:	4639      	mov	r1, r7
 8002788:	f7fd ff36 	bl	80005f8 <__aeabi_dmul>
 800278c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002790:	3501      	adds	r5, #1
 8002792:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002796:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800279a:	4628      	mov	r0, r5
 800279c:	f7fd fec2 	bl	8000524 <__aeabi_i2d>
 80027a0:	4632      	mov	r2, r6
 80027a2:	463b      	mov	r3, r7
 80027a4:	f7fd ff28 	bl	80005f8 <__aeabi_dmul>
 80027a8:	4b88      	ldr	r3, [pc, #544]	; (80029cc <_dtoa_r+0x654>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	f7fd fd6e 	bl	800028c <__adddf3>
 80027b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80027b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80027b8:	9303      	str	r3, [sp, #12]
 80027ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d15c      	bne.n	800287a <_dtoa_r+0x502>
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <_dtoa_r+0x658>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	4630      	mov	r0, r6
 80027c6:	4639      	mov	r1, r7
 80027c8:	f7fd fd5e 	bl	8000288 <__aeabi_dsub>
 80027cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027d0:	4606      	mov	r6, r0
 80027d2:	460f      	mov	r7, r1
 80027d4:	f7fe f9a0 	bl	8000b18 <__aeabi_dcmpgt>
 80027d8:	2800      	cmp	r0, #0
 80027da:	f040 8296 	bne.w	8002d0a <_dtoa_r+0x992>
 80027de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80027e2:	4630      	mov	r0, r6
 80027e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80027e8:	4639      	mov	r1, r7
 80027ea:	f7fe f977 	bl	8000adc <__aeabi_dcmplt>
 80027ee:	2800      	cmp	r0, #0
 80027f0:	f040 8288 	bne.w	8002d04 <_dtoa_r+0x98c>
 80027f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80027f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f2c0 8158 	blt.w	8002ab4 <_dtoa_r+0x73c>
 8002804:	f1ba 0f0e 	cmp.w	sl, #14
 8002808:	f300 8154 	bgt.w	8002ab4 <_dtoa_r+0x73c>
 800280c:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <_dtoa_r+0x644>)
 800280e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002812:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	f280 80e3 	bge.w	80029e4 <_dtoa_r+0x66c>
 800281e:	9b01      	ldr	r3, [sp, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f300 80df 	bgt.w	80029e4 <_dtoa_r+0x66c>
 8002826:	f040 826d 	bne.w	8002d04 <_dtoa_r+0x98c>
 800282a:	4b69      	ldr	r3, [pc, #420]	; (80029d0 <_dtoa_r+0x658>)
 800282c:	2200      	movs	r2, #0
 800282e:	4640      	mov	r0, r8
 8002830:	4649      	mov	r1, r9
 8002832:	f7fd fee1 	bl	80005f8 <__aeabi_dmul>
 8002836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800283a:	f7fe f963 	bl	8000b04 <__aeabi_dcmpge>
 800283e:	9e01      	ldr	r6, [sp, #4]
 8002840:	4637      	mov	r7, r6
 8002842:	2800      	cmp	r0, #0
 8002844:	f040 8243 	bne.w	8002cce <_dtoa_r+0x956>
 8002848:	9d00      	ldr	r5, [sp, #0]
 800284a:	2331      	movs	r3, #49	; 0x31
 800284c:	f805 3b01 	strb.w	r3, [r5], #1
 8002850:	f10a 0a01 	add.w	sl, sl, #1
 8002854:	e23f      	b.n	8002cd6 <_dtoa_r+0x95e>
 8002856:	07f2      	lsls	r2, r6, #31
 8002858:	d505      	bpl.n	8002866 <_dtoa_r+0x4ee>
 800285a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285e:	f7fd fecb 	bl	80005f8 <__aeabi_dmul>
 8002862:	3501      	adds	r5, #1
 8002864:	2301      	movs	r3, #1
 8002866:	1076      	asrs	r6, r6, #1
 8002868:	3708      	adds	r7, #8
 800286a:	e76c      	b.n	8002746 <_dtoa_r+0x3ce>
 800286c:	2502      	movs	r5, #2
 800286e:	e76f      	b.n	8002750 <_dtoa_r+0x3d8>
 8002870:	9b01      	ldr	r3, [sp, #4]
 8002872:	f8cd a01c 	str.w	sl, [sp, #28]
 8002876:	930c      	str	r3, [sp, #48]	; 0x30
 8002878:	e78d      	b.n	8002796 <_dtoa_r+0x41e>
 800287a:	9900      	ldr	r1, [sp, #0]
 800287c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800287e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002880:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <_dtoa_r+0x644>)
 8002882:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002886:	4401      	add	r1, r0
 8002888:	9102      	str	r1, [sp, #8]
 800288a:	9908      	ldr	r1, [sp, #32]
 800288c:	eeb0 8a47 	vmov.f32	s16, s14
 8002890:	eef0 8a67 	vmov.f32	s17, s15
 8002894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002898:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800289c:	2900      	cmp	r1, #0
 800289e:	d045      	beq.n	800292c <_dtoa_r+0x5b4>
 80028a0:	494c      	ldr	r1, [pc, #304]	; (80029d4 <_dtoa_r+0x65c>)
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fd ffd2 	bl	800084c <__aeabi_ddiv>
 80028a8:	ec53 2b18 	vmov	r2, r3, d8
 80028ac:	f7fd fcec 	bl	8000288 <__aeabi_dsub>
 80028b0:	9d00      	ldr	r5, [sp, #0]
 80028b2:	ec41 0b18 	vmov	d8, r0, r1
 80028b6:	4639      	mov	r1, r7
 80028b8:	4630      	mov	r0, r6
 80028ba:	f7fe f94d 	bl	8000b58 <__aeabi_d2iz>
 80028be:	900c      	str	r0, [sp, #48]	; 0x30
 80028c0:	f7fd fe30 	bl	8000524 <__aeabi_i2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4630      	mov	r0, r6
 80028ca:	4639      	mov	r1, r7
 80028cc:	f7fd fcdc 	bl	8000288 <__aeabi_dsub>
 80028d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028d2:	3330      	adds	r3, #48	; 0x30
 80028d4:	f805 3b01 	strb.w	r3, [r5], #1
 80028d8:	ec53 2b18 	vmov	r2, r3, d8
 80028dc:	4606      	mov	r6, r0
 80028de:	460f      	mov	r7, r1
 80028e0:	f7fe f8fc 	bl	8000adc <__aeabi_dcmplt>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d165      	bne.n	80029b4 <_dtoa_r+0x63c>
 80028e8:	4632      	mov	r2, r6
 80028ea:	463b      	mov	r3, r7
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <_dtoa_r+0x64c>)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fd fcca 	bl	8000288 <__aeabi_dsub>
 80028f4:	ec53 2b18 	vmov	r2, r3, d8
 80028f8:	f7fe f8f0 	bl	8000adc <__aeabi_dcmplt>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f040 80b9 	bne.w	8002a74 <_dtoa_r+0x6fc>
 8002902:	9b02      	ldr	r3, [sp, #8]
 8002904:	429d      	cmp	r5, r3
 8002906:	f43f af75 	beq.w	80027f4 <_dtoa_r+0x47c>
 800290a:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <_dtoa_r+0x650>)
 800290c:	ec51 0b18 	vmov	r0, r1, d8
 8002910:	2200      	movs	r2, #0
 8002912:	f7fd fe71 	bl	80005f8 <__aeabi_dmul>
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <_dtoa_r+0x650>)
 8002918:	ec41 0b18 	vmov	d8, r0, r1
 800291c:	2200      	movs	r2, #0
 800291e:	4630      	mov	r0, r6
 8002920:	4639      	mov	r1, r7
 8002922:	f7fd fe69 	bl	80005f8 <__aeabi_dmul>
 8002926:	4606      	mov	r6, r0
 8002928:	460f      	mov	r7, r1
 800292a:	e7c4      	b.n	80028b6 <_dtoa_r+0x53e>
 800292c:	ec51 0b17 	vmov	r0, r1, d7
 8002930:	f7fd fe62 	bl	80005f8 <__aeabi_dmul>
 8002934:	9b02      	ldr	r3, [sp, #8]
 8002936:	9d00      	ldr	r5, [sp, #0]
 8002938:	930c      	str	r3, [sp, #48]	; 0x30
 800293a:	ec41 0b18 	vmov	d8, r0, r1
 800293e:	4639      	mov	r1, r7
 8002940:	4630      	mov	r0, r6
 8002942:	f7fe f909 	bl	8000b58 <__aeabi_d2iz>
 8002946:	9011      	str	r0, [sp, #68]	; 0x44
 8002948:	f7fd fdec 	bl	8000524 <__aeabi_i2d>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4630      	mov	r0, r6
 8002952:	4639      	mov	r1, r7
 8002954:	f7fd fc98 	bl	8000288 <__aeabi_dsub>
 8002958:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800295a:	3330      	adds	r3, #48	; 0x30
 800295c:	f805 3b01 	strb.w	r3, [r5], #1
 8002960:	9b02      	ldr	r3, [sp, #8]
 8002962:	429d      	cmp	r5, r3
 8002964:	4606      	mov	r6, r0
 8002966:	460f      	mov	r7, r1
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	d134      	bne.n	80029d8 <_dtoa_r+0x660>
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <_dtoa_r+0x65c>)
 8002970:	ec51 0b18 	vmov	r0, r1, d8
 8002974:	f7fd fc8a 	bl	800028c <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4630      	mov	r0, r6
 800297e:	4639      	mov	r1, r7
 8002980:	f7fe f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8002984:	2800      	cmp	r0, #0
 8002986:	d175      	bne.n	8002a74 <_dtoa_r+0x6fc>
 8002988:	ec53 2b18 	vmov	r2, r3, d8
 800298c:	4911      	ldr	r1, [pc, #68]	; (80029d4 <_dtoa_r+0x65c>)
 800298e:	2000      	movs	r0, #0
 8002990:	f7fd fc7a 	bl	8000288 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4630      	mov	r0, r6
 800299a:	4639      	mov	r1, r7
 800299c:	f7fe f89e 	bl	8000adc <__aeabi_dcmplt>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	f43f af27 	beq.w	80027f4 <_dtoa_r+0x47c>
 80029a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80029a8:	1e6b      	subs	r3, r5, #1
 80029aa:	930c      	str	r3, [sp, #48]	; 0x30
 80029ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d0f8      	beq.n	80029a6 <_dtoa_r+0x62e>
 80029b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80029b8:	e04a      	b.n	8002a50 <_dtoa_r+0x6d8>
 80029ba:	bf00      	nop
 80029bc:	08004a08 	.word	0x08004a08
 80029c0:	080049e0 	.word	0x080049e0
 80029c4:	3ff00000 	.word	0x3ff00000
 80029c8:	40240000 	.word	0x40240000
 80029cc:	401c0000 	.word	0x401c0000
 80029d0:	40140000 	.word	0x40140000
 80029d4:	3fe00000 	.word	0x3fe00000
 80029d8:	4baf      	ldr	r3, [pc, #700]	; (8002c98 <_dtoa_r+0x920>)
 80029da:	f7fd fe0d 	bl	80005f8 <__aeabi_dmul>
 80029de:	4606      	mov	r6, r0
 80029e0:	460f      	mov	r7, r1
 80029e2:	e7ac      	b.n	800293e <_dtoa_r+0x5c6>
 80029e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80029e8:	9d00      	ldr	r5, [sp, #0]
 80029ea:	4642      	mov	r2, r8
 80029ec:	464b      	mov	r3, r9
 80029ee:	4630      	mov	r0, r6
 80029f0:	4639      	mov	r1, r7
 80029f2:	f7fd ff2b 	bl	800084c <__aeabi_ddiv>
 80029f6:	f7fe f8af 	bl	8000b58 <__aeabi_d2iz>
 80029fa:	9002      	str	r0, [sp, #8]
 80029fc:	f7fd fd92 	bl	8000524 <__aeabi_i2d>
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	f7fd fdf8 	bl	80005f8 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	4639      	mov	r1, r7
 8002a10:	f7fd fc3a 	bl	8000288 <__aeabi_dsub>
 8002a14:	9e02      	ldr	r6, [sp, #8]
 8002a16:	9f01      	ldr	r7, [sp, #4]
 8002a18:	3630      	adds	r6, #48	; 0x30
 8002a1a:	f805 6b01 	strb.w	r6, [r5], #1
 8002a1e:	9e00      	ldr	r6, [sp, #0]
 8002a20:	1bae      	subs	r6, r5, r6
 8002a22:	42b7      	cmp	r7, r6
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	d137      	bne.n	8002a9a <_dtoa_r+0x722>
 8002a2a:	f7fd fc2f 	bl	800028c <__adddf3>
 8002a2e:	4642      	mov	r2, r8
 8002a30:	464b      	mov	r3, r9
 8002a32:	4606      	mov	r6, r0
 8002a34:	460f      	mov	r7, r1
 8002a36:	f7fe f86f 	bl	8000b18 <__aeabi_dcmpgt>
 8002a3a:	b9c8      	cbnz	r0, 8002a70 <_dtoa_r+0x6f8>
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	4630      	mov	r0, r6
 8002a42:	4639      	mov	r1, r7
 8002a44:	f7fe f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a48:	b110      	cbz	r0, 8002a50 <_dtoa_r+0x6d8>
 8002a4a:	9b02      	ldr	r3, [sp, #8]
 8002a4c:	07d9      	lsls	r1, r3, #31
 8002a4e:	d40f      	bmi.n	8002a70 <_dtoa_r+0x6f8>
 8002a50:	4620      	mov	r0, r4
 8002a52:	4659      	mov	r1, fp
 8002a54:	f000 fad6 	bl	8003004 <_Bfree>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	702b      	strb	r3, [r5, #0]
 8002a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a5e:	f10a 0001 	add.w	r0, sl, #1
 8002a62:	6018      	str	r0, [r3, #0]
 8002a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f43f acd8 	beq.w	800241c <_dtoa_r+0xa4>
 8002a6c:	601d      	str	r5, [r3, #0]
 8002a6e:	e4d5      	b.n	800241c <_dtoa_r+0xa4>
 8002a70:	f8cd a01c 	str.w	sl, [sp, #28]
 8002a74:	462b      	mov	r3, r5
 8002a76:	461d      	mov	r5, r3
 8002a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002a7c:	2a39      	cmp	r2, #57	; 0x39
 8002a7e:	d108      	bne.n	8002a92 <_dtoa_r+0x71a>
 8002a80:	9a00      	ldr	r2, [sp, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d1f7      	bne.n	8002a76 <_dtoa_r+0x6fe>
 8002a86:	9a07      	ldr	r2, [sp, #28]
 8002a88:	9900      	ldr	r1, [sp, #0]
 8002a8a:	3201      	adds	r2, #1
 8002a8c:	9207      	str	r2, [sp, #28]
 8002a8e:	2230      	movs	r2, #48	; 0x30
 8002a90:	700a      	strb	r2, [r1, #0]
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	3201      	adds	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e78c      	b.n	80029b4 <_dtoa_r+0x63c>
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <_dtoa_r+0x920>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f7fd fdab 	bl	80005f8 <__aeabi_dmul>
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	460f      	mov	r7, r1
 8002aaa:	f7fe f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d09b      	beq.n	80029ea <_dtoa_r+0x672>
 8002ab2:	e7cd      	b.n	8002a50 <_dtoa_r+0x6d8>
 8002ab4:	9a08      	ldr	r2, [sp, #32]
 8002ab6:	2a00      	cmp	r2, #0
 8002ab8:	f000 80c4 	beq.w	8002c44 <_dtoa_r+0x8cc>
 8002abc:	9a05      	ldr	r2, [sp, #20]
 8002abe:	2a01      	cmp	r2, #1
 8002ac0:	f300 80a8 	bgt.w	8002c14 <_dtoa_r+0x89c>
 8002ac4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002ac6:	2a00      	cmp	r2, #0
 8002ac8:	f000 80a0 	beq.w	8002c0c <_dtoa_r+0x894>
 8002acc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8002ad0:	9e06      	ldr	r6, [sp, #24]
 8002ad2:	4645      	mov	r5, r8
 8002ad4:	9a04      	ldr	r2, [sp, #16]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	441a      	add	r2, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	4498      	add	r8, r3
 8002ade:	9204      	str	r2, [sp, #16]
 8002ae0:	f000 fb4c 	bl	800317c <__i2b>
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	dd0b      	ble.n	8002b02 <_dtoa_r+0x78a>
 8002aea:	9b04      	ldr	r3, [sp, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	dd08      	ble.n	8002b02 <_dtoa_r+0x78a>
 8002af0:	42ab      	cmp	r3, r5
 8002af2:	9a04      	ldr	r2, [sp, #16]
 8002af4:	bfa8      	it	ge
 8002af6:	462b      	movge	r3, r5
 8002af8:	eba8 0803 	sub.w	r8, r8, r3
 8002afc:	1aed      	subs	r5, r5, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	9304      	str	r3, [sp, #16]
 8002b02:	9b06      	ldr	r3, [sp, #24]
 8002b04:	b1fb      	cbz	r3, 8002b46 <_dtoa_r+0x7ce>
 8002b06:	9b08      	ldr	r3, [sp, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 809f 	beq.w	8002c4c <_dtoa_r+0x8d4>
 8002b0e:	2e00      	cmp	r6, #0
 8002b10:	dd11      	ble.n	8002b36 <_dtoa_r+0x7be>
 8002b12:	4639      	mov	r1, r7
 8002b14:	4632      	mov	r2, r6
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 fbec 	bl	80032f4 <__pow5mult>
 8002b1c:	465a      	mov	r2, fp
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4607      	mov	r7, r0
 8002b22:	4620      	mov	r0, r4
 8002b24:	f000 fb40 	bl	80031a8 <__multiply>
 8002b28:	4659      	mov	r1, fp
 8002b2a:	9007      	str	r0, [sp, #28]
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 fa69 	bl	8003004 <_Bfree>
 8002b32:	9b07      	ldr	r3, [sp, #28]
 8002b34:	469b      	mov	fp, r3
 8002b36:	9b06      	ldr	r3, [sp, #24]
 8002b38:	1b9a      	subs	r2, r3, r6
 8002b3a:	d004      	beq.n	8002b46 <_dtoa_r+0x7ce>
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f000 fbd8 	bl	80032f4 <__pow5mult>
 8002b44:	4683      	mov	fp, r0
 8002b46:	2101      	movs	r1, #1
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f000 fb17 	bl	800317c <__i2b>
 8002b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	4606      	mov	r6, r0
 8002b54:	dd7c      	ble.n	8002c50 <_dtoa_r+0x8d8>
 8002b56:	461a      	mov	r2, r3
 8002b58:	4601      	mov	r1, r0
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f000 fbca 	bl	80032f4 <__pow5mult>
 8002b60:	9b05      	ldr	r3, [sp, #20]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	4606      	mov	r6, r0
 8002b66:	dd76      	ble.n	8002c56 <_dtoa_r+0x8de>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9306      	str	r3, [sp, #24]
 8002b6c:	6933      	ldr	r3, [r6, #16]
 8002b6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002b72:	6918      	ldr	r0, [r3, #16]
 8002b74:	f000 fab2 	bl	80030dc <__hi0bits>
 8002b78:	f1c0 0020 	rsb	r0, r0, #32
 8002b7c:	9b04      	ldr	r3, [sp, #16]
 8002b7e:	4418      	add	r0, r3
 8002b80:	f010 001f 	ands.w	r0, r0, #31
 8002b84:	f000 8086 	beq.w	8002c94 <_dtoa_r+0x91c>
 8002b88:	f1c0 0320 	rsb	r3, r0, #32
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	dd7f      	ble.n	8002c90 <_dtoa_r+0x918>
 8002b90:	f1c0 001c 	rsb	r0, r0, #28
 8002b94:	9b04      	ldr	r3, [sp, #16]
 8002b96:	4403      	add	r3, r0
 8002b98:	4480      	add	r8, r0
 8002b9a:	4405      	add	r5, r0
 8002b9c:	9304      	str	r3, [sp, #16]
 8002b9e:	f1b8 0f00 	cmp.w	r8, #0
 8002ba2:	dd05      	ble.n	8002bb0 <_dtoa_r+0x838>
 8002ba4:	4659      	mov	r1, fp
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 fbfd 	bl	80033a8 <__lshift>
 8002bae:	4683      	mov	fp, r0
 8002bb0:	9b04      	ldr	r3, [sp, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	dd05      	ble.n	8002bc2 <_dtoa_r+0x84a>
 8002bb6:	4631      	mov	r1, r6
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f000 fbf4 	bl	80033a8 <__lshift>
 8002bc0:	4606      	mov	r6, r0
 8002bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d069      	beq.n	8002c9c <_dtoa_r+0x924>
 8002bc8:	4631      	mov	r1, r6
 8002bca:	4658      	mov	r0, fp
 8002bcc:	f000 fc58 	bl	8003480 <__mcmp>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	da63      	bge.n	8002c9c <_dtoa_r+0x924>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	220a      	movs	r2, #10
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f000 fa34 	bl	8003048 <__multadd>
 8002be0:	9b08      	ldr	r3, [sp, #32]
 8002be2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002be6:	4683      	mov	fp, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 818f 	beq.w	8002f0c <_dtoa_r+0xb94>
 8002bee:	4639      	mov	r1, r7
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f000 fa27 	bl	8003048 <__multadd>
 8002bfa:	f1b9 0f00 	cmp.w	r9, #0
 8002bfe:	4607      	mov	r7, r0
 8002c00:	f300 808e 	bgt.w	8002d20 <_dtoa_r+0x9a8>
 8002c04:	9b05      	ldr	r3, [sp, #20]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	dc50      	bgt.n	8002cac <_dtoa_r+0x934>
 8002c0a:	e089      	b.n	8002d20 <_dtoa_r+0x9a8>
 8002c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8002c12:	e75d      	b.n	8002ad0 <_dtoa_r+0x758>
 8002c14:	9b01      	ldr	r3, [sp, #4]
 8002c16:	1e5e      	subs	r6, r3, #1
 8002c18:	9b06      	ldr	r3, [sp, #24]
 8002c1a:	42b3      	cmp	r3, r6
 8002c1c:	bfbf      	itttt	lt
 8002c1e:	9b06      	ldrlt	r3, [sp, #24]
 8002c20:	9606      	strlt	r6, [sp, #24]
 8002c22:	1af2      	sublt	r2, r6, r3
 8002c24:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8002c26:	bfb6      	itet	lt
 8002c28:	189b      	addlt	r3, r3, r2
 8002c2a:	1b9e      	subge	r6, r3, r6
 8002c2c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8002c2e:	9b01      	ldr	r3, [sp, #4]
 8002c30:	bfb8      	it	lt
 8002c32:	2600      	movlt	r6, #0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bfb5      	itete	lt
 8002c38:	eba8 0503 	sublt.w	r5, r8, r3
 8002c3c:	9b01      	ldrge	r3, [sp, #4]
 8002c3e:	2300      	movlt	r3, #0
 8002c40:	4645      	movge	r5, r8
 8002c42:	e747      	b.n	8002ad4 <_dtoa_r+0x75c>
 8002c44:	9e06      	ldr	r6, [sp, #24]
 8002c46:	9f08      	ldr	r7, [sp, #32]
 8002c48:	4645      	mov	r5, r8
 8002c4a:	e74c      	b.n	8002ae6 <_dtoa_r+0x76e>
 8002c4c:	9a06      	ldr	r2, [sp, #24]
 8002c4e:	e775      	b.n	8002b3c <_dtoa_r+0x7c4>
 8002c50:	9b05      	ldr	r3, [sp, #20]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	dc18      	bgt.n	8002c88 <_dtoa_r+0x910>
 8002c56:	9b02      	ldr	r3, [sp, #8]
 8002c58:	b9b3      	cbnz	r3, 8002c88 <_dtoa_r+0x910>
 8002c5a:	9b03      	ldr	r3, [sp, #12]
 8002c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c60:	b9a3      	cbnz	r3, 8002c8c <_dtoa_r+0x914>
 8002c62:	9b03      	ldr	r3, [sp, #12]
 8002c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	b12b      	cbz	r3, 8002c7a <_dtoa_r+0x902>
 8002c6e:	9b04      	ldr	r3, [sp, #16]
 8002c70:	3301      	adds	r3, #1
 8002c72:	9304      	str	r3, [sp, #16]
 8002c74:	f108 0801 	add.w	r8, r8, #1
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9306      	str	r3, [sp, #24]
 8002c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f af74 	bne.w	8002b6c <_dtoa_r+0x7f4>
 8002c84:	2001      	movs	r0, #1
 8002c86:	e779      	b.n	8002b7c <_dtoa_r+0x804>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e7f6      	b.n	8002c7a <_dtoa_r+0x902>
 8002c8c:	9b02      	ldr	r3, [sp, #8]
 8002c8e:	e7f4      	b.n	8002c7a <_dtoa_r+0x902>
 8002c90:	d085      	beq.n	8002b9e <_dtoa_r+0x826>
 8002c92:	4618      	mov	r0, r3
 8002c94:	301c      	adds	r0, #28
 8002c96:	e77d      	b.n	8002b94 <_dtoa_r+0x81c>
 8002c98:	40240000 	.word	0x40240000
 8002c9c:	9b01      	ldr	r3, [sp, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dc38      	bgt.n	8002d14 <_dtoa_r+0x99c>
 8002ca2:	9b05      	ldr	r3, [sp, #20]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	dd35      	ble.n	8002d14 <_dtoa_r+0x99c>
 8002ca8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002cac:	f1b9 0f00 	cmp.w	r9, #0
 8002cb0:	d10d      	bne.n	8002cce <_dtoa_r+0x956>
 8002cb2:	4631      	mov	r1, r6
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f000 f9c5 	bl	8003048 <__multadd>
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	4658      	mov	r0, fp
 8002cc4:	f000 fbdc 	bl	8003480 <__mcmp>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	f73f adbd 	bgt.w	8002848 <_dtoa_r+0x4d0>
 8002cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cd0:	9d00      	ldr	r5, [sp, #0]
 8002cd2:	ea6f 0a03 	mvn.w	sl, r3
 8002cd6:	f04f 0800 	mov.w	r8, #0
 8002cda:	4631      	mov	r1, r6
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f000 f991 	bl	8003004 <_Bfree>
 8002ce2:	2f00      	cmp	r7, #0
 8002ce4:	f43f aeb4 	beq.w	8002a50 <_dtoa_r+0x6d8>
 8002ce8:	f1b8 0f00 	cmp.w	r8, #0
 8002cec:	d005      	beq.n	8002cfa <_dtoa_r+0x982>
 8002cee:	45b8      	cmp	r8, r7
 8002cf0:	d003      	beq.n	8002cfa <_dtoa_r+0x982>
 8002cf2:	4641      	mov	r1, r8
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 f985 	bl	8003004 <_Bfree>
 8002cfa:	4639      	mov	r1, r7
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 f981 	bl	8003004 <_Bfree>
 8002d02:	e6a5      	b.n	8002a50 <_dtoa_r+0x6d8>
 8002d04:	2600      	movs	r6, #0
 8002d06:	4637      	mov	r7, r6
 8002d08:	e7e1      	b.n	8002cce <_dtoa_r+0x956>
 8002d0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002d0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8002d10:	4637      	mov	r7, r6
 8002d12:	e599      	b.n	8002848 <_dtoa_r+0x4d0>
 8002d14:	9b08      	ldr	r3, [sp, #32]
 8002d16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80fd 	beq.w	8002f1a <_dtoa_r+0xba2>
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	dd05      	ble.n	8002d30 <_dtoa_r+0x9b8>
 8002d24:	4639      	mov	r1, r7
 8002d26:	462a      	mov	r2, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f000 fb3d 	bl	80033a8 <__lshift>
 8002d2e:	4607      	mov	r7, r0
 8002d30:	9b06      	ldr	r3, [sp, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d05c      	beq.n	8002df0 <_dtoa_r+0xa78>
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f000 f923 	bl	8002f84 <_Balloc>
 8002d3e:	4605      	mov	r5, r0
 8002d40:	b928      	cbnz	r0, 8002d4e <_dtoa_r+0x9d6>
 8002d42:	4b80      	ldr	r3, [pc, #512]	; (8002f44 <_dtoa_r+0xbcc>)
 8002d44:	4602      	mov	r2, r0
 8002d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8002d4a:	f7ff bb2e 	b.w	80023aa <_dtoa_r+0x32>
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	3202      	adds	r2, #2
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	f107 010c 	add.w	r1, r7, #12
 8002d58:	300c      	adds	r0, #12
 8002d5a:	f000 f905 	bl	8002f68 <memcpy>
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4629      	mov	r1, r5
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fb20 	bl	80033a8 <__lshift>
 8002d68:	9b00      	ldr	r3, [sp, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	9b00      	ldr	r3, [sp, #0]
 8002d70:	444b      	add	r3, r9
 8002d72:	9307      	str	r3, [sp, #28]
 8002d74:	9b02      	ldr	r3, [sp, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	46b8      	mov	r8, r7
 8002d7c:	9306      	str	r3, [sp, #24]
 8002d7e:	4607      	mov	r7, r0
 8002d80:	9b01      	ldr	r3, [sp, #4]
 8002d82:	4631      	mov	r1, r6
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4658      	mov	r0, fp
 8002d88:	9302      	str	r3, [sp, #8]
 8002d8a:	f7ff fa67 	bl	800225c <quorem>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	3330      	adds	r3, #48	; 0x30
 8002d92:	9004      	str	r0, [sp, #16]
 8002d94:	4641      	mov	r1, r8
 8002d96:	4658      	mov	r0, fp
 8002d98:	9308      	str	r3, [sp, #32]
 8002d9a:	f000 fb71 	bl	8003480 <__mcmp>
 8002d9e:	463a      	mov	r2, r7
 8002da0:	4681      	mov	r9, r0
 8002da2:	4631      	mov	r1, r6
 8002da4:	4620      	mov	r0, r4
 8002da6:	f000 fb87 	bl	80034b8 <__mdiff>
 8002daa:	68c2      	ldr	r2, [r0, #12]
 8002dac:	9b08      	ldr	r3, [sp, #32]
 8002dae:	4605      	mov	r5, r0
 8002db0:	bb02      	cbnz	r2, 8002df4 <_dtoa_r+0xa7c>
 8002db2:	4601      	mov	r1, r0
 8002db4:	4658      	mov	r0, fp
 8002db6:	f000 fb63 	bl	8003480 <__mcmp>
 8002dba:	9b08      	ldr	r3, [sp, #32]
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8002dc6:	f000 f91d 	bl	8003004 <_Bfree>
 8002dca:	9b05      	ldr	r3, [sp, #20]
 8002dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dce:	9d01      	ldr	r5, [sp, #4]
 8002dd0:	ea43 0102 	orr.w	r1, r3, r2
 8002dd4:	9b06      	ldr	r3, [sp, #24]
 8002dd6:	430b      	orrs	r3, r1
 8002dd8:	9b08      	ldr	r3, [sp, #32]
 8002dda:	d10d      	bne.n	8002df8 <_dtoa_r+0xa80>
 8002ddc:	2b39      	cmp	r3, #57	; 0x39
 8002dde:	d029      	beq.n	8002e34 <_dtoa_r+0xabc>
 8002de0:	f1b9 0f00 	cmp.w	r9, #0
 8002de4:	dd01      	ble.n	8002dea <_dtoa_r+0xa72>
 8002de6:	9b04      	ldr	r3, [sp, #16]
 8002de8:	3331      	adds	r3, #49	; 0x31
 8002dea:	9a02      	ldr	r2, [sp, #8]
 8002dec:	7013      	strb	r3, [r2, #0]
 8002dee:	e774      	b.n	8002cda <_dtoa_r+0x962>
 8002df0:	4638      	mov	r0, r7
 8002df2:	e7b9      	b.n	8002d68 <_dtoa_r+0x9f0>
 8002df4:	2201      	movs	r2, #1
 8002df6:	e7e2      	b.n	8002dbe <_dtoa_r+0xa46>
 8002df8:	f1b9 0f00 	cmp.w	r9, #0
 8002dfc:	db06      	blt.n	8002e0c <_dtoa_r+0xa94>
 8002dfe:	9905      	ldr	r1, [sp, #20]
 8002e00:	ea41 0909 	orr.w	r9, r1, r9
 8002e04:	9906      	ldr	r1, [sp, #24]
 8002e06:	ea59 0101 	orrs.w	r1, r9, r1
 8002e0a:	d120      	bne.n	8002e4e <_dtoa_r+0xad6>
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	ddec      	ble.n	8002dea <_dtoa_r+0xa72>
 8002e10:	4659      	mov	r1, fp
 8002e12:	2201      	movs	r2, #1
 8002e14:	4620      	mov	r0, r4
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	f000 fac6 	bl	80033a8 <__lshift>
 8002e1c:	4631      	mov	r1, r6
 8002e1e:	4683      	mov	fp, r0
 8002e20:	f000 fb2e 	bl	8003480 <__mcmp>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	9b01      	ldr	r3, [sp, #4]
 8002e28:	dc02      	bgt.n	8002e30 <_dtoa_r+0xab8>
 8002e2a:	d1de      	bne.n	8002dea <_dtoa_r+0xa72>
 8002e2c:	07da      	lsls	r2, r3, #31
 8002e2e:	d5dc      	bpl.n	8002dea <_dtoa_r+0xa72>
 8002e30:	2b39      	cmp	r3, #57	; 0x39
 8002e32:	d1d8      	bne.n	8002de6 <_dtoa_r+0xa6e>
 8002e34:	9a02      	ldr	r2, [sp, #8]
 8002e36:	2339      	movs	r3, #57	; 0x39
 8002e38:	7013      	strb	r3, [r2, #0]
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	461d      	mov	r5, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8002e44:	2a39      	cmp	r2, #57	; 0x39
 8002e46:	d050      	beq.n	8002eea <_dtoa_r+0xb72>
 8002e48:	3201      	adds	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
 8002e4c:	e745      	b.n	8002cda <_dtoa_r+0x962>
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	dd03      	ble.n	8002e5a <_dtoa_r+0xae2>
 8002e52:	2b39      	cmp	r3, #57	; 0x39
 8002e54:	d0ee      	beq.n	8002e34 <_dtoa_r+0xabc>
 8002e56:	3301      	adds	r3, #1
 8002e58:	e7c7      	b.n	8002dea <_dtoa_r+0xa72>
 8002e5a:	9a01      	ldr	r2, [sp, #4]
 8002e5c:	9907      	ldr	r1, [sp, #28]
 8002e5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002e62:	428a      	cmp	r2, r1
 8002e64:	d02a      	beq.n	8002ebc <_dtoa_r+0xb44>
 8002e66:	4659      	mov	r1, fp
 8002e68:	2300      	movs	r3, #0
 8002e6a:	220a      	movs	r2, #10
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 f8eb 	bl	8003048 <__multadd>
 8002e72:	45b8      	cmp	r8, r7
 8002e74:	4683      	mov	fp, r0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 020a 	mov.w	r2, #10
 8002e7e:	4641      	mov	r1, r8
 8002e80:	4620      	mov	r0, r4
 8002e82:	d107      	bne.n	8002e94 <_dtoa_r+0xb1c>
 8002e84:	f000 f8e0 	bl	8003048 <__multadd>
 8002e88:	4680      	mov	r8, r0
 8002e8a:	4607      	mov	r7, r0
 8002e8c:	9b01      	ldr	r3, [sp, #4]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	e775      	b.n	8002d80 <_dtoa_r+0xa08>
 8002e94:	f000 f8d8 	bl	8003048 <__multadd>
 8002e98:	4639      	mov	r1, r7
 8002e9a:	4680      	mov	r8, r0
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f000 f8d1 	bl	8003048 <__multadd>
 8002ea6:	4607      	mov	r7, r0
 8002ea8:	e7f0      	b.n	8002e8c <_dtoa_r+0xb14>
 8002eaa:	f1b9 0f00 	cmp.w	r9, #0
 8002eae:	9a00      	ldr	r2, [sp, #0]
 8002eb0:	bfcc      	ite	gt
 8002eb2:	464d      	movgt	r5, r9
 8002eb4:	2501      	movle	r5, #1
 8002eb6:	4415      	add	r5, r2
 8002eb8:	f04f 0800 	mov.w	r8, #0
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	f000 fa70 	bl	80033a8 <__lshift>
 8002ec8:	4631      	mov	r1, r6
 8002eca:	4683      	mov	fp, r0
 8002ecc:	f000 fad8 	bl	8003480 <__mcmp>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	dcb2      	bgt.n	8002e3a <_dtoa_r+0xac2>
 8002ed4:	d102      	bne.n	8002edc <_dtoa_r+0xb64>
 8002ed6:	9b01      	ldr	r3, [sp, #4]
 8002ed8:	07db      	lsls	r3, r3, #31
 8002eda:	d4ae      	bmi.n	8002e3a <_dtoa_r+0xac2>
 8002edc:	462b      	mov	r3, r5
 8002ede:	461d      	mov	r5, r3
 8002ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002ee4:	2a30      	cmp	r2, #48	; 0x30
 8002ee6:	d0fa      	beq.n	8002ede <_dtoa_r+0xb66>
 8002ee8:	e6f7      	b.n	8002cda <_dtoa_r+0x962>
 8002eea:	9a00      	ldr	r2, [sp, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1a5      	bne.n	8002e3c <_dtoa_r+0xac4>
 8002ef0:	f10a 0a01 	add.w	sl, sl, #1
 8002ef4:	2331      	movs	r3, #49	; 0x31
 8002ef6:	e779      	b.n	8002dec <_dtoa_r+0xa74>
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <_dtoa_r+0xbd0>)
 8002efa:	f7ff baaf 	b.w	800245c <_dtoa_r+0xe4>
 8002efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f aa86 	bne.w	8002412 <_dtoa_r+0x9a>
 8002f06:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <_dtoa_r+0xbd4>)
 8002f08:	f7ff baa8 	b.w	800245c <_dtoa_r+0xe4>
 8002f0c:	f1b9 0f00 	cmp.w	r9, #0
 8002f10:	dc03      	bgt.n	8002f1a <_dtoa_r+0xba2>
 8002f12:	9b05      	ldr	r3, [sp, #20]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f73f aec9 	bgt.w	8002cac <_dtoa_r+0x934>
 8002f1a:	9d00      	ldr	r5, [sp, #0]
 8002f1c:	4631      	mov	r1, r6
 8002f1e:	4658      	mov	r0, fp
 8002f20:	f7ff f99c 	bl	800225c <quorem>
 8002f24:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8002f28:	f805 3b01 	strb.w	r3, [r5], #1
 8002f2c:	9a00      	ldr	r2, [sp, #0]
 8002f2e:	1aaa      	subs	r2, r5, r2
 8002f30:	4591      	cmp	r9, r2
 8002f32:	ddba      	ble.n	8002eaa <_dtoa_r+0xb32>
 8002f34:	4659      	mov	r1, fp
 8002f36:	2300      	movs	r3, #0
 8002f38:	220a      	movs	r2, #10
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f000 f884 	bl	8003048 <__multadd>
 8002f40:	4683      	mov	fp, r0
 8002f42:	e7eb      	b.n	8002f1c <_dtoa_r+0xba4>
 8002f44:	0800496c 	.word	0x0800496c
 8002f48:	080047c4 	.word	0x080047c4
 8002f4c:	080048e9 	.word	0x080048e9

08002f50 <_localeconv_r>:
 8002f50:	4800      	ldr	r0, [pc, #0]	; (8002f54 <_localeconv_r+0x4>)
 8002f52:	4770      	bx	lr
 8002f54:	20000160 	.word	0x20000160

08002f58 <malloc>:
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <malloc+0xc>)
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	f000 bbef 	b.w	8003740 <_malloc_r>
 8002f62:	bf00      	nop
 8002f64:	2000000c 	.word	0x2000000c

08002f68 <memcpy>:
 8002f68:	440a      	add	r2, r1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f70:	d100      	bne.n	8002f74 <memcpy+0xc>
 8002f72:	4770      	bx	lr
 8002f74:	b510      	push	{r4, lr}
 8002f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7e:	4291      	cmp	r1, r2
 8002f80:	d1f9      	bne.n	8002f76 <memcpy+0xe>
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <_Balloc>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002f88:	4604      	mov	r4, r0
 8002f8a:	460d      	mov	r5, r1
 8002f8c:	b976      	cbnz	r6, 8002fac <_Balloc+0x28>
 8002f8e:	2010      	movs	r0, #16
 8002f90:	f7ff ffe2 	bl	8002f58 <malloc>
 8002f94:	4602      	mov	r2, r0
 8002f96:	6260      	str	r0, [r4, #36]	; 0x24
 8002f98:	b920      	cbnz	r0, 8002fa4 <_Balloc+0x20>
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <_Balloc+0x78>)
 8002f9c:	4818      	ldr	r0, [pc, #96]	; (8003000 <_Balloc+0x7c>)
 8002f9e:	2166      	movs	r1, #102	; 0x66
 8002fa0:	f000 fd94 	bl	8003acc <__assert_func>
 8002fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8002fa8:	6006      	str	r6, [r0, #0]
 8002faa:	60c6      	str	r6, [r0, #12]
 8002fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002fae:	68f3      	ldr	r3, [r6, #12]
 8002fb0:	b183      	cbz	r3, 8002fd4 <_Balloc+0x50>
 8002fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002fba:	b9b8      	cbnz	r0, 8002fec <_Balloc+0x68>
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8002fc2:	1d72      	adds	r2, r6, #5
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f000 fb5a 	bl	8003680 <_calloc_r>
 8002fcc:	b160      	cbz	r0, 8002fe8 <_Balloc+0x64>
 8002fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8002fd2:	e00e      	b.n	8002ff2 <_Balloc+0x6e>
 8002fd4:	2221      	movs	r2, #33	; 0x21
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 fb51 	bl	8003680 <_calloc_r>
 8002fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fe0:	60f0      	str	r0, [r6, #12]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e4      	bne.n	8002fb2 <_Balloc+0x2e>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	6802      	ldr	r2, [r0, #0]
 8002fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002ff8:	e7f7      	b.n	8002fea <_Balloc+0x66>
 8002ffa:	bf00      	nop
 8002ffc:	080048f6 	.word	0x080048f6
 8003000:	0800497d 	.word	0x0800497d

08003004 <_Bfree>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003008:	4605      	mov	r5, r0
 800300a:	460c      	mov	r4, r1
 800300c:	b976      	cbnz	r6, 800302c <_Bfree+0x28>
 800300e:	2010      	movs	r0, #16
 8003010:	f7ff ffa2 	bl	8002f58 <malloc>
 8003014:	4602      	mov	r2, r0
 8003016:	6268      	str	r0, [r5, #36]	; 0x24
 8003018:	b920      	cbnz	r0, 8003024 <_Bfree+0x20>
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <_Bfree+0x3c>)
 800301c:	4809      	ldr	r0, [pc, #36]	; (8003044 <_Bfree+0x40>)
 800301e:	218a      	movs	r1, #138	; 0x8a
 8003020:	f000 fd54 	bl	8003acc <__assert_func>
 8003024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003028:	6006      	str	r6, [r0, #0]
 800302a:	60c6      	str	r6, [r0, #12]
 800302c:	b13c      	cbz	r4, 800303e <_Bfree+0x3a>
 800302e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003030:	6862      	ldr	r2, [r4, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003038:	6021      	str	r1, [r4, #0]
 800303a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	080048f6 	.word	0x080048f6
 8003044:	0800497d 	.word	0x0800497d

08003048 <__multadd>:
 8003048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304c:	690e      	ldr	r6, [r1, #16]
 800304e:	4607      	mov	r7, r0
 8003050:	4698      	mov	r8, r3
 8003052:	460c      	mov	r4, r1
 8003054:	f101 0014 	add.w	r0, r1, #20
 8003058:	2300      	movs	r3, #0
 800305a:	6805      	ldr	r5, [r0, #0]
 800305c:	b2a9      	uxth	r1, r5
 800305e:	fb02 8101 	mla	r1, r2, r1, r8
 8003062:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003066:	0c2d      	lsrs	r5, r5, #16
 8003068:	fb02 c505 	mla	r5, r2, r5, ip
 800306c:	b289      	uxth	r1, r1
 800306e:	3301      	adds	r3, #1
 8003070:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003074:	429e      	cmp	r6, r3
 8003076:	f840 1b04 	str.w	r1, [r0], #4
 800307a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800307e:	dcec      	bgt.n	800305a <__multadd+0x12>
 8003080:	f1b8 0f00 	cmp.w	r8, #0
 8003084:	d022      	beq.n	80030cc <__multadd+0x84>
 8003086:	68a3      	ldr	r3, [r4, #8]
 8003088:	42b3      	cmp	r3, r6
 800308a:	dc19      	bgt.n	80030c0 <__multadd+0x78>
 800308c:	6861      	ldr	r1, [r4, #4]
 800308e:	4638      	mov	r0, r7
 8003090:	3101      	adds	r1, #1
 8003092:	f7ff ff77 	bl	8002f84 <_Balloc>
 8003096:	4605      	mov	r5, r0
 8003098:	b928      	cbnz	r0, 80030a6 <__multadd+0x5e>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <__multadd+0x8c>)
 800309e:	480e      	ldr	r0, [pc, #56]	; (80030d8 <__multadd+0x90>)
 80030a0:	21b5      	movs	r1, #181	; 0xb5
 80030a2:	f000 fd13 	bl	8003acc <__assert_func>
 80030a6:	6922      	ldr	r2, [r4, #16]
 80030a8:	3202      	adds	r2, #2
 80030aa:	f104 010c 	add.w	r1, r4, #12
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	300c      	adds	r0, #12
 80030b2:	f7ff ff59 	bl	8002f68 <memcpy>
 80030b6:	4621      	mov	r1, r4
 80030b8:	4638      	mov	r0, r7
 80030ba:	f7ff ffa3 	bl	8003004 <_Bfree>
 80030be:	462c      	mov	r4, r5
 80030c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80030c4:	3601      	adds	r6, #1
 80030c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80030ca:	6126      	str	r6, [r4, #16]
 80030cc:	4620      	mov	r0, r4
 80030ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030d2:	bf00      	nop
 80030d4:	0800496c 	.word	0x0800496c
 80030d8:	0800497d 	.word	0x0800497d

080030dc <__hi0bits>:
 80030dc:	0c03      	lsrs	r3, r0, #16
 80030de:	041b      	lsls	r3, r3, #16
 80030e0:	b9d3      	cbnz	r3, 8003118 <__hi0bits+0x3c>
 80030e2:	0400      	lsls	r0, r0, #16
 80030e4:	2310      	movs	r3, #16
 80030e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80030ea:	bf04      	itt	eq
 80030ec:	0200      	lsleq	r0, r0, #8
 80030ee:	3308      	addeq	r3, #8
 80030f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80030f4:	bf04      	itt	eq
 80030f6:	0100      	lsleq	r0, r0, #4
 80030f8:	3304      	addeq	r3, #4
 80030fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80030fe:	bf04      	itt	eq
 8003100:	0080      	lsleq	r0, r0, #2
 8003102:	3302      	addeq	r3, #2
 8003104:	2800      	cmp	r0, #0
 8003106:	db05      	blt.n	8003114 <__hi0bits+0x38>
 8003108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800310c:	f103 0301 	add.w	r3, r3, #1
 8003110:	bf08      	it	eq
 8003112:	2320      	moveq	r3, #32
 8003114:	4618      	mov	r0, r3
 8003116:	4770      	bx	lr
 8003118:	2300      	movs	r3, #0
 800311a:	e7e4      	b.n	80030e6 <__hi0bits+0xa>

0800311c <__lo0bits>:
 800311c:	6803      	ldr	r3, [r0, #0]
 800311e:	f013 0207 	ands.w	r2, r3, #7
 8003122:	4601      	mov	r1, r0
 8003124:	d00b      	beq.n	800313e <__lo0bits+0x22>
 8003126:	07da      	lsls	r2, r3, #31
 8003128:	d424      	bmi.n	8003174 <__lo0bits+0x58>
 800312a:	0798      	lsls	r0, r3, #30
 800312c:	bf49      	itett	mi
 800312e:	085b      	lsrmi	r3, r3, #1
 8003130:	089b      	lsrpl	r3, r3, #2
 8003132:	2001      	movmi	r0, #1
 8003134:	600b      	strmi	r3, [r1, #0]
 8003136:	bf5c      	itt	pl
 8003138:	600b      	strpl	r3, [r1, #0]
 800313a:	2002      	movpl	r0, #2
 800313c:	4770      	bx	lr
 800313e:	b298      	uxth	r0, r3
 8003140:	b9b0      	cbnz	r0, 8003170 <__lo0bits+0x54>
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	2010      	movs	r0, #16
 8003146:	f013 0fff 	tst.w	r3, #255	; 0xff
 800314a:	bf04      	itt	eq
 800314c:	0a1b      	lsreq	r3, r3, #8
 800314e:	3008      	addeq	r0, #8
 8003150:	071a      	lsls	r2, r3, #28
 8003152:	bf04      	itt	eq
 8003154:	091b      	lsreq	r3, r3, #4
 8003156:	3004      	addeq	r0, #4
 8003158:	079a      	lsls	r2, r3, #30
 800315a:	bf04      	itt	eq
 800315c:	089b      	lsreq	r3, r3, #2
 800315e:	3002      	addeq	r0, #2
 8003160:	07da      	lsls	r2, r3, #31
 8003162:	d403      	bmi.n	800316c <__lo0bits+0x50>
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	f100 0001 	add.w	r0, r0, #1
 800316a:	d005      	beq.n	8003178 <__lo0bits+0x5c>
 800316c:	600b      	str	r3, [r1, #0]
 800316e:	4770      	bx	lr
 8003170:	4610      	mov	r0, r2
 8003172:	e7e8      	b.n	8003146 <__lo0bits+0x2a>
 8003174:	2000      	movs	r0, #0
 8003176:	4770      	bx	lr
 8003178:	2020      	movs	r0, #32
 800317a:	4770      	bx	lr

0800317c <__i2b>:
 800317c:	b510      	push	{r4, lr}
 800317e:	460c      	mov	r4, r1
 8003180:	2101      	movs	r1, #1
 8003182:	f7ff feff 	bl	8002f84 <_Balloc>
 8003186:	4602      	mov	r2, r0
 8003188:	b928      	cbnz	r0, 8003196 <__i2b+0x1a>
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <__i2b+0x24>)
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <__i2b+0x28>)
 800318e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003192:	f000 fc9b 	bl	8003acc <__assert_func>
 8003196:	2301      	movs	r3, #1
 8003198:	6144      	str	r4, [r0, #20]
 800319a:	6103      	str	r3, [r0, #16]
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	0800496c 	.word	0x0800496c
 80031a4:	0800497d 	.word	0x0800497d

080031a8 <__multiply>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	4614      	mov	r4, r2
 80031ae:	690a      	ldr	r2, [r1, #16]
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	bfb8      	it	lt
 80031b6:	460b      	movlt	r3, r1
 80031b8:	460d      	mov	r5, r1
 80031ba:	bfbc      	itt	lt
 80031bc:	4625      	movlt	r5, r4
 80031be:	461c      	movlt	r4, r3
 80031c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80031c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80031c8:	68ab      	ldr	r3, [r5, #8]
 80031ca:	6869      	ldr	r1, [r5, #4]
 80031cc:	eb0a 0709 	add.w	r7, sl, r9
 80031d0:	42bb      	cmp	r3, r7
 80031d2:	b085      	sub	sp, #20
 80031d4:	bfb8      	it	lt
 80031d6:	3101      	addlt	r1, #1
 80031d8:	f7ff fed4 	bl	8002f84 <_Balloc>
 80031dc:	b930      	cbnz	r0, 80031ec <__multiply+0x44>
 80031de:	4602      	mov	r2, r0
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <__multiply+0x144>)
 80031e2:	4843      	ldr	r0, [pc, #268]	; (80032f0 <__multiply+0x148>)
 80031e4:	f240 115d 	movw	r1, #349	; 0x15d
 80031e8:	f000 fc70 	bl	8003acc <__assert_func>
 80031ec:	f100 0614 	add.w	r6, r0, #20
 80031f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80031f4:	4633      	mov	r3, r6
 80031f6:	2200      	movs	r2, #0
 80031f8:	4543      	cmp	r3, r8
 80031fa:	d31e      	bcc.n	800323a <__multiply+0x92>
 80031fc:	f105 0c14 	add.w	ip, r5, #20
 8003200:	f104 0314 	add.w	r3, r4, #20
 8003204:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003208:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800320c:	9202      	str	r2, [sp, #8]
 800320e:	ebac 0205 	sub.w	r2, ip, r5
 8003212:	3a15      	subs	r2, #21
 8003214:	f022 0203 	bic.w	r2, r2, #3
 8003218:	3204      	adds	r2, #4
 800321a:	f105 0115 	add.w	r1, r5, #21
 800321e:	458c      	cmp	ip, r1
 8003220:	bf38      	it	cc
 8003222:	2204      	movcc	r2, #4
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	9a02      	ldr	r2, [sp, #8]
 8003228:	9303      	str	r3, [sp, #12]
 800322a:	429a      	cmp	r2, r3
 800322c:	d808      	bhi.n	8003240 <__multiply+0x98>
 800322e:	2f00      	cmp	r7, #0
 8003230:	dc55      	bgt.n	80032de <__multiply+0x136>
 8003232:	6107      	str	r7, [r0, #16]
 8003234:	b005      	add	sp, #20
 8003236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323a:	f843 2b04 	str.w	r2, [r3], #4
 800323e:	e7db      	b.n	80031f8 <__multiply+0x50>
 8003240:	f8b3 a000 	ldrh.w	sl, [r3]
 8003244:	f1ba 0f00 	cmp.w	sl, #0
 8003248:	d020      	beq.n	800328c <__multiply+0xe4>
 800324a:	f105 0e14 	add.w	lr, r5, #20
 800324e:	46b1      	mov	r9, r6
 8003250:	2200      	movs	r2, #0
 8003252:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003256:	f8d9 b000 	ldr.w	fp, [r9]
 800325a:	b2a1      	uxth	r1, r4
 800325c:	fa1f fb8b 	uxth.w	fp, fp
 8003260:	fb0a b101 	mla	r1, sl, r1, fp
 8003264:	4411      	add	r1, r2
 8003266:	f8d9 2000 	ldr.w	r2, [r9]
 800326a:	0c24      	lsrs	r4, r4, #16
 800326c:	0c12      	lsrs	r2, r2, #16
 800326e:	fb0a 2404 	mla	r4, sl, r4, r2
 8003272:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003276:	b289      	uxth	r1, r1
 8003278:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800327c:	45f4      	cmp	ip, lr
 800327e:	f849 1b04 	str.w	r1, [r9], #4
 8003282:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003286:	d8e4      	bhi.n	8003252 <__multiply+0xaa>
 8003288:	9901      	ldr	r1, [sp, #4]
 800328a:	5072      	str	r2, [r6, r1]
 800328c:	9a03      	ldr	r2, [sp, #12]
 800328e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003292:	3304      	adds	r3, #4
 8003294:	f1b9 0f00 	cmp.w	r9, #0
 8003298:	d01f      	beq.n	80032da <__multiply+0x132>
 800329a:	6834      	ldr	r4, [r6, #0]
 800329c:	f105 0114 	add.w	r1, r5, #20
 80032a0:	46b6      	mov	lr, r6
 80032a2:	f04f 0a00 	mov.w	sl, #0
 80032a6:	880a      	ldrh	r2, [r1, #0]
 80032a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80032ac:	fb09 b202 	mla	r2, r9, r2, fp
 80032b0:	4492      	add	sl, r2
 80032b2:	b2a4      	uxth	r4, r4
 80032b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80032b8:	f84e 4b04 	str.w	r4, [lr], #4
 80032bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80032c0:	f8be 2000 	ldrh.w	r2, [lr]
 80032c4:	0c24      	lsrs	r4, r4, #16
 80032c6:	fb09 2404 	mla	r4, r9, r4, r2
 80032ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80032ce:	458c      	cmp	ip, r1
 80032d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80032d4:	d8e7      	bhi.n	80032a6 <__multiply+0xfe>
 80032d6:	9a01      	ldr	r2, [sp, #4]
 80032d8:	50b4      	str	r4, [r6, r2]
 80032da:	3604      	adds	r6, #4
 80032dc:	e7a3      	b.n	8003226 <__multiply+0x7e>
 80032de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1a5      	bne.n	8003232 <__multiply+0x8a>
 80032e6:	3f01      	subs	r7, #1
 80032e8:	e7a1      	b.n	800322e <__multiply+0x86>
 80032ea:	bf00      	nop
 80032ec:	0800496c 	.word	0x0800496c
 80032f0:	0800497d 	.word	0x0800497d

080032f4 <__pow5mult>:
 80032f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032f8:	4615      	mov	r5, r2
 80032fa:	f012 0203 	ands.w	r2, r2, #3
 80032fe:	4606      	mov	r6, r0
 8003300:	460f      	mov	r7, r1
 8003302:	d007      	beq.n	8003314 <__pow5mult+0x20>
 8003304:	4c25      	ldr	r4, [pc, #148]	; (800339c <__pow5mult+0xa8>)
 8003306:	3a01      	subs	r2, #1
 8003308:	2300      	movs	r3, #0
 800330a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800330e:	f7ff fe9b 	bl	8003048 <__multadd>
 8003312:	4607      	mov	r7, r0
 8003314:	10ad      	asrs	r5, r5, #2
 8003316:	d03d      	beq.n	8003394 <__pow5mult+0xa0>
 8003318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800331a:	b97c      	cbnz	r4, 800333c <__pow5mult+0x48>
 800331c:	2010      	movs	r0, #16
 800331e:	f7ff fe1b 	bl	8002f58 <malloc>
 8003322:	4602      	mov	r2, r0
 8003324:	6270      	str	r0, [r6, #36]	; 0x24
 8003326:	b928      	cbnz	r0, 8003334 <__pow5mult+0x40>
 8003328:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <__pow5mult+0xac>)
 800332a:	481e      	ldr	r0, [pc, #120]	; (80033a4 <__pow5mult+0xb0>)
 800332c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003330:	f000 fbcc 	bl	8003acc <__assert_func>
 8003334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003338:	6004      	str	r4, [r0, #0]
 800333a:	60c4      	str	r4, [r0, #12]
 800333c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003344:	b94c      	cbnz	r4, 800335a <__pow5mult+0x66>
 8003346:	f240 2171 	movw	r1, #625	; 0x271
 800334a:	4630      	mov	r0, r6
 800334c:	f7ff ff16 	bl	800317c <__i2b>
 8003350:	2300      	movs	r3, #0
 8003352:	f8c8 0008 	str.w	r0, [r8, #8]
 8003356:	4604      	mov	r4, r0
 8003358:	6003      	str	r3, [r0, #0]
 800335a:	f04f 0900 	mov.w	r9, #0
 800335e:	07eb      	lsls	r3, r5, #31
 8003360:	d50a      	bpl.n	8003378 <__pow5mult+0x84>
 8003362:	4639      	mov	r1, r7
 8003364:	4622      	mov	r2, r4
 8003366:	4630      	mov	r0, r6
 8003368:	f7ff ff1e 	bl	80031a8 <__multiply>
 800336c:	4639      	mov	r1, r7
 800336e:	4680      	mov	r8, r0
 8003370:	4630      	mov	r0, r6
 8003372:	f7ff fe47 	bl	8003004 <_Bfree>
 8003376:	4647      	mov	r7, r8
 8003378:	106d      	asrs	r5, r5, #1
 800337a:	d00b      	beq.n	8003394 <__pow5mult+0xa0>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	b938      	cbnz	r0, 8003390 <__pow5mult+0x9c>
 8003380:	4622      	mov	r2, r4
 8003382:	4621      	mov	r1, r4
 8003384:	4630      	mov	r0, r6
 8003386:	f7ff ff0f 	bl	80031a8 <__multiply>
 800338a:	6020      	str	r0, [r4, #0]
 800338c:	f8c0 9000 	str.w	r9, [r0]
 8003390:	4604      	mov	r4, r0
 8003392:	e7e4      	b.n	800335e <__pow5mult+0x6a>
 8003394:	4638      	mov	r0, r7
 8003396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800339a:	bf00      	nop
 800339c:	08004ad0 	.word	0x08004ad0
 80033a0:	080048f6 	.word	0x080048f6
 80033a4:	0800497d 	.word	0x0800497d

080033a8 <__lshift>:
 80033a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	460c      	mov	r4, r1
 80033ae:	6849      	ldr	r1, [r1, #4]
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80033b6:	68a3      	ldr	r3, [r4, #8]
 80033b8:	4607      	mov	r7, r0
 80033ba:	4691      	mov	r9, r2
 80033bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80033c0:	f108 0601 	add.w	r6, r8, #1
 80033c4:	42b3      	cmp	r3, r6
 80033c6:	db0b      	blt.n	80033e0 <__lshift+0x38>
 80033c8:	4638      	mov	r0, r7
 80033ca:	f7ff fddb 	bl	8002f84 <_Balloc>
 80033ce:	4605      	mov	r5, r0
 80033d0:	b948      	cbnz	r0, 80033e6 <__lshift+0x3e>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b28      	ldr	r3, [pc, #160]	; (8003478 <__lshift+0xd0>)
 80033d6:	4829      	ldr	r0, [pc, #164]	; (800347c <__lshift+0xd4>)
 80033d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80033dc:	f000 fb76 	bl	8003acc <__assert_func>
 80033e0:	3101      	adds	r1, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	e7ee      	b.n	80033c4 <__lshift+0x1c>
 80033e6:	2300      	movs	r3, #0
 80033e8:	f100 0114 	add.w	r1, r0, #20
 80033ec:	f100 0210 	add.w	r2, r0, #16
 80033f0:	4618      	mov	r0, r3
 80033f2:	4553      	cmp	r3, sl
 80033f4:	db33      	blt.n	800345e <__lshift+0xb6>
 80033f6:	6920      	ldr	r0, [r4, #16]
 80033f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80033fc:	f104 0314 	add.w	r3, r4, #20
 8003400:	f019 091f 	ands.w	r9, r9, #31
 8003404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003408:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800340c:	d02b      	beq.n	8003466 <__lshift+0xbe>
 800340e:	f1c9 0e20 	rsb	lr, r9, #32
 8003412:	468a      	mov	sl, r1
 8003414:	2200      	movs	r2, #0
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	fa00 f009 	lsl.w	r0, r0, r9
 800341c:	4302      	orrs	r2, r0
 800341e:	f84a 2b04 	str.w	r2, [sl], #4
 8003422:	f853 2b04 	ldr.w	r2, [r3], #4
 8003426:	459c      	cmp	ip, r3
 8003428:	fa22 f20e 	lsr.w	r2, r2, lr
 800342c:	d8f3      	bhi.n	8003416 <__lshift+0x6e>
 800342e:	ebac 0304 	sub.w	r3, ip, r4
 8003432:	3b15      	subs	r3, #21
 8003434:	f023 0303 	bic.w	r3, r3, #3
 8003438:	3304      	adds	r3, #4
 800343a:	f104 0015 	add.w	r0, r4, #21
 800343e:	4584      	cmp	ip, r0
 8003440:	bf38      	it	cc
 8003442:	2304      	movcc	r3, #4
 8003444:	50ca      	str	r2, [r1, r3]
 8003446:	b10a      	cbz	r2, 800344c <__lshift+0xa4>
 8003448:	f108 0602 	add.w	r6, r8, #2
 800344c:	3e01      	subs	r6, #1
 800344e:	4638      	mov	r0, r7
 8003450:	612e      	str	r6, [r5, #16]
 8003452:	4621      	mov	r1, r4
 8003454:	f7ff fdd6 	bl	8003004 <_Bfree>
 8003458:	4628      	mov	r0, r5
 800345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345e:	f842 0f04 	str.w	r0, [r2, #4]!
 8003462:	3301      	adds	r3, #1
 8003464:	e7c5      	b.n	80033f2 <__lshift+0x4a>
 8003466:	3904      	subs	r1, #4
 8003468:	f853 2b04 	ldr.w	r2, [r3], #4
 800346c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003470:	459c      	cmp	ip, r3
 8003472:	d8f9      	bhi.n	8003468 <__lshift+0xc0>
 8003474:	e7ea      	b.n	800344c <__lshift+0xa4>
 8003476:	bf00      	nop
 8003478:	0800496c 	.word	0x0800496c
 800347c:	0800497d 	.word	0x0800497d

08003480 <__mcmp>:
 8003480:	b530      	push	{r4, r5, lr}
 8003482:	6902      	ldr	r2, [r0, #16]
 8003484:	690c      	ldr	r4, [r1, #16]
 8003486:	1b12      	subs	r2, r2, r4
 8003488:	d10e      	bne.n	80034a8 <__mcmp+0x28>
 800348a:	f100 0314 	add.w	r3, r0, #20
 800348e:	3114      	adds	r1, #20
 8003490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800349c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d003      	beq.n	80034ac <__mcmp+0x2c>
 80034a4:	d305      	bcc.n	80034b2 <__mcmp+0x32>
 80034a6:	2201      	movs	r2, #1
 80034a8:	4610      	mov	r0, r2
 80034aa:	bd30      	pop	{r4, r5, pc}
 80034ac:	4283      	cmp	r3, r0
 80034ae:	d3f3      	bcc.n	8003498 <__mcmp+0x18>
 80034b0:	e7fa      	b.n	80034a8 <__mcmp+0x28>
 80034b2:	f04f 32ff 	mov.w	r2, #4294967295
 80034b6:	e7f7      	b.n	80034a8 <__mcmp+0x28>

080034b8 <__mdiff>:
 80034b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	460c      	mov	r4, r1
 80034be:	4606      	mov	r6, r0
 80034c0:	4611      	mov	r1, r2
 80034c2:	4620      	mov	r0, r4
 80034c4:	4617      	mov	r7, r2
 80034c6:	f7ff ffdb 	bl	8003480 <__mcmp>
 80034ca:	1e05      	subs	r5, r0, #0
 80034cc:	d110      	bne.n	80034f0 <__mdiff+0x38>
 80034ce:	4629      	mov	r1, r5
 80034d0:	4630      	mov	r0, r6
 80034d2:	f7ff fd57 	bl	8002f84 <_Balloc>
 80034d6:	b930      	cbnz	r0, 80034e6 <__mdiff+0x2e>
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <__mdiff+0x108>)
 80034da:	4602      	mov	r2, r0
 80034dc:	f240 2132 	movw	r1, #562	; 0x232
 80034e0:	4838      	ldr	r0, [pc, #224]	; (80035c4 <__mdiff+0x10c>)
 80034e2:	f000 faf3 	bl	8003acc <__assert_func>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80034ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	bfa4      	itt	ge
 80034f2:	463b      	movge	r3, r7
 80034f4:	4627      	movge	r7, r4
 80034f6:	4630      	mov	r0, r6
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	bfa6      	itte	ge
 80034fc:	461c      	movge	r4, r3
 80034fe:	2500      	movge	r5, #0
 8003500:	2501      	movlt	r5, #1
 8003502:	f7ff fd3f 	bl	8002f84 <_Balloc>
 8003506:	b920      	cbnz	r0, 8003512 <__mdiff+0x5a>
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <__mdiff+0x108>)
 800350a:	4602      	mov	r2, r0
 800350c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003510:	e7e6      	b.n	80034e0 <__mdiff+0x28>
 8003512:	693e      	ldr	r6, [r7, #16]
 8003514:	60c5      	str	r5, [r0, #12]
 8003516:	6925      	ldr	r5, [r4, #16]
 8003518:	f107 0114 	add.w	r1, r7, #20
 800351c:	f104 0914 	add.w	r9, r4, #20
 8003520:	f100 0e14 	add.w	lr, r0, #20
 8003524:	f107 0210 	add.w	r2, r7, #16
 8003528:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800352c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003530:	46f2      	mov	sl, lr
 8003532:	2700      	movs	r7, #0
 8003534:	f859 3b04 	ldr.w	r3, [r9], #4
 8003538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800353c:	fa1f f883 	uxth.w	r8, r3
 8003540:	fa17 f78b 	uxtah	r7, r7, fp
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	eba7 0808 	sub.w	r8, r7, r8
 800354a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800354e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003552:	fa1f f888 	uxth.w	r8, r8
 8003556:	141f      	asrs	r7, r3, #16
 8003558:	454d      	cmp	r5, r9
 800355a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800355e:	f84a 3b04 	str.w	r3, [sl], #4
 8003562:	d8e7      	bhi.n	8003534 <__mdiff+0x7c>
 8003564:	1b2b      	subs	r3, r5, r4
 8003566:	3b15      	subs	r3, #21
 8003568:	f023 0303 	bic.w	r3, r3, #3
 800356c:	3304      	adds	r3, #4
 800356e:	3415      	adds	r4, #21
 8003570:	42a5      	cmp	r5, r4
 8003572:	bf38      	it	cc
 8003574:	2304      	movcc	r3, #4
 8003576:	4419      	add	r1, r3
 8003578:	4473      	add	r3, lr
 800357a:	469e      	mov	lr, r3
 800357c:	460d      	mov	r5, r1
 800357e:	4565      	cmp	r5, ip
 8003580:	d30e      	bcc.n	80035a0 <__mdiff+0xe8>
 8003582:	f10c 0203 	add.w	r2, ip, #3
 8003586:	1a52      	subs	r2, r2, r1
 8003588:	f022 0203 	bic.w	r2, r2, #3
 800358c:	3903      	subs	r1, #3
 800358e:	458c      	cmp	ip, r1
 8003590:	bf38      	it	cc
 8003592:	2200      	movcc	r2, #0
 8003594:	441a      	add	r2, r3
 8003596:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800359a:	b17b      	cbz	r3, 80035bc <__mdiff+0x104>
 800359c:	6106      	str	r6, [r0, #16]
 800359e:	e7a5      	b.n	80034ec <__mdiff+0x34>
 80035a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80035a4:	fa17 f488 	uxtah	r4, r7, r8
 80035a8:	1422      	asrs	r2, r4, #16
 80035aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80035ae:	b2a4      	uxth	r4, r4
 80035b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80035b4:	f84e 4b04 	str.w	r4, [lr], #4
 80035b8:	1417      	asrs	r7, r2, #16
 80035ba:	e7e0      	b.n	800357e <__mdiff+0xc6>
 80035bc:	3e01      	subs	r6, #1
 80035be:	e7ea      	b.n	8003596 <__mdiff+0xde>
 80035c0:	0800496c 	.word	0x0800496c
 80035c4:	0800497d 	.word	0x0800497d

080035c8 <__d2b>:
 80035c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4689      	mov	r9, r1
 80035ce:	2101      	movs	r1, #1
 80035d0:	ec57 6b10 	vmov	r6, r7, d0
 80035d4:	4690      	mov	r8, r2
 80035d6:	f7ff fcd5 	bl	8002f84 <_Balloc>
 80035da:	4604      	mov	r4, r0
 80035dc:	b930      	cbnz	r0, 80035ec <__d2b+0x24>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <__d2b+0xb0>)
 80035e2:	4826      	ldr	r0, [pc, #152]	; (800367c <__d2b+0xb4>)
 80035e4:	f240 310a 	movw	r1, #778	; 0x30a
 80035e8:	f000 fa70 	bl	8003acc <__assert_func>
 80035ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80035f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80035f4:	bb35      	cbnz	r5, 8003644 <__d2b+0x7c>
 80035f6:	2e00      	cmp	r6, #0
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	d028      	beq.n	800364e <__d2b+0x86>
 80035fc:	4668      	mov	r0, sp
 80035fe:	9600      	str	r6, [sp, #0]
 8003600:	f7ff fd8c 	bl	800311c <__lo0bits>
 8003604:	9900      	ldr	r1, [sp, #0]
 8003606:	b300      	cbz	r0, 800364a <__d2b+0x82>
 8003608:	9a01      	ldr	r2, [sp, #4]
 800360a:	f1c0 0320 	rsb	r3, r0, #32
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	430b      	orrs	r3, r1
 8003614:	40c2      	lsrs	r2, r0
 8003616:	6163      	str	r3, [r4, #20]
 8003618:	9201      	str	r2, [sp, #4]
 800361a:	9b01      	ldr	r3, [sp, #4]
 800361c:	61a3      	str	r3, [r4, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2202      	movne	r2, #2
 8003624:	2201      	moveq	r2, #1
 8003626:	6122      	str	r2, [r4, #16]
 8003628:	b1d5      	cbz	r5, 8003660 <__d2b+0x98>
 800362a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800362e:	4405      	add	r5, r0
 8003630:	f8c9 5000 	str.w	r5, [r9]
 8003634:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003638:	f8c8 0000 	str.w	r0, [r8]
 800363c:	4620      	mov	r0, r4
 800363e:	b003      	add	sp, #12
 8003640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003648:	e7d5      	b.n	80035f6 <__d2b+0x2e>
 800364a:	6161      	str	r1, [r4, #20]
 800364c:	e7e5      	b.n	800361a <__d2b+0x52>
 800364e:	a801      	add	r0, sp, #4
 8003650:	f7ff fd64 	bl	800311c <__lo0bits>
 8003654:	9b01      	ldr	r3, [sp, #4]
 8003656:	6163      	str	r3, [r4, #20]
 8003658:	2201      	movs	r2, #1
 800365a:	6122      	str	r2, [r4, #16]
 800365c:	3020      	adds	r0, #32
 800365e:	e7e3      	b.n	8003628 <__d2b+0x60>
 8003660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003668:	f8c9 0000 	str.w	r0, [r9]
 800366c:	6918      	ldr	r0, [r3, #16]
 800366e:	f7ff fd35 	bl	80030dc <__hi0bits>
 8003672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003676:	e7df      	b.n	8003638 <__d2b+0x70>
 8003678:	0800496c 	.word	0x0800496c
 800367c:	0800497d 	.word	0x0800497d

08003680 <_calloc_r>:
 8003680:	b513      	push	{r0, r1, r4, lr}
 8003682:	434a      	muls	r2, r1
 8003684:	4611      	mov	r1, r2
 8003686:	9201      	str	r2, [sp, #4]
 8003688:	f000 f85a 	bl	8003740 <_malloc_r>
 800368c:	4604      	mov	r4, r0
 800368e:	b118      	cbz	r0, 8003698 <_calloc_r+0x18>
 8003690:	9a01      	ldr	r2, [sp, #4]
 8003692:	2100      	movs	r1, #0
 8003694:	f7fe f8c2 	bl	800181c <memset>
 8003698:	4620      	mov	r0, r4
 800369a:	b002      	add	sp, #8
 800369c:	bd10      	pop	{r4, pc}
	...

080036a0 <_free_r>:
 80036a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d048      	beq.n	8003738 <_free_r+0x98>
 80036a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036aa:	9001      	str	r0, [sp, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f1a1 0404 	sub.w	r4, r1, #4
 80036b2:	bfb8      	it	lt
 80036b4:	18e4      	addlt	r4, r4, r3
 80036b6:	f000 fa65 	bl	8003b84 <__malloc_lock>
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <_free_r+0x9c>)
 80036bc:	9801      	ldr	r0, [sp, #4]
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	4615      	mov	r5, r2
 80036c2:	b933      	cbnz	r3, 80036d2 <_free_r+0x32>
 80036c4:	6063      	str	r3, [r4, #4]
 80036c6:	6014      	str	r4, [r2, #0]
 80036c8:	b003      	add	sp, #12
 80036ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036ce:	f000 ba5f 	b.w	8003b90 <__malloc_unlock>
 80036d2:	42a3      	cmp	r3, r4
 80036d4:	d90b      	bls.n	80036ee <_free_r+0x4e>
 80036d6:	6821      	ldr	r1, [r4, #0]
 80036d8:	1862      	adds	r2, r4, r1
 80036da:	4293      	cmp	r3, r2
 80036dc:	bf04      	itt	eq
 80036de:	681a      	ldreq	r2, [r3, #0]
 80036e0:	685b      	ldreq	r3, [r3, #4]
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	bf04      	itt	eq
 80036e6:	1852      	addeq	r2, r2, r1
 80036e8:	6022      	streq	r2, [r4, #0]
 80036ea:	602c      	str	r4, [r5, #0]
 80036ec:	e7ec      	b.n	80036c8 <_free_r+0x28>
 80036ee:	461a      	mov	r2, r3
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	b10b      	cbz	r3, 80036f8 <_free_r+0x58>
 80036f4:	42a3      	cmp	r3, r4
 80036f6:	d9fa      	bls.n	80036ee <_free_r+0x4e>
 80036f8:	6811      	ldr	r1, [r2, #0]
 80036fa:	1855      	adds	r5, r2, r1
 80036fc:	42a5      	cmp	r5, r4
 80036fe:	d10b      	bne.n	8003718 <_free_r+0x78>
 8003700:	6824      	ldr	r4, [r4, #0]
 8003702:	4421      	add	r1, r4
 8003704:	1854      	adds	r4, r2, r1
 8003706:	42a3      	cmp	r3, r4
 8003708:	6011      	str	r1, [r2, #0]
 800370a:	d1dd      	bne.n	80036c8 <_free_r+0x28>
 800370c:	681c      	ldr	r4, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	6053      	str	r3, [r2, #4]
 8003712:	4421      	add	r1, r4
 8003714:	6011      	str	r1, [r2, #0]
 8003716:	e7d7      	b.n	80036c8 <_free_r+0x28>
 8003718:	d902      	bls.n	8003720 <_free_r+0x80>
 800371a:	230c      	movs	r3, #12
 800371c:	6003      	str	r3, [r0, #0]
 800371e:	e7d3      	b.n	80036c8 <_free_r+0x28>
 8003720:	6825      	ldr	r5, [r4, #0]
 8003722:	1961      	adds	r1, r4, r5
 8003724:	428b      	cmp	r3, r1
 8003726:	bf04      	itt	eq
 8003728:	6819      	ldreq	r1, [r3, #0]
 800372a:	685b      	ldreq	r3, [r3, #4]
 800372c:	6063      	str	r3, [r4, #4]
 800372e:	bf04      	itt	eq
 8003730:	1949      	addeq	r1, r1, r5
 8003732:	6021      	streq	r1, [r4, #0]
 8003734:	6054      	str	r4, [r2, #4]
 8003736:	e7c7      	b.n	80036c8 <_free_r+0x28>
 8003738:	b003      	add	sp, #12
 800373a:	bd30      	pop	{r4, r5, pc}
 800373c:	200001fc 	.word	0x200001fc

08003740 <_malloc_r>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	1ccd      	adds	r5, r1, #3
 8003744:	f025 0503 	bic.w	r5, r5, #3
 8003748:	3508      	adds	r5, #8
 800374a:	2d0c      	cmp	r5, #12
 800374c:	bf38      	it	cc
 800374e:	250c      	movcc	r5, #12
 8003750:	2d00      	cmp	r5, #0
 8003752:	4606      	mov	r6, r0
 8003754:	db01      	blt.n	800375a <_malloc_r+0x1a>
 8003756:	42a9      	cmp	r1, r5
 8003758:	d903      	bls.n	8003762 <_malloc_r+0x22>
 800375a:	230c      	movs	r3, #12
 800375c:	6033      	str	r3, [r6, #0]
 800375e:	2000      	movs	r0, #0
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003762:	f000 fa0f 	bl	8003b84 <__malloc_lock>
 8003766:	4921      	ldr	r1, [pc, #132]	; (80037ec <_malloc_r+0xac>)
 8003768:	680a      	ldr	r2, [r1, #0]
 800376a:	4614      	mov	r4, r2
 800376c:	b99c      	cbnz	r4, 8003796 <_malloc_r+0x56>
 800376e:	4f20      	ldr	r7, [pc, #128]	; (80037f0 <_malloc_r+0xb0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b923      	cbnz	r3, 800377e <_malloc_r+0x3e>
 8003774:	4621      	mov	r1, r4
 8003776:	4630      	mov	r0, r6
 8003778:	f000 f998 	bl	8003aac <_sbrk_r>
 800377c:	6038      	str	r0, [r7, #0]
 800377e:	4629      	mov	r1, r5
 8003780:	4630      	mov	r0, r6
 8003782:	f000 f993 	bl	8003aac <_sbrk_r>
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d123      	bne.n	80037d2 <_malloc_r+0x92>
 800378a:	230c      	movs	r3, #12
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	4630      	mov	r0, r6
 8003790:	f000 f9fe 	bl	8003b90 <__malloc_unlock>
 8003794:	e7e3      	b.n	800375e <_malloc_r+0x1e>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	1b5b      	subs	r3, r3, r5
 800379a:	d417      	bmi.n	80037cc <_malloc_r+0x8c>
 800379c:	2b0b      	cmp	r3, #11
 800379e:	d903      	bls.n	80037a8 <_malloc_r+0x68>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	441c      	add	r4, r3
 80037a4:	6025      	str	r5, [r4, #0]
 80037a6:	e004      	b.n	80037b2 <_malloc_r+0x72>
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	42a2      	cmp	r2, r4
 80037ac:	bf0c      	ite	eq
 80037ae:	600b      	streq	r3, [r1, #0]
 80037b0:	6053      	strne	r3, [r2, #4]
 80037b2:	4630      	mov	r0, r6
 80037b4:	f000 f9ec 	bl	8003b90 <__malloc_unlock>
 80037b8:	f104 000b 	add.w	r0, r4, #11
 80037bc:	1d23      	adds	r3, r4, #4
 80037be:	f020 0007 	bic.w	r0, r0, #7
 80037c2:	1ac2      	subs	r2, r0, r3
 80037c4:	d0cc      	beq.n	8003760 <_malloc_r+0x20>
 80037c6:	1a1b      	subs	r3, r3, r0
 80037c8:	50a3      	str	r3, [r4, r2]
 80037ca:	e7c9      	b.n	8003760 <_malloc_r+0x20>
 80037cc:	4622      	mov	r2, r4
 80037ce:	6864      	ldr	r4, [r4, #4]
 80037d0:	e7cc      	b.n	800376c <_malloc_r+0x2c>
 80037d2:	1cc4      	adds	r4, r0, #3
 80037d4:	f024 0403 	bic.w	r4, r4, #3
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d0e3      	beq.n	80037a4 <_malloc_r+0x64>
 80037dc:	1a21      	subs	r1, r4, r0
 80037de:	4630      	mov	r0, r6
 80037e0:	f000 f964 	bl	8003aac <_sbrk_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d1dd      	bne.n	80037a4 <_malloc_r+0x64>
 80037e8:	e7cf      	b.n	800378a <_malloc_r+0x4a>
 80037ea:	bf00      	nop
 80037ec:	200001fc 	.word	0x200001fc
 80037f0:	20000200 	.word	0x20000200

080037f4 <__ssputs_r>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	688e      	ldr	r6, [r1, #8]
 80037fa:	429e      	cmp	r6, r3
 80037fc:	4682      	mov	sl, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	4690      	mov	r8, r2
 8003802:	461f      	mov	r7, r3
 8003804:	d838      	bhi.n	8003878 <__ssputs_r+0x84>
 8003806:	898a      	ldrh	r2, [r1, #12]
 8003808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800380c:	d032      	beq.n	8003874 <__ssputs_r+0x80>
 800380e:	6825      	ldr	r5, [r4, #0]
 8003810:	6909      	ldr	r1, [r1, #16]
 8003812:	eba5 0901 	sub.w	r9, r5, r1
 8003816:	6965      	ldr	r5, [r4, #20]
 8003818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800381c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003820:	3301      	adds	r3, #1
 8003822:	444b      	add	r3, r9
 8003824:	106d      	asrs	r5, r5, #1
 8003826:	429d      	cmp	r5, r3
 8003828:	bf38      	it	cc
 800382a:	461d      	movcc	r5, r3
 800382c:	0553      	lsls	r3, r2, #21
 800382e:	d531      	bpl.n	8003894 <__ssputs_r+0xa0>
 8003830:	4629      	mov	r1, r5
 8003832:	f7ff ff85 	bl	8003740 <_malloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	b950      	cbnz	r0, 8003850 <__ssputs_r+0x5c>
 800383a:	230c      	movs	r3, #12
 800383c:	f8ca 3000 	str.w	r3, [sl]
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003846:	81a3      	strh	r3, [r4, #12]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003850:	6921      	ldr	r1, [r4, #16]
 8003852:	464a      	mov	r2, r9
 8003854:	f7ff fb88 	bl	8002f68 <memcpy>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800385e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	6126      	str	r6, [r4, #16]
 8003866:	6165      	str	r5, [r4, #20]
 8003868:	444e      	add	r6, r9
 800386a:	eba5 0509 	sub.w	r5, r5, r9
 800386e:	6026      	str	r6, [r4, #0]
 8003870:	60a5      	str	r5, [r4, #8]
 8003872:	463e      	mov	r6, r7
 8003874:	42be      	cmp	r6, r7
 8003876:	d900      	bls.n	800387a <__ssputs_r+0x86>
 8003878:	463e      	mov	r6, r7
 800387a:	4632      	mov	r2, r6
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	4641      	mov	r1, r8
 8003880:	f000 f966 	bl	8003b50 <memmove>
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	1b9b      	subs	r3, r3, r6
 800388a:	4432      	add	r2, r6
 800388c:	60a3      	str	r3, [r4, #8]
 800388e:	6022      	str	r2, [r4, #0]
 8003890:	2000      	movs	r0, #0
 8003892:	e7db      	b.n	800384c <__ssputs_r+0x58>
 8003894:	462a      	mov	r2, r5
 8003896:	f000 f981 	bl	8003b9c <_realloc_r>
 800389a:	4606      	mov	r6, r0
 800389c:	2800      	cmp	r0, #0
 800389e:	d1e1      	bne.n	8003864 <__ssputs_r+0x70>
 80038a0:	6921      	ldr	r1, [r4, #16]
 80038a2:	4650      	mov	r0, sl
 80038a4:	f7ff fefc 	bl	80036a0 <_free_r>
 80038a8:	e7c7      	b.n	800383a <__ssputs_r+0x46>
	...

080038ac <_svfiprintf_r>:
 80038ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b0:	4698      	mov	r8, r3
 80038b2:	898b      	ldrh	r3, [r1, #12]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	b09d      	sub	sp, #116	; 0x74
 80038b8:	4607      	mov	r7, r0
 80038ba:	460d      	mov	r5, r1
 80038bc:	4614      	mov	r4, r2
 80038be:	d50e      	bpl.n	80038de <_svfiprintf_r+0x32>
 80038c0:	690b      	ldr	r3, [r1, #16]
 80038c2:	b963      	cbnz	r3, 80038de <_svfiprintf_r+0x32>
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	f7ff ff3b 	bl	8003740 <_malloc_r>
 80038ca:	6028      	str	r0, [r5, #0]
 80038cc:	6128      	str	r0, [r5, #16]
 80038ce:	b920      	cbnz	r0, 80038da <_svfiprintf_r+0x2e>
 80038d0:	230c      	movs	r3, #12
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	e0d1      	b.n	8003a7e <_svfiprintf_r+0x1d2>
 80038da:	2340      	movs	r3, #64	; 0x40
 80038dc:	616b      	str	r3, [r5, #20]
 80038de:	2300      	movs	r3, #0
 80038e0:	9309      	str	r3, [sp, #36]	; 0x24
 80038e2:	2320      	movs	r3, #32
 80038e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038ec:	2330      	movs	r3, #48	; 0x30
 80038ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a98 <_svfiprintf_r+0x1ec>
 80038f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f6:	f04f 0901 	mov.w	r9, #1
 80038fa:	4623      	mov	r3, r4
 80038fc:	469a      	mov	sl, r3
 80038fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003902:	b10a      	cbz	r2, 8003908 <_svfiprintf_r+0x5c>
 8003904:	2a25      	cmp	r2, #37	; 0x25
 8003906:	d1f9      	bne.n	80038fc <_svfiprintf_r+0x50>
 8003908:	ebba 0b04 	subs.w	fp, sl, r4
 800390c:	d00b      	beq.n	8003926 <_svfiprintf_r+0x7a>
 800390e:	465b      	mov	r3, fp
 8003910:	4622      	mov	r2, r4
 8003912:	4629      	mov	r1, r5
 8003914:	4638      	mov	r0, r7
 8003916:	f7ff ff6d 	bl	80037f4 <__ssputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	f000 80aa 	beq.w	8003a74 <_svfiprintf_r+0x1c8>
 8003920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003922:	445a      	add	r2, fp
 8003924:	9209      	str	r2, [sp, #36]	; 0x24
 8003926:	f89a 3000 	ldrb.w	r3, [sl]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80a2 	beq.w	8003a74 <_svfiprintf_r+0x1c8>
 8003930:	2300      	movs	r3, #0
 8003932:	f04f 32ff 	mov.w	r2, #4294967295
 8003936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393a:	f10a 0a01 	add.w	sl, sl, #1
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	9307      	str	r3, [sp, #28]
 8003942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003946:	931a      	str	r3, [sp, #104]	; 0x68
 8003948:	4654      	mov	r4, sl
 800394a:	2205      	movs	r2, #5
 800394c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003950:	4851      	ldr	r0, [pc, #324]	; (8003a98 <_svfiprintf_r+0x1ec>)
 8003952:	f7fc fc45 	bl	80001e0 <memchr>
 8003956:	9a04      	ldr	r2, [sp, #16]
 8003958:	b9d8      	cbnz	r0, 8003992 <_svfiprintf_r+0xe6>
 800395a:	06d0      	lsls	r0, r2, #27
 800395c:	bf44      	itt	mi
 800395e:	2320      	movmi	r3, #32
 8003960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003964:	0711      	lsls	r1, r2, #28
 8003966:	bf44      	itt	mi
 8003968:	232b      	movmi	r3, #43	; 0x2b
 800396a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b2a      	cmp	r3, #42	; 0x2a
 8003974:	d015      	beq.n	80039a2 <_svfiprintf_r+0xf6>
 8003976:	9a07      	ldr	r2, [sp, #28]
 8003978:	4654      	mov	r4, sl
 800397a:	2000      	movs	r0, #0
 800397c:	f04f 0c0a 	mov.w	ip, #10
 8003980:	4621      	mov	r1, r4
 8003982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003986:	3b30      	subs	r3, #48	; 0x30
 8003988:	2b09      	cmp	r3, #9
 800398a:	d94e      	bls.n	8003a2a <_svfiprintf_r+0x17e>
 800398c:	b1b0      	cbz	r0, 80039bc <_svfiprintf_r+0x110>
 800398e:	9207      	str	r2, [sp, #28]
 8003990:	e014      	b.n	80039bc <_svfiprintf_r+0x110>
 8003992:	eba0 0308 	sub.w	r3, r0, r8
 8003996:	fa09 f303 	lsl.w	r3, r9, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	46a2      	mov	sl, r4
 80039a0:	e7d2      	b.n	8003948 <_svfiprintf_r+0x9c>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	1d19      	adds	r1, r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	9103      	str	r1, [sp, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfbb      	ittet	lt
 80039ae:	425b      	neglt	r3, r3
 80039b0:	f042 0202 	orrlt.w	r2, r2, #2
 80039b4:	9307      	strge	r3, [sp, #28]
 80039b6:	9307      	strlt	r3, [sp, #28]
 80039b8:	bfb8      	it	lt
 80039ba:	9204      	strlt	r2, [sp, #16]
 80039bc:	7823      	ldrb	r3, [r4, #0]
 80039be:	2b2e      	cmp	r3, #46	; 0x2e
 80039c0:	d10c      	bne.n	80039dc <_svfiprintf_r+0x130>
 80039c2:	7863      	ldrb	r3, [r4, #1]
 80039c4:	2b2a      	cmp	r3, #42	; 0x2a
 80039c6:	d135      	bne.n	8003a34 <_svfiprintf_r+0x188>
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	9203      	str	r2, [sp, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bfb8      	it	lt
 80039d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d8:	3402      	adds	r4, #2
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003aa8 <_svfiprintf_r+0x1fc>
 80039e0:	7821      	ldrb	r1, [r4, #0]
 80039e2:	2203      	movs	r2, #3
 80039e4:	4650      	mov	r0, sl
 80039e6:	f7fc fbfb 	bl	80001e0 <memchr>
 80039ea:	b140      	cbz	r0, 80039fe <_svfiprintf_r+0x152>
 80039ec:	2340      	movs	r3, #64	; 0x40
 80039ee:	eba0 000a 	sub.w	r0, r0, sl
 80039f2:	fa03 f000 	lsl.w	r0, r3, r0
 80039f6:	9b04      	ldr	r3, [sp, #16]
 80039f8:	4303      	orrs	r3, r0
 80039fa:	3401      	adds	r4, #1
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a02:	4826      	ldr	r0, [pc, #152]	; (8003a9c <_svfiprintf_r+0x1f0>)
 8003a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a08:	2206      	movs	r2, #6
 8003a0a:	f7fc fbe9 	bl	80001e0 <memchr>
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d038      	beq.n	8003a84 <_svfiprintf_r+0x1d8>
 8003a12:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <_svfiprintf_r+0x1f4>)
 8003a14:	bb1b      	cbnz	r3, 8003a5e <_svfiprintf_r+0x1b2>
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	3307      	adds	r3, #7
 8003a1a:	f023 0307 	bic.w	r3, r3, #7
 8003a1e:	3308      	adds	r3, #8
 8003a20:	9303      	str	r3, [sp, #12]
 8003a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a24:	4433      	add	r3, r6
 8003a26:	9309      	str	r3, [sp, #36]	; 0x24
 8003a28:	e767      	b.n	80038fa <_svfiprintf_r+0x4e>
 8003a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a2e:	460c      	mov	r4, r1
 8003a30:	2001      	movs	r0, #1
 8003a32:	e7a5      	b.n	8003980 <_svfiprintf_r+0xd4>
 8003a34:	2300      	movs	r3, #0
 8003a36:	3401      	adds	r4, #1
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f04f 0c0a 	mov.w	ip, #10
 8003a40:	4620      	mov	r0, r4
 8003a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a46:	3a30      	subs	r2, #48	; 0x30
 8003a48:	2a09      	cmp	r2, #9
 8003a4a:	d903      	bls.n	8003a54 <_svfiprintf_r+0x1a8>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0c5      	beq.n	80039dc <_svfiprintf_r+0x130>
 8003a50:	9105      	str	r1, [sp, #20]
 8003a52:	e7c3      	b.n	80039dc <_svfiprintf_r+0x130>
 8003a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a58:	4604      	mov	r4, r0
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e7f0      	b.n	8003a40 <_svfiprintf_r+0x194>
 8003a5e:	ab03      	add	r3, sp, #12
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	462a      	mov	r2, r5
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <_svfiprintf_r+0x1f8>)
 8003a66:	a904      	add	r1, sp, #16
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7fd ff7f 	bl	800196c <_printf_float>
 8003a6e:	1c42      	adds	r2, r0, #1
 8003a70:	4606      	mov	r6, r0
 8003a72:	d1d6      	bne.n	8003a22 <_svfiprintf_r+0x176>
 8003a74:	89ab      	ldrh	r3, [r5, #12]
 8003a76:	065b      	lsls	r3, r3, #25
 8003a78:	f53f af2c 	bmi.w	80038d4 <_svfiprintf_r+0x28>
 8003a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a7e:	b01d      	add	sp, #116	; 0x74
 8003a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a84:	ab03      	add	r3, sp, #12
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	462a      	mov	r2, r5
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <_svfiprintf_r+0x1f8>)
 8003a8c:	a904      	add	r1, sp, #16
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f7fe fa10 	bl	8001eb4 <_printf_i>
 8003a94:	e7eb      	b.n	8003a6e <_svfiprintf_r+0x1c2>
 8003a96:	bf00      	nop
 8003a98:	08004adc 	.word	0x08004adc
 8003a9c:	08004ae6 	.word	0x08004ae6
 8003aa0:	0800196d 	.word	0x0800196d
 8003aa4:	080037f5 	.word	0x080037f5
 8003aa8:	08004ae2 	.word	0x08004ae2

08003aac <_sbrk_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_sbrk_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fd fdd8 	bl	800166c <_sbrk>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_sbrk_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_sbrk_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	200003bc 	.word	0x200003bc

08003acc <__assert_func>:
 8003acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <__assert_func+0x2c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	68d8      	ldr	r0, [r3, #12]
 8003ada:	b14c      	cbz	r4, 8003af0 <__assert_func+0x24>
 8003adc:	4b07      	ldr	r3, [pc, #28]	; (8003afc <__assert_func+0x30>)
 8003ade:	9100      	str	r1, [sp, #0]
 8003ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ae4:	4906      	ldr	r1, [pc, #24]	; (8003b00 <__assert_func+0x34>)
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	f000 f80e 	bl	8003b08 <fiprintf>
 8003aec:	f000 faa4 	bl	8004038 <abort>
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <__assert_func+0x38>)
 8003af2:	461c      	mov	r4, r3
 8003af4:	e7f3      	b.n	8003ade <__assert_func+0x12>
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	08004aed 	.word	0x08004aed
 8003b00:	08004afa 	.word	0x08004afa
 8003b04:	08004b28 	.word	0x08004b28

08003b08 <fiprintf>:
 8003b08:	b40e      	push	{r1, r2, r3}
 8003b0a:	b503      	push	{r0, r1, lr}
 8003b0c:	4601      	mov	r1, r0
 8003b0e:	ab03      	add	r3, sp, #12
 8003b10:	4805      	ldr	r0, [pc, #20]	; (8003b28 <fiprintf+0x20>)
 8003b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b16:	6800      	ldr	r0, [r0, #0]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	f000 f88f 	bl	8003c3c <_vfiprintf_r>
 8003b1e:	b002      	add	sp, #8
 8003b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b24:	b003      	add	sp, #12
 8003b26:	4770      	bx	lr
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <__ascii_mbtowc>:
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	b901      	cbnz	r1, 8003b32 <__ascii_mbtowc+0x6>
 8003b30:	a901      	add	r1, sp, #4
 8003b32:	b142      	cbz	r2, 8003b46 <__ascii_mbtowc+0x1a>
 8003b34:	b14b      	cbz	r3, 8003b4a <__ascii_mbtowc+0x1e>
 8003b36:	7813      	ldrb	r3, [r2, #0]
 8003b38:	600b      	str	r3, [r1, #0]
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	1e10      	subs	r0, r2, #0
 8003b3e:	bf18      	it	ne
 8003b40:	2001      	movne	r0, #1
 8003b42:	b002      	add	sp, #8
 8003b44:	4770      	bx	lr
 8003b46:	4610      	mov	r0, r2
 8003b48:	e7fb      	b.n	8003b42 <__ascii_mbtowc+0x16>
 8003b4a:	f06f 0001 	mvn.w	r0, #1
 8003b4e:	e7f8      	b.n	8003b42 <__ascii_mbtowc+0x16>

08003b50 <memmove>:
 8003b50:	4288      	cmp	r0, r1
 8003b52:	b510      	push	{r4, lr}
 8003b54:	eb01 0402 	add.w	r4, r1, r2
 8003b58:	d902      	bls.n	8003b60 <memmove+0x10>
 8003b5a:	4284      	cmp	r4, r0
 8003b5c:	4623      	mov	r3, r4
 8003b5e:	d807      	bhi.n	8003b70 <memmove+0x20>
 8003b60:	1e43      	subs	r3, r0, #1
 8003b62:	42a1      	cmp	r1, r4
 8003b64:	d008      	beq.n	8003b78 <memmove+0x28>
 8003b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b6e:	e7f8      	b.n	8003b62 <memmove+0x12>
 8003b70:	4402      	add	r2, r0
 8003b72:	4601      	mov	r1, r0
 8003b74:	428a      	cmp	r2, r1
 8003b76:	d100      	bne.n	8003b7a <memmove+0x2a>
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b82:	e7f7      	b.n	8003b74 <memmove+0x24>

08003b84 <__malloc_lock>:
 8003b84:	4801      	ldr	r0, [pc, #4]	; (8003b8c <__malloc_lock+0x8>)
 8003b86:	f000 bc17 	b.w	80043b8 <__retarget_lock_acquire_recursive>
 8003b8a:	bf00      	nop
 8003b8c:	200003c4 	.word	0x200003c4

08003b90 <__malloc_unlock>:
 8003b90:	4801      	ldr	r0, [pc, #4]	; (8003b98 <__malloc_unlock+0x8>)
 8003b92:	f000 bc12 	b.w	80043ba <__retarget_lock_release_recursive>
 8003b96:	bf00      	nop
 8003b98:	200003c4 	.word	0x200003c4

08003b9c <_realloc_r>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	460e      	mov	r6, r1
 8003ba4:	b921      	cbnz	r1, 8003bb0 <_realloc_r+0x14>
 8003ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003baa:	4611      	mov	r1, r2
 8003bac:	f7ff bdc8 	b.w	8003740 <_malloc_r>
 8003bb0:	b922      	cbnz	r2, 8003bbc <_realloc_r+0x20>
 8003bb2:	f7ff fd75 	bl	80036a0 <_free_r>
 8003bb6:	4625      	mov	r5, r4
 8003bb8:	4628      	mov	r0, r5
 8003bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bbc:	f000 fc62 	bl	8004484 <_malloc_usable_size_r>
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d20f      	bcs.n	8003be4 <_realloc_r+0x48>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f7ff fdba 	bl	8003740 <_malloc_r>
 8003bcc:	4605      	mov	r5, r0
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0f2      	beq.n	8003bb8 <_realloc_r+0x1c>
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	f7ff f9c7 	bl	8002f68 <memcpy>
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f7ff fd5f 	bl	80036a0 <_free_r>
 8003be2:	e7e9      	b.n	8003bb8 <_realloc_r+0x1c>
 8003be4:	4635      	mov	r5, r6
 8003be6:	e7e7      	b.n	8003bb8 <_realloc_r+0x1c>

08003be8 <__sfputc_r>:
 8003be8:	6893      	ldr	r3, [r2, #8]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	b410      	push	{r4}
 8003bf0:	6093      	str	r3, [r2, #8]
 8003bf2:	da08      	bge.n	8003c06 <__sfputc_r+0x1e>
 8003bf4:	6994      	ldr	r4, [r2, #24]
 8003bf6:	42a3      	cmp	r3, r4
 8003bf8:	db01      	blt.n	8003bfe <__sfputc_r+0x16>
 8003bfa:	290a      	cmp	r1, #10
 8003bfc:	d103      	bne.n	8003c06 <__sfputc_r+0x1e>
 8003bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c02:	f000 b94b 	b.w	8003e9c <__swbuf_r>
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	1c58      	adds	r0, r3, #1
 8003c0a:	6010      	str	r0, [r2, #0]
 8003c0c:	7019      	strb	r1, [r3, #0]
 8003c0e:	4608      	mov	r0, r1
 8003c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <__sfputs_r>:
 8003c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c18:	4606      	mov	r6, r0
 8003c1a:	460f      	mov	r7, r1
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	18d5      	adds	r5, r2, r3
 8003c20:	42ac      	cmp	r4, r5
 8003c22:	d101      	bne.n	8003c28 <__sfputs_r+0x12>
 8003c24:	2000      	movs	r0, #0
 8003c26:	e007      	b.n	8003c38 <__sfputs_r+0x22>
 8003c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c2c:	463a      	mov	r2, r7
 8003c2e:	4630      	mov	r0, r6
 8003c30:	f7ff ffda 	bl	8003be8 <__sfputc_r>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d1f3      	bne.n	8003c20 <__sfputs_r+0xa>
 8003c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c3c <_vfiprintf_r>:
 8003c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c40:	460d      	mov	r5, r1
 8003c42:	b09d      	sub	sp, #116	; 0x74
 8003c44:	4614      	mov	r4, r2
 8003c46:	4698      	mov	r8, r3
 8003c48:	4606      	mov	r6, r0
 8003c4a:	b118      	cbz	r0, 8003c54 <_vfiprintf_r+0x18>
 8003c4c:	6983      	ldr	r3, [r0, #24]
 8003c4e:	b90b      	cbnz	r3, 8003c54 <_vfiprintf_r+0x18>
 8003c50:	f000 fb14 	bl	800427c <__sinit>
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <_vfiprintf_r+0x240>)
 8003c56:	429d      	cmp	r5, r3
 8003c58:	d11b      	bne.n	8003c92 <_vfiprintf_r+0x56>
 8003c5a:	6875      	ldr	r5, [r6, #4]
 8003c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c5e:	07d9      	lsls	r1, r3, #31
 8003c60:	d405      	bmi.n	8003c6e <_vfiprintf_r+0x32>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	059a      	lsls	r2, r3, #22
 8003c66:	d402      	bmi.n	8003c6e <_vfiprintf_r+0x32>
 8003c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c6a:	f000 fba5 	bl	80043b8 <__retarget_lock_acquire_recursive>
 8003c6e:	89ab      	ldrh	r3, [r5, #12]
 8003c70:	071b      	lsls	r3, r3, #28
 8003c72:	d501      	bpl.n	8003c78 <_vfiprintf_r+0x3c>
 8003c74:	692b      	ldr	r3, [r5, #16]
 8003c76:	b9eb      	cbnz	r3, 8003cb4 <_vfiprintf_r+0x78>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f96e 	bl	8003f5c <__swsetup_r>
 8003c80:	b1c0      	cbz	r0, 8003cb4 <_vfiprintf_r+0x78>
 8003c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c84:	07dc      	lsls	r4, r3, #31
 8003c86:	d50e      	bpl.n	8003ca6 <_vfiprintf_r+0x6a>
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	b01d      	add	sp, #116	; 0x74
 8003c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c92:	4b7b      	ldr	r3, [pc, #492]	; (8003e80 <_vfiprintf_r+0x244>)
 8003c94:	429d      	cmp	r5, r3
 8003c96:	d101      	bne.n	8003c9c <_vfiprintf_r+0x60>
 8003c98:	68b5      	ldr	r5, [r6, #8]
 8003c9a:	e7df      	b.n	8003c5c <_vfiprintf_r+0x20>
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <_vfiprintf_r+0x248>)
 8003c9e:	429d      	cmp	r5, r3
 8003ca0:	bf08      	it	eq
 8003ca2:	68f5      	ldreq	r5, [r6, #12]
 8003ca4:	e7da      	b.n	8003c5c <_vfiprintf_r+0x20>
 8003ca6:	89ab      	ldrh	r3, [r5, #12]
 8003ca8:	0598      	lsls	r0, r3, #22
 8003caa:	d4ed      	bmi.n	8003c88 <_vfiprintf_r+0x4c>
 8003cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cae:	f000 fb84 	bl	80043ba <__retarget_lock_release_recursive>
 8003cb2:	e7e9      	b.n	8003c88 <_vfiprintf_r+0x4c>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb8:	2320      	movs	r3, #32
 8003cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc2:	2330      	movs	r3, #48	; 0x30
 8003cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e88 <_vfiprintf_r+0x24c>
 8003cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ccc:	f04f 0901 	mov.w	r9, #1
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	469a      	mov	sl, r3
 8003cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd8:	b10a      	cbz	r2, 8003cde <_vfiprintf_r+0xa2>
 8003cda:	2a25      	cmp	r2, #37	; 0x25
 8003cdc:	d1f9      	bne.n	8003cd2 <_vfiprintf_r+0x96>
 8003cde:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce2:	d00b      	beq.n	8003cfc <_vfiprintf_r+0xc0>
 8003ce4:	465b      	mov	r3, fp
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7ff ff93 	bl	8003c16 <__sfputs_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f000 80aa 	beq.w	8003e4a <_vfiprintf_r+0x20e>
 8003cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cf8:	445a      	add	r2, fp
 8003cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8003cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a2 	beq.w	8003e4a <_vfiprintf_r+0x20e>
 8003d06:	2300      	movs	r3, #0
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d10:	f10a 0a01 	add.w	sl, sl, #1
 8003d14:	9304      	str	r3, [sp, #16]
 8003d16:	9307      	str	r3, [sp, #28]
 8003d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d1e:	4654      	mov	r4, sl
 8003d20:	2205      	movs	r2, #5
 8003d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d26:	4858      	ldr	r0, [pc, #352]	; (8003e88 <_vfiprintf_r+0x24c>)
 8003d28:	f7fc fa5a 	bl	80001e0 <memchr>
 8003d2c:	9a04      	ldr	r2, [sp, #16]
 8003d2e:	b9d8      	cbnz	r0, 8003d68 <_vfiprintf_r+0x12c>
 8003d30:	06d1      	lsls	r1, r2, #27
 8003d32:	bf44      	itt	mi
 8003d34:	2320      	movmi	r3, #32
 8003d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d3a:	0713      	lsls	r3, r2, #28
 8003d3c:	bf44      	itt	mi
 8003d3e:	232b      	movmi	r3, #43	; 0x2b
 8003d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d44:	f89a 3000 	ldrb.w	r3, [sl]
 8003d48:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4a:	d015      	beq.n	8003d78 <_vfiprintf_r+0x13c>
 8003d4c:	9a07      	ldr	r2, [sp, #28]
 8003d4e:	4654      	mov	r4, sl
 8003d50:	2000      	movs	r0, #0
 8003d52:	f04f 0c0a 	mov.w	ip, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5c:	3b30      	subs	r3, #48	; 0x30
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d94e      	bls.n	8003e00 <_vfiprintf_r+0x1c4>
 8003d62:	b1b0      	cbz	r0, 8003d92 <_vfiprintf_r+0x156>
 8003d64:	9207      	str	r2, [sp, #28]
 8003d66:	e014      	b.n	8003d92 <_vfiprintf_r+0x156>
 8003d68:	eba0 0308 	sub.w	r3, r0, r8
 8003d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	46a2      	mov	sl, r4
 8003d76:	e7d2      	b.n	8003d1e <_vfiprintf_r+0xe2>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	1d19      	adds	r1, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	9103      	str	r1, [sp, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfbb      	ittet	lt
 8003d84:	425b      	neglt	r3, r3
 8003d86:	f042 0202 	orrlt.w	r2, r2, #2
 8003d8a:	9307      	strge	r3, [sp, #28]
 8003d8c:	9307      	strlt	r3, [sp, #28]
 8003d8e:	bfb8      	it	lt
 8003d90:	9204      	strlt	r2, [sp, #16]
 8003d92:	7823      	ldrb	r3, [r4, #0]
 8003d94:	2b2e      	cmp	r3, #46	; 0x2e
 8003d96:	d10c      	bne.n	8003db2 <_vfiprintf_r+0x176>
 8003d98:	7863      	ldrb	r3, [r4, #1]
 8003d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9c:	d135      	bne.n	8003e0a <_vfiprintf_r+0x1ce>
 8003d9e:	9b03      	ldr	r3, [sp, #12]
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	9203      	str	r2, [sp, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bfb8      	it	lt
 8003daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dae:	3402      	adds	r4, #2
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e98 <_vfiprintf_r+0x25c>
 8003db6:	7821      	ldrb	r1, [r4, #0]
 8003db8:	2203      	movs	r2, #3
 8003dba:	4650      	mov	r0, sl
 8003dbc:	f7fc fa10 	bl	80001e0 <memchr>
 8003dc0:	b140      	cbz	r0, 8003dd4 <_vfiprintf_r+0x198>
 8003dc2:	2340      	movs	r3, #64	; 0x40
 8003dc4:	eba0 000a 	sub.w	r0, r0, sl
 8003dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	4303      	orrs	r3, r0
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	9304      	str	r3, [sp, #16]
 8003dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd8:	482c      	ldr	r0, [pc, #176]	; (8003e8c <_vfiprintf_r+0x250>)
 8003dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dde:	2206      	movs	r2, #6
 8003de0:	f7fc f9fe 	bl	80001e0 <memchr>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d03f      	beq.n	8003e68 <_vfiprintf_r+0x22c>
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <_vfiprintf_r+0x254>)
 8003dea:	bb1b      	cbnz	r3, 8003e34 <_vfiprintf_r+0x1f8>
 8003dec:	9b03      	ldr	r3, [sp, #12]
 8003dee:	3307      	adds	r3, #7
 8003df0:	f023 0307 	bic.w	r3, r3, #7
 8003df4:	3308      	adds	r3, #8
 8003df6:	9303      	str	r3, [sp, #12]
 8003df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dfa:	443b      	add	r3, r7
 8003dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dfe:	e767      	b.n	8003cd0 <_vfiprintf_r+0x94>
 8003e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e04:	460c      	mov	r4, r1
 8003e06:	2001      	movs	r0, #1
 8003e08:	e7a5      	b.n	8003d56 <_vfiprintf_r+0x11a>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	3401      	adds	r4, #1
 8003e0e:	9305      	str	r3, [sp, #20]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 0c0a 	mov.w	ip, #10
 8003e16:	4620      	mov	r0, r4
 8003e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e1c:	3a30      	subs	r2, #48	; 0x30
 8003e1e:	2a09      	cmp	r2, #9
 8003e20:	d903      	bls.n	8003e2a <_vfiprintf_r+0x1ee>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0c5      	beq.n	8003db2 <_vfiprintf_r+0x176>
 8003e26:	9105      	str	r1, [sp, #20]
 8003e28:	e7c3      	b.n	8003db2 <_vfiprintf_r+0x176>
 8003e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e2e:	4604      	mov	r4, r0
 8003e30:	2301      	movs	r3, #1
 8003e32:	e7f0      	b.n	8003e16 <_vfiprintf_r+0x1da>
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <_vfiprintf_r+0x258>)
 8003e3c:	a904      	add	r1, sp, #16
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7fd fd94 	bl	800196c <_printf_float>
 8003e44:	4607      	mov	r7, r0
 8003e46:	1c78      	adds	r0, r7, #1
 8003e48:	d1d6      	bne.n	8003df8 <_vfiprintf_r+0x1bc>
 8003e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e4c:	07d9      	lsls	r1, r3, #31
 8003e4e:	d405      	bmi.n	8003e5c <_vfiprintf_r+0x220>
 8003e50:	89ab      	ldrh	r3, [r5, #12]
 8003e52:	059a      	lsls	r2, r3, #22
 8003e54:	d402      	bmi.n	8003e5c <_vfiprintf_r+0x220>
 8003e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e58:	f000 faaf 	bl	80043ba <__retarget_lock_release_recursive>
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	065b      	lsls	r3, r3, #25
 8003e60:	f53f af12 	bmi.w	8003c88 <_vfiprintf_r+0x4c>
 8003e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e66:	e711      	b.n	8003c8c <_vfiprintf_r+0x50>
 8003e68:	ab03      	add	r3, sp, #12
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	462a      	mov	r2, r5
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <_vfiprintf_r+0x258>)
 8003e70:	a904      	add	r1, sp, #16
 8003e72:	4630      	mov	r0, r6
 8003e74:	f7fe f81e 	bl	8001eb4 <_printf_i>
 8003e78:	e7e4      	b.n	8003e44 <_vfiprintf_r+0x208>
 8003e7a:	bf00      	nop
 8003e7c:	08004b54 	.word	0x08004b54
 8003e80:	08004b74 	.word	0x08004b74
 8003e84:	08004b34 	.word	0x08004b34
 8003e88:	08004adc 	.word	0x08004adc
 8003e8c:	08004ae6 	.word	0x08004ae6
 8003e90:	0800196d 	.word	0x0800196d
 8003e94:	08003c17 	.word	0x08003c17
 8003e98:	08004ae2 	.word	0x08004ae2

08003e9c <__swbuf_r>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	460e      	mov	r6, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	b118      	cbz	r0, 8003eae <__swbuf_r+0x12>
 8003ea6:	6983      	ldr	r3, [r0, #24]
 8003ea8:	b90b      	cbnz	r3, 8003eae <__swbuf_r+0x12>
 8003eaa:	f000 f9e7 	bl	800427c <__sinit>
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <__swbuf_r+0x98>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d12b      	bne.n	8003f0c <__swbuf_r+0x70>
 8003eb4:	686c      	ldr	r4, [r5, #4]
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	071a      	lsls	r2, r3, #28
 8003ebe:	d52f      	bpl.n	8003f20 <__swbuf_r+0x84>
 8003ec0:	6923      	ldr	r3, [r4, #16]
 8003ec2:	b36b      	cbz	r3, 8003f20 <__swbuf_r+0x84>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1ac0      	subs	r0, r0, r3
 8003eca:	6963      	ldr	r3, [r4, #20]
 8003ecc:	b2f6      	uxtb	r6, r6
 8003ece:	4283      	cmp	r3, r0
 8003ed0:	4637      	mov	r7, r6
 8003ed2:	dc04      	bgt.n	8003ede <__swbuf_r+0x42>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f93c 	bl	8004154 <_fflush_r>
 8003edc:	bb30      	cbnz	r0, 8003f2c <__swbuf_r+0x90>
 8003ede:	68a3      	ldr	r3, [r4, #8]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	6022      	str	r2, [r4, #0]
 8003eea:	701e      	strb	r6, [r3, #0]
 8003eec:	6963      	ldr	r3, [r4, #20]
 8003eee:	3001      	adds	r0, #1
 8003ef0:	4283      	cmp	r3, r0
 8003ef2:	d004      	beq.n	8003efe <__swbuf_r+0x62>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	07db      	lsls	r3, r3, #31
 8003ef8:	d506      	bpl.n	8003f08 <__swbuf_r+0x6c>
 8003efa:	2e0a      	cmp	r6, #10
 8003efc:	d104      	bne.n	8003f08 <__swbuf_r+0x6c>
 8003efe:	4621      	mov	r1, r4
 8003f00:	4628      	mov	r0, r5
 8003f02:	f000 f927 	bl	8004154 <_fflush_r>
 8003f06:	b988      	cbnz	r0, 8003f2c <__swbuf_r+0x90>
 8003f08:	4638      	mov	r0, r7
 8003f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <__swbuf_r+0x9c>)
 8003f0e:	429c      	cmp	r4, r3
 8003f10:	d101      	bne.n	8003f16 <__swbuf_r+0x7a>
 8003f12:	68ac      	ldr	r4, [r5, #8]
 8003f14:	e7cf      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <__swbuf_r+0xa0>)
 8003f18:	429c      	cmp	r4, r3
 8003f1a:	bf08      	it	eq
 8003f1c:	68ec      	ldreq	r4, [r5, #12]
 8003f1e:	e7ca      	b.n	8003eb6 <__swbuf_r+0x1a>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f81a 	bl	8003f5c <__swsetup_r>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	d0cb      	beq.n	8003ec4 <__swbuf_r+0x28>
 8003f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8003f30:	e7ea      	b.n	8003f08 <__swbuf_r+0x6c>
 8003f32:	bf00      	nop
 8003f34:	08004b54 	.word	0x08004b54
 8003f38:	08004b74 	.word	0x08004b74
 8003f3c:	08004b34 	.word	0x08004b34

08003f40 <__ascii_wctomb>:
 8003f40:	b149      	cbz	r1, 8003f56 <__ascii_wctomb+0x16>
 8003f42:	2aff      	cmp	r2, #255	; 0xff
 8003f44:	bf85      	ittet	hi
 8003f46:	238a      	movhi	r3, #138	; 0x8a
 8003f48:	6003      	strhi	r3, [r0, #0]
 8003f4a:	700a      	strbls	r2, [r1, #0]
 8003f4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003f50:	bf98      	it	ls
 8003f52:	2001      	movls	r0, #1
 8003f54:	4770      	bx	lr
 8003f56:	4608      	mov	r0, r1
 8003f58:	4770      	bx	lr
	...

08003f5c <__swsetup_r>:
 8003f5c:	4b32      	ldr	r3, [pc, #200]	; (8004028 <__swsetup_r+0xcc>)
 8003f5e:	b570      	push	{r4, r5, r6, lr}
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	4606      	mov	r6, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	b125      	cbz	r5, 8003f72 <__swsetup_r+0x16>
 8003f68:	69ab      	ldr	r3, [r5, #24]
 8003f6a:	b913      	cbnz	r3, 8003f72 <__swsetup_r+0x16>
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f985 	bl	800427c <__sinit>
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <__swsetup_r+0xd0>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d10f      	bne.n	8003f98 <__swsetup_r+0x3c>
 8003f78:	686c      	ldr	r4, [r5, #4]
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f80:	0719      	lsls	r1, r3, #28
 8003f82:	d42c      	bmi.n	8003fde <__swsetup_r+0x82>
 8003f84:	06dd      	lsls	r5, r3, #27
 8003f86:	d411      	bmi.n	8003fac <__swsetup_r+0x50>
 8003f88:	2309      	movs	r3, #9
 8003f8a:	6033      	str	r3, [r6, #0]
 8003f8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	e03e      	b.n	8004016 <__swsetup_r+0xba>
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <__swsetup_r+0xd4>)
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d101      	bne.n	8003fa2 <__swsetup_r+0x46>
 8003f9e:	68ac      	ldr	r4, [r5, #8]
 8003fa0:	e7eb      	b.n	8003f7a <__swsetup_r+0x1e>
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <__swsetup_r+0xd8>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	bf08      	it	eq
 8003fa8:	68ec      	ldreq	r4, [r5, #12]
 8003faa:	e7e6      	b.n	8003f7a <__swsetup_r+0x1e>
 8003fac:	0758      	lsls	r0, r3, #29
 8003fae:	d512      	bpl.n	8003fd6 <__swsetup_r+0x7a>
 8003fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb2:	b141      	cbz	r1, 8003fc6 <__swsetup_r+0x6a>
 8003fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d002      	beq.n	8003fc2 <__swsetup_r+0x66>
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	f7ff fb6f 	bl	80036a0 <_free_r>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fcc:	81a3      	strh	r3, [r4, #12]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	6923      	ldr	r3, [r4, #16]
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f043 0308 	orr.w	r3, r3, #8
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	b94b      	cbnz	r3, 8003ff6 <__swsetup_r+0x9a>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d003      	beq.n	8003ff6 <__swsetup_r+0x9a>
 8003fee:	4621      	mov	r1, r4
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	f000 fa07 	bl	8004404 <__smakebuf_r>
 8003ff6:	89a0      	ldrh	r0, [r4, #12]
 8003ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ffc:	f010 0301 	ands.w	r3, r0, #1
 8004000:	d00a      	beq.n	8004018 <__swsetup_r+0xbc>
 8004002:	2300      	movs	r3, #0
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	425b      	negs	r3, r3
 800400a:	61a3      	str	r3, [r4, #24]
 800400c:	6923      	ldr	r3, [r4, #16]
 800400e:	b943      	cbnz	r3, 8004022 <__swsetup_r+0xc6>
 8004010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004014:	d1ba      	bne.n	8003f8c <__swsetup_r+0x30>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	0781      	lsls	r1, r0, #30
 800401a:	bf58      	it	pl
 800401c:	6963      	ldrpl	r3, [r4, #20]
 800401e:	60a3      	str	r3, [r4, #8]
 8004020:	e7f4      	b.n	800400c <__swsetup_r+0xb0>
 8004022:	2000      	movs	r0, #0
 8004024:	e7f7      	b.n	8004016 <__swsetup_r+0xba>
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c
 800402c:	08004b54 	.word	0x08004b54
 8004030:	08004b74 	.word	0x08004b74
 8004034:	08004b34 	.word	0x08004b34

08004038 <abort>:
 8004038:	b508      	push	{r3, lr}
 800403a:	2006      	movs	r0, #6
 800403c:	f000 fa52 	bl	80044e4 <raise>
 8004040:	2001      	movs	r0, #1
 8004042:	f7fd fa9b 	bl	800157c <_exit>
	...

08004048 <__sflush_r>:
 8004048:	898a      	ldrh	r2, [r1, #12]
 800404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404e:	4605      	mov	r5, r0
 8004050:	0710      	lsls	r0, r2, #28
 8004052:	460c      	mov	r4, r1
 8004054:	d458      	bmi.n	8004108 <__sflush_r+0xc0>
 8004056:	684b      	ldr	r3, [r1, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	dc05      	bgt.n	8004068 <__sflush_r+0x20>
 800405c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	dc02      	bgt.n	8004068 <__sflush_r+0x20>
 8004062:	2000      	movs	r0, #0
 8004064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800406a:	2e00      	cmp	r6, #0
 800406c:	d0f9      	beq.n	8004062 <__sflush_r+0x1a>
 800406e:	2300      	movs	r3, #0
 8004070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004074:	682f      	ldr	r7, [r5, #0]
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	d032      	beq.n	80040e0 <__sflush_r+0x98>
 800407a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	075a      	lsls	r2, r3, #29
 8004080:	d505      	bpl.n	800408e <__sflush_r+0x46>
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	1ac0      	subs	r0, r0, r3
 8004086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004088:	b10b      	cbz	r3, 800408e <__sflush_r+0x46>
 800408a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800408c:	1ac0      	subs	r0, r0, r3
 800408e:	2300      	movs	r3, #0
 8004090:	4602      	mov	r2, r0
 8004092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004094:	6a21      	ldr	r1, [r4, #32]
 8004096:	4628      	mov	r0, r5
 8004098:	47b0      	blx	r6
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	d106      	bne.n	80040ae <__sflush_r+0x66>
 80040a0:	6829      	ldr	r1, [r5, #0]
 80040a2:	291d      	cmp	r1, #29
 80040a4:	d82c      	bhi.n	8004100 <__sflush_r+0xb8>
 80040a6:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <__sflush_r+0x108>)
 80040a8:	40ca      	lsrs	r2, r1
 80040aa:	07d6      	lsls	r6, r2, #31
 80040ac:	d528      	bpl.n	8004100 <__sflush_r+0xb8>
 80040ae:	2200      	movs	r2, #0
 80040b0:	6062      	str	r2, [r4, #4]
 80040b2:	04d9      	lsls	r1, r3, #19
 80040b4:	6922      	ldr	r2, [r4, #16]
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	d504      	bpl.n	80040c4 <__sflush_r+0x7c>
 80040ba:	1c42      	adds	r2, r0, #1
 80040bc:	d101      	bne.n	80040c2 <__sflush_r+0x7a>
 80040be:	682b      	ldr	r3, [r5, #0]
 80040c0:	b903      	cbnz	r3, 80040c4 <__sflush_r+0x7c>
 80040c2:	6560      	str	r0, [r4, #84]	; 0x54
 80040c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040c6:	602f      	str	r7, [r5, #0]
 80040c8:	2900      	cmp	r1, #0
 80040ca:	d0ca      	beq.n	8004062 <__sflush_r+0x1a>
 80040cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d0:	4299      	cmp	r1, r3
 80040d2:	d002      	beq.n	80040da <__sflush_r+0x92>
 80040d4:	4628      	mov	r0, r5
 80040d6:	f7ff fae3 	bl	80036a0 <_free_r>
 80040da:	2000      	movs	r0, #0
 80040dc:	6360      	str	r0, [r4, #52]	; 0x34
 80040de:	e7c1      	b.n	8004064 <__sflush_r+0x1c>
 80040e0:	6a21      	ldr	r1, [r4, #32]
 80040e2:	2301      	movs	r3, #1
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b0      	blx	r6
 80040e8:	1c41      	adds	r1, r0, #1
 80040ea:	d1c7      	bne.n	800407c <__sflush_r+0x34>
 80040ec:	682b      	ldr	r3, [r5, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0c4      	beq.n	800407c <__sflush_r+0x34>
 80040f2:	2b1d      	cmp	r3, #29
 80040f4:	d001      	beq.n	80040fa <__sflush_r+0xb2>
 80040f6:	2b16      	cmp	r3, #22
 80040f8:	d101      	bne.n	80040fe <__sflush_r+0xb6>
 80040fa:	602f      	str	r7, [r5, #0]
 80040fc:	e7b1      	b.n	8004062 <__sflush_r+0x1a>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004104:	81a3      	strh	r3, [r4, #12]
 8004106:	e7ad      	b.n	8004064 <__sflush_r+0x1c>
 8004108:	690f      	ldr	r7, [r1, #16]
 800410a:	2f00      	cmp	r7, #0
 800410c:	d0a9      	beq.n	8004062 <__sflush_r+0x1a>
 800410e:	0793      	lsls	r3, r2, #30
 8004110:	680e      	ldr	r6, [r1, #0]
 8004112:	bf08      	it	eq
 8004114:	694b      	ldreq	r3, [r1, #20]
 8004116:	600f      	str	r7, [r1, #0]
 8004118:	bf18      	it	ne
 800411a:	2300      	movne	r3, #0
 800411c:	eba6 0807 	sub.w	r8, r6, r7
 8004120:	608b      	str	r3, [r1, #8]
 8004122:	f1b8 0f00 	cmp.w	r8, #0
 8004126:	dd9c      	ble.n	8004062 <__sflush_r+0x1a>
 8004128:	6a21      	ldr	r1, [r4, #32]
 800412a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800412c:	4643      	mov	r3, r8
 800412e:	463a      	mov	r2, r7
 8004130:	4628      	mov	r0, r5
 8004132:	47b0      	blx	r6
 8004134:	2800      	cmp	r0, #0
 8004136:	dc06      	bgt.n	8004146 <__sflush_r+0xfe>
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	e78e      	b.n	8004064 <__sflush_r+0x1c>
 8004146:	4407      	add	r7, r0
 8004148:	eba8 0800 	sub.w	r8, r8, r0
 800414c:	e7e9      	b.n	8004122 <__sflush_r+0xda>
 800414e:	bf00      	nop
 8004150:	20400001 	.word	0x20400001

08004154 <_fflush_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	4605      	mov	r5, r0
 800415a:	460c      	mov	r4, r1
 800415c:	b913      	cbnz	r3, 8004164 <_fflush_r+0x10>
 800415e:	2500      	movs	r5, #0
 8004160:	4628      	mov	r0, r5
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	b118      	cbz	r0, 800416e <_fflush_r+0x1a>
 8004166:	6983      	ldr	r3, [r0, #24]
 8004168:	b90b      	cbnz	r3, 800416e <_fflush_r+0x1a>
 800416a:	f000 f887 	bl	800427c <__sinit>
 800416e:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <_fflush_r+0x6c>)
 8004170:	429c      	cmp	r4, r3
 8004172:	d11b      	bne.n	80041ac <_fflush_r+0x58>
 8004174:	686c      	ldr	r4, [r5, #4]
 8004176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0ef      	beq.n	800415e <_fflush_r+0xa>
 800417e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004180:	07d0      	lsls	r0, r2, #31
 8004182:	d404      	bmi.n	800418e <_fflush_r+0x3a>
 8004184:	0599      	lsls	r1, r3, #22
 8004186:	d402      	bmi.n	800418e <_fflush_r+0x3a>
 8004188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800418a:	f000 f915 	bl	80043b8 <__retarget_lock_acquire_recursive>
 800418e:	4628      	mov	r0, r5
 8004190:	4621      	mov	r1, r4
 8004192:	f7ff ff59 	bl	8004048 <__sflush_r>
 8004196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004198:	07da      	lsls	r2, r3, #31
 800419a:	4605      	mov	r5, r0
 800419c:	d4e0      	bmi.n	8004160 <_fflush_r+0xc>
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	059b      	lsls	r3, r3, #22
 80041a2:	d4dd      	bmi.n	8004160 <_fflush_r+0xc>
 80041a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a6:	f000 f908 	bl	80043ba <__retarget_lock_release_recursive>
 80041aa:	e7d9      	b.n	8004160 <_fflush_r+0xc>
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <_fflush_r+0x70>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d101      	bne.n	80041b6 <_fflush_r+0x62>
 80041b2:	68ac      	ldr	r4, [r5, #8]
 80041b4:	e7df      	b.n	8004176 <_fflush_r+0x22>
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <_fflush_r+0x74>)
 80041b8:	429c      	cmp	r4, r3
 80041ba:	bf08      	it	eq
 80041bc:	68ec      	ldreq	r4, [r5, #12]
 80041be:	e7da      	b.n	8004176 <_fflush_r+0x22>
 80041c0:	08004b54 	.word	0x08004b54
 80041c4:	08004b74 	.word	0x08004b74
 80041c8:	08004b34 	.word	0x08004b34

080041cc <std>:
 80041cc:	2300      	movs	r3, #0
 80041ce:	b510      	push	{r4, lr}
 80041d0:	4604      	mov	r4, r0
 80041d2:	e9c0 3300 	strd	r3, r3, [r0]
 80041d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041da:	6083      	str	r3, [r0, #8]
 80041dc:	8181      	strh	r1, [r0, #12]
 80041de:	6643      	str	r3, [r0, #100]	; 0x64
 80041e0:	81c2      	strh	r2, [r0, #14]
 80041e2:	6183      	str	r3, [r0, #24]
 80041e4:	4619      	mov	r1, r3
 80041e6:	2208      	movs	r2, #8
 80041e8:	305c      	adds	r0, #92	; 0x5c
 80041ea:	f7fd fb17 	bl	800181c <memset>
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <std+0x38>)
 80041f0:	6263      	str	r3, [r4, #36]	; 0x24
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <std+0x3c>)
 80041f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <std+0x40>)
 80041f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <std+0x44>)
 80041fc:	6224      	str	r4, [r4, #32]
 80041fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004200:	bd10      	pop	{r4, pc}
 8004202:	bf00      	nop
 8004204:	0800451d 	.word	0x0800451d
 8004208:	0800453f 	.word	0x0800453f
 800420c:	08004577 	.word	0x08004577
 8004210:	0800459b 	.word	0x0800459b

08004214 <_cleanup_r>:
 8004214:	4901      	ldr	r1, [pc, #4]	; (800421c <_cleanup_r+0x8>)
 8004216:	f000 b8af 	b.w	8004378 <_fwalk_reent>
 800421a:	bf00      	nop
 800421c:	08004155 	.word	0x08004155

08004220 <__sfmoreglue>:
 8004220:	b570      	push	{r4, r5, r6, lr}
 8004222:	1e4a      	subs	r2, r1, #1
 8004224:	2568      	movs	r5, #104	; 0x68
 8004226:	4355      	muls	r5, r2
 8004228:	460e      	mov	r6, r1
 800422a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800422e:	f7ff fa87 	bl	8003740 <_malloc_r>
 8004232:	4604      	mov	r4, r0
 8004234:	b140      	cbz	r0, 8004248 <__sfmoreglue+0x28>
 8004236:	2100      	movs	r1, #0
 8004238:	e9c0 1600 	strd	r1, r6, [r0]
 800423c:	300c      	adds	r0, #12
 800423e:	60a0      	str	r0, [r4, #8]
 8004240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004244:	f7fd faea 	bl	800181c <memset>
 8004248:	4620      	mov	r0, r4
 800424a:	bd70      	pop	{r4, r5, r6, pc}

0800424c <__sfp_lock_acquire>:
 800424c:	4801      	ldr	r0, [pc, #4]	; (8004254 <__sfp_lock_acquire+0x8>)
 800424e:	f000 b8b3 	b.w	80043b8 <__retarget_lock_acquire_recursive>
 8004252:	bf00      	nop
 8004254:	200003c8 	.word	0x200003c8

08004258 <__sfp_lock_release>:
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <__sfp_lock_release+0x8>)
 800425a:	f000 b8ae 	b.w	80043ba <__retarget_lock_release_recursive>
 800425e:	bf00      	nop
 8004260:	200003c8 	.word	0x200003c8

08004264 <__sinit_lock_acquire>:
 8004264:	4801      	ldr	r0, [pc, #4]	; (800426c <__sinit_lock_acquire+0x8>)
 8004266:	f000 b8a7 	b.w	80043b8 <__retarget_lock_acquire_recursive>
 800426a:	bf00      	nop
 800426c:	200003c3 	.word	0x200003c3

08004270 <__sinit_lock_release>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <__sinit_lock_release+0x8>)
 8004272:	f000 b8a2 	b.w	80043ba <__retarget_lock_release_recursive>
 8004276:	bf00      	nop
 8004278:	200003c3 	.word	0x200003c3

0800427c <__sinit>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4604      	mov	r4, r0
 8004280:	f7ff fff0 	bl	8004264 <__sinit_lock_acquire>
 8004284:	69a3      	ldr	r3, [r4, #24]
 8004286:	b11b      	cbz	r3, 8004290 <__sinit+0x14>
 8004288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800428c:	f7ff bff0 	b.w	8004270 <__sinit_lock_release>
 8004290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004294:	6523      	str	r3, [r4, #80]	; 0x50
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <__sinit+0x68>)
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <__sinit+0x6c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	62a2      	str	r2, [r4, #40]	; 0x28
 800429e:	42a3      	cmp	r3, r4
 80042a0:	bf04      	itt	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	61a3      	streq	r3, [r4, #24]
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 f820 	bl	80042ec <__sfp>
 80042ac:	6060      	str	r0, [r4, #4]
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 f81c 	bl	80042ec <__sfp>
 80042b4:	60a0      	str	r0, [r4, #8]
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f818 	bl	80042ec <__sfp>
 80042bc:	2200      	movs	r2, #0
 80042be:	60e0      	str	r0, [r4, #12]
 80042c0:	2104      	movs	r1, #4
 80042c2:	6860      	ldr	r0, [r4, #4]
 80042c4:	f7ff ff82 	bl	80041cc <std>
 80042c8:	68a0      	ldr	r0, [r4, #8]
 80042ca:	2201      	movs	r2, #1
 80042cc:	2109      	movs	r1, #9
 80042ce:	f7ff ff7d 	bl	80041cc <std>
 80042d2:	68e0      	ldr	r0, [r4, #12]
 80042d4:	2202      	movs	r2, #2
 80042d6:	2112      	movs	r1, #18
 80042d8:	f7ff ff78 	bl	80041cc <std>
 80042dc:	2301      	movs	r3, #1
 80042de:	61a3      	str	r3, [r4, #24]
 80042e0:	e7d2      	b.n	8004288 <__sinit+0xc>
 80042e2:	bf00      	nop
 80042e4:	080047b0 	.word	0x080047b0
 80042e8:	08004215 	.word	0x08004215

080042ec <__sfp>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	4607      	mov	r7, r0
 80042f0:	f7ff ffac 	bl	800424c <__sfp_lock_acquire>
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <__sfp+0x84>)
 80042f6:	681e      	ldr	r6, [r3, #0]
 80042f8:	69b3      	ldr	r3, [r6, #24]
 80042fa:	b913      	cbnz	r3, 8004302 <__sfp+0x16>
 80042fc:	4630      	mov	r0, r6
 80042fe:	f7ff ffbd 	bl	800427c <__sinit>
 8004302:	3648      	adds	r6, #72	; 0x48
 8004304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004308:	3b01      	subs	r3, #1
 800430a:	d503      	bpl.n	8004314 <__sfp+0x28>
 800430c:	6833      	ldr	r3, [r6, #0]
 800430e:	b30b      	cbz	r3, 8004354 <__sfp+0x68>
 8004310:	6836      	ldr	r6, [r6, #0]
 8004312:	e7f7      	b.n	8004304 <__sfp+0x18>
 8004314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004318:	b9d5      	cbnz	r5, 8004350 <__sfp+0x64>
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <__sfp+0x88>)
 800431c:	60e3      	str	r3, [r4, #12]
 800431e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004322:	6665      	str	r5, [r4, #100]	; 0x64
 8004324:	f000 f847 	bl	80043b6 <__retarget_lock_init_recursive>
 8004328:	f7ff ff96 	bl	8004258 <__sfp_lock_release>
 800432c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004334:	6025      	str	r5, [r4, #0]
 8004336:	61a5      	str	r5, [r4, #24]
 8004338:	2208      	movs	r2, #8
 800433a:	4629      	mov	r1, r5
 800433c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004340:	f7fd fa6c 	bl	800181c <memset>
 8004344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800434c:	4620      	mov	r0, r4
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	3468      	adds	r4, #104	; 0x68
 8004352:	e7d9      	b.n	8004308 <__sfp+0x1c>
 8004354:	2104      	movs	r1, #4
 8004356:	4638      	mov	r0, r7
 8004358:	f7ff ff62 	bl	8004220 <__sfmoreglue>
 800435c:	4604      	mov	r4, r0
 800435e:	6030      	str	r0, [r6, #0]
 8004360:	2800      	cmp	r0, #0
 8004362:	d1d5      	bne.n	8004310 <__sfp+0x24>
 8004364:	f7ff ff78 	bl	8004258 <__sfp_lock_release>
 8004368:	230c      	movs	r3, #12
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	e7ee      	b.n	800434c <__sfp+0x60>
 800436e:	bf00      	nop
 8004370:	080047b0 	.word	0x080047b0
 8004374:	ffff0001 	.word	0xffff0001

08004378 <_fwalk_reent>:
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800437c:	4606      	mov	r6, r0
 800437e:	4688      	mov	r8, r1
 8004380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004384:	2700      	movs	r7, #0
 8004386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800438a:	f1b9 0901 	subs.w	r9, r9, #1
 800438e:	d505      	bpl.n	800439c <_fwalk_reent+0x24>
 8004390:	6824      	ldr	r4, [r4, #0]
 8004392:	2c00      	cmp	r4, #0
 8004394:	d1f7      	bne.n	8004386 <_fwalk_reent+0xe>
 8004396:	4638      	mov	r0, r7
 8004398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439c:	89ab      	ldrh	r3, [r5, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d907      	bls.n	80043b2 <_fwalk_reent+0x3a>
 80043a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043a6:	3301      	adds	r3, #1
 80043a8:	d003      	beq.n	80043b2 <_fwalk_reent+0x3a>
 80043aa:	4629      	mov	r1, r5
 80043ac:	4630      	mov	r0, r6
 80043ae:	47c0      	blx	r8
 80043b0:	4307      	orrs	r7, r0
 80043b2:	3568      	adds	r5, #104	; 0x68
 80043b4:	e7e9      	b.n	800438a <_fwalk_reent+0x12>

080043b6 <__retarget_lock_init_recursive>:
 80043b6:	4770      	bx	lr

080043b8 <__retarget_lock_acquire_recursive>:
 80043b8:	4770      	bx	lr

080043ba <__retarget_lock_release_recursive>:
 80043ba:	4770      	bx	lr

080043bc <__swhatbuf_r>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	460e      	mov	r6, r1
 80043c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c4:	2900      	cmp	r1, #0
 80043c6:	b096      	sub	sp, #88	; 0x58
 80043c8:	4614      	mov	r4, r2
 80043ca:	461d      	mov	r5, r3
 80043cc:	da07      	bge.n	80043de <__swhatbuf_r+0x22>
 80043ce:	2300      	movs	r3, #0
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	89b3      	ldrh	r3, [r6, #12]
 80043d4:	061a      	lsls	r2, r3, #24
 80043d6:	d410      	bmi.n	80043fa <__swhatbuf_r+0x3e>
 80043d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043dc:	e00e      	b.n	80043fc <__swhatbuf_r+0x40>
 80043de:	466a      	mov	r2, sp
 80043e0:	f000 f902 	bl	80045e8 <_fstat_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	dbf2      	blt.n	80043ce <__swhatbuf_r+0x12>
 80043e8:	9a01      	ldr	r2, [sp, #4]
 80043ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043f2:	425a      	negs	r2, r3
 80043f4:	415a      	adcs	r2, r3
 80043f6:	602a      	str	r2, [r5, #0]
 80043f8:	e7ee      	b.n	80043d8 <__swhatbuf_r+0x1c>
 80043fa:	2340      	movs	r3, #64	; 0x40
 80043fc:	2000      	movs	r0, #0
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	b016      	add	sp, #88	; 0x58
 8004402:	bd70      	pop	{r4, r5, r6, pc}

08004404 <__smakebuf_r>:
 8004404:	898b      	ldrh	r3, [r1, #12]
 8004406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004408:	079d      	lsls	r5, r3, #30
 800440a:	4606      	mov	r6, r0
 800440c:	460c      	mov	r4, r1
 800440e:	d507      	bpl.n	8004420 <__smakebuf_r+0x1c>
 8004410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	6123      	str	r3, [r4, #16]
 8004418:	2301      	movs	r3, #1
 800441a:	6163      	str	r3, [r4, #20]
 800441c:	b002      	add	sp, #8
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	ab01      	add	r3, sp, #4
 8004422:	466a      	mov	r2, sp
 8004424:	f7ff ffca 	bl	80043bc <__swhatbuf_r>
 8004428:	9900      	ldr	r1, [sp, #0]
 800442a:	4605      	mov	r5, r0
 800442c:	4630      	mov	r0, r6
 800442e:	f7ff f987 	bl	8003740 <_malloc_r>
 8004432:	b948      	cbnz	r0, 8004448 <__smakebuf_r+0x44>
 8004434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004438:	059a      	lsls	r2, r3, #22
 800443a:	d4ef      	bmi.n	800441c <__smakebuf_r+0x18>
 800443c:	f023 0303 	bic.w	r3, r3, #3
 8004440:	f043 0302 	orr.w	r3, r3, #2
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	e7e3      	b.n	8004410 <__smakebuf_r+0xc>
 8004448:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <__smakebuf_r+0x7c>)
 800444a:	62b3      	str	r3, [r6, #40]	; 0x28
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	6020      	str	r0, [r4, #0]
 8004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004454:	81a3      	strh	r3, [r4, #12]
 8004456:	9b00      	ldr	r3, [sp, #0]
 8004458:	6163      	str	r3, [r4, #20]
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	6120      	str	r0, [r4, #16]
 800445e:	b15b      	cbz	r3, 8004478 <__smakebuf_r+0x74>
 8004460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f8d1 	bl	800460c <_isatty_r>
 800446a:	b128      	cbz	r0, 8004478 <__smakebuf_r+0x74>
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	81a3      	strh	r3, [r4, #12]
 8004478:	89a0      	ldrh	r0, [r4, #12]
 800447a:	4305      	orrs	r5, r0
 800447c:	81a5      	strh	r5, [r4, #12]
 800447e:	e7cd      	b.n	800441c <__smakebuf_r+0x18>
 8004480:	08004215 	.word	0x08004215

08004484 <_malloc_usable_size_r>:
 8004484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004488:	1f18      	subs	r0, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	bfbc      	itt	lt
 800448e:	580b      	ldrlt	r3, [r1, r0]
 8004490:	18c0      	addlt	r0, r0, r3
 8004492:	4770      	bx	lr

08004494 <_raise_r>:
 8004494:	291f      	cmp	r1, #31
 8004496:	b538      	push	{r3, r4, r5, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
 800449c:	d904      	bls.n	80044a8 <_raise_r+0x14>
 800449e:	2316      	movs	r3, #22
 80044a0:	6003      	str	r3, [r0, #0]
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80044aa:	b112      	cbz	r2, 80044b2 <_raise_r+0x1e>
 80044ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044b0:	b94b      	cbnz	r3, 80044c6 <_raise_r+0x32>
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f830 	bl	8004518 <_getpid_r>
 80044b8:	462a      	mov	r2, r5
 80044ba:	4601      	mov	r1, r0
 80044bc:	4620      	mov	r0, r4
 80044be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044c2:	f000 b817 	b.w	80044f4 <_kill_r>
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d00a      	beq.n	80044e0 <_raise_r+0x4c>
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	d103      	bne.n	80044d6 <_raise_r+0x42>
 80044ce:	2316      	movs	r3, #22
 80044d0:	6003      	str	r3, [r0, #0]
 80044d2:	2001      	movs	r0, #1
 80044d4:	e7e7      	b.n	80044a6 <_raise_r+0x12>
 80044d6:	2400      	movs	r4, #0
 80044d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80044dc:	4628      	mov	r0, r5
 80044de:	4798      	blx	r3
 80044e0:	2000      	movs	r0, #0
 80044e2:	e7e0      	b.n	80044a6 <_raise_r+0x12>

080044e4 <raise>:
 80044e4:	4b02      	ldr	r3, [pc, #8]	; (80044f0 <raise+0xc>)
 80044e6:	4601      	mov	r1, r0
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	f7ff bfd3 	b.w	8004494 <_raise_r>
 80044ee:	bf00      	nop
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <_kill_r>:
 80044f4:	b538      	push	{r3, r4, r5, lr}
 80044f6:	4d07      	ldr	r5, [pc, #28]	; (8004514 <_kill_r+0x20>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	f7fd f82b 	bl	800155c <_kill>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d102      	bne.n	8004510 <_kill_r+0x1c>
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	b103      	cbz	r3, 8004510 <_kill_r+0x1c>
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	bd38      	pop	{r3, r4, r5, pc}
 8004512:	bf00      	nop
 8004514:	200003bc 	.word	0x200003bc

08004518 <_getpid_r>:
 8004518:	f7fd b818 	b.w	800154c <_getpid>

0800451c <__sread>:
 800451c:	b510      	push	{r4, lr}
 800451e:	460c      	mov	r4, r1
 8004520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004524:	f000 f894 	bl	8004650 <_read_r>
 8004528:	2800      	cmp	r0, #0
 800452a:	bfab      	itete	ge
 800452c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800452e:	89a3      	ldrhlt	r3, [r4, #12]
 8004530:	181b      	addge	r3, r3, r0
 8004532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004536:	bfac      	ite	ge
 8004538:	6563      	strge	r3, [r4, #84]	; 0x54
 800453a:	81a3      	strhlt	r3, [r4, #12]
 800453c:	bd10      	pop	{r4, pc}

0800453e <__swrite>:
 800453e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004542:	461f      	mov	r7, r3
 8004544:	898b      	ldrh	r3, [r1, #12]
 8004546:	05db      	lsls	r3, r3, #23
 8004548:	4605      	mov	r5, r0
 800454a:	460c      	mov	r4, r1
 800454c:	4616      	mov	r6, r2
 800454e:	d505      	bpl.n	800455c <__swrite+0x1e>
 8004550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004554:	2302      	movs	r3, #2
 8004556:	2200      	movs	r2, #0
 8004558:	f000 f868 	bl	800462c <_lseek_r>
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	4632      	mov	r2, r6
 800456a:	463b      	mov	r3, r7
 800456c:	4628      	mov	r0, r5
 800456e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004572:	f000 b817 	b.w	80045a4 <_write_r>

08004576 <__sseek>:
 8004576:	b510      	push	{r4, lr}
 8004578:	460c      	mov	r4, r1
 800457a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457e:	f000 f855 	bl	800462c <_lseek_r>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	bf15      	itete	ne
 8004588:	6560      	strne	r0, [r4, #84]	; 0x54
 800458a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800458e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004592:	81a3      	strheq	r3, [r4, #12]
 8004594:	bf18      	it	ne
 8004596:	81a3      	strhne	r3, [r4, #12]
 8004598:	bd10      	pop	{r4, pc}

0800459a <__sclose>:
 800459a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459e:	f000 b813 	b.w	80045c8 <_close_r>
	...

080045a4 <_write_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	; (80045c4 <_write_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fd f809 	bl	80015ca <_write>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_write_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_write_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	200003bc 	.word	0x200003bc

080045c8 <_close_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4d06      	ldr	r5, [pc, #24]	; (80045e4 <_close_r+0x1c>)
 80045cc:	2300      	movs	r3, #0
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fd f815 	bl	8001602 <_close>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_close_r+0x1a>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_close_r+0x1a>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	200003bc 	.word	0x200003bc

080045e8 <_fstat_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d07      	ldr	r5, [pc, #28]	; (8004608 <_fstat_r+0x20>)
 80045ec:	2300      	movs	r3, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	f7fd f810 	bl	800161a <_fstat>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	d102      	bne.n	8004604 <_fstat_r+0x1c>
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	b103      	cbz	r3, 8004604 <_fstat_r+0x1c>
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	bd38      	pop	{r3, r4, r5, pc}
 8004606:	bf00      	nop
 8004608:	200003bc 	.word	0x200003bc

0800460c <_isatty_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4d06      	ldr	r5, [pc, #24]	; (8004628 <_isatty_r+0x1c>)
 8004610:	2300      	movs	r3, #0
 8004612:	4604      	mov	r4, r0
 8004614:	4608      	mov	r0, r1
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	f7fd f80f 	bl	800163a <_isatty>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_isatty_r+0x1a>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_isatty_r+0x1a>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	200003bc 	.word	0x200003bc

0800462c <_lseek_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d07      	ldr	r5, [pc, #28]	; (800464c <_lseek_r+0x20>)
 8004630:	4604      	mov	r4, r0
 8004632:	4608      	mov	r0, r1
 8004634:	4611      	mov	r1, r2
 8004636:	2200      	movs	r2, #0
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fd f808 	bl	8001650 <_lseek>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_lseek_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_lseek_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	200003bc 	.word	0x200003bc

08004650 <_read_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d07      	ldr	r5, [pc, #28]	; (8004670 <_read_r+0x20>)
 8004654:	4604      	mov	r4, r0
 8004656:	4608      	mov	r0, r1
 8004658:	4611      	mov	r1, r2
 800465a:	2200      	movs	r2, #0
 800465c:	602a      	str	r2, [r5, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	f7fc ff96 	bl	8001590 <_read>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d102      	bne.n	800466e <_read_r+0x1e>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	b103      	cbz	r3, 800466e <_read_r+0x1e>
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	bd38      	pop	{r3, r4, r5, pc}
 8004670:	200003bc 	.word	0x200003bc

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
